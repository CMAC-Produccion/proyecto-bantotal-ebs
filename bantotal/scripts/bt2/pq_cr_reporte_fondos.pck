create or replace package pq_cr_reporte_fondos is

  -- *****************************************************************
  -- Nombre                       : pq_cr_reporte_fondos
  -- Sistema                      : BANTOTAL
  -- Módulo                       : Créditos
  -- Versión                      : 1.0
  -- Fecha de Creación            : 10/12/2020
  -- Autor de Creación            : jrodriguej
  -- Estado                       : Activo
  -- Acceso                       : Público
  -- Descripción                  : Paquete para generar los reportes de fondos
  -- Fecha de Modificación        : 09/03/2021
  -- Autor de Modificación        : jrodriguej
  -- Descripción de Modificación  : Reemplazo de USRREPBI.REP_TOT_REPRO_2020 por AQPB090
  -- Fecha de Modificación        : 28/06/2021
  -- Autor de Modificación        : jrodriguej
  -- Descripción de Modificación  : Retiro de sucursal  
  -- Fecha de Modificación        : 17/01/2024
  -- Autor de Modificación        : rmontesr
  -- Descripción de Modificación  : Modificacion de nro jobs ejecutados
  -- *****************************************************************
  
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  --AQPB065
  procedure sp_reporte_reactiva_r1(pn_ffin    in date,
                                   pc_sucurs  in number,
                                   pn_usuario in char);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  --AQPB067
  procedure sp_reporte_faemype_r1(pn_ffin    in date,
                                  pc_sucurs  in number,
                                  pn_usuario in char);

  --AQPB068
  procedure sp_reporte_faemype_r2(pn_ffin    in date,
                                  pc_sucurs  in number,
                                  pn_usuario in char);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  --AQPB069
  procedure sp_reporte_faemype_r3(pn_ffin    in date,
                                  pc_sucurs  in number,
                                  pn_usuario in char);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  --AQPB070
  /*
  procedure sp_reporte_fcrecer_r1(pn_fini in   date,
                                  pn_ffin  in  date,
                                  pn_usuario in char);
                                  */
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  --AQPB072
  --procedure sp_reporte_fcrecer_r2(pn_fini date, pn_ffin date, pn_usuario char);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  --AQPB073
  procedure sp_reporte_fcrecer_r3(pn_ffin    in date,
                                  pc_sucurs  in number,
                                  pn_usuario in char);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  

  -- Verificar cronograma
  procedure sp_guardar_historico(pn_usuario char,
                                 pn_ind     number,
                                 pn_fcorte  date);

  -- Registro de información en plantilla
  procedure sp_insertar_cabecera(pn_pgcod   in number,
                                 pn_usuario in varchar2,
                                 pn_fecha   in date,
                                 pn_tiporep in number,
                                 pn_corr    out number,
                                 pn_flag    out varchar2);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  -- Actualización de información en plantilla
  procedure sp_actualizar_cabecera(pn_pgcod   in number,
                                   pn_fecha   in date,
                                   pn_corr    in number,
                                   pn_usuario in varchar2,
                                   pn_tiporep in number,
                                   pn_estado  in varchar2,
                                   pn_flag    out varchar2);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  Function fn_cr_verifica_tarea(P_C_NOMJOB IN VARCHAR2,
                                P_C_HOSTNA IN VARCHAR2) return number;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  Function fn_cr_verifica_tarea2(P_C_NOMJOB IN VARCHAR2,
                                P_C_HOSTNA IN VARCHAR2,
                                pn_paquete in varchar2,
                                pn_proceso in varchar2,
                                pn_usuario in varchar2) return number;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    
  procedure sp_cr_sch_reactiva(pd_fecpro  in date,
                               pn_usuario in varchar2
                               --,pn_flag out varchar2
                               );
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  procedure sp_cr_sch_faemype_r1(pd_fecpro in date, pn_usuario in char);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  procedure sp_cr_sch_faemype_r2(pd_fecpro in date, pn_usuario in char);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   
  procedure sp_cr_sch_faemype_r3(pd_fecpro in date, pn_usuario in char);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  procedure sp_cr_sch_fcrecer(pd_fecpro in date, pn_usuario in char);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  -- REACTIVA: Obtener información adicional
  procedure sp_plantilla_reactiva(pn_cod   in number,
                                  pn_mod   in number,
                                  pn_suc   in number,
                                  pn_mda   in number,
                                  pn_pap   in number,
                                  pn_cta   in number,
                                  pn_ope   in number,
                                  pn_sbo   in number,
                                  pn_top   in number,
                                  pn_fecha in date,
                                  
                                  pn_fsub out aqpb065b.aqpb065bfsub%type,
                                  pn_nsub out aqpb065b.aqpb065bnsub%type,
                                  pn_ncer out aqpb065b.aqpb065bncer%type,
                                  pn_ccob out aqpb065b.aqpb065bccob%type,
                                  pn_nact out aqpb065b.aqpb065bnact%type,
                                  pn_tdoc out aqpb065b.aqpb065btdoc%type,
                                  pn_ndoc out aqpb065b.aqpb065bndoc%type,
                                  pn_pcob out aqpb065b.aqpb065bpcob%type,
                                  pn_vpro out aqpb065b.aqpb065bvpro%type,
                                  pn_code out aqpb065b.aqpb065bcode%type,
                                  pn_nop  out aqpb065b.aqpb065bnop%type,
                                  pn_tneg out aqpb065b.aqpb065btneg%type,
                                  pn_ntra out aqpb065b.aqpb065bntra%type,
                                  pn_nsec out aqpb065b.aqpb065bnsec%type,
                                  pn_ttit out aqpb065b.aqpb065bttit%type,
                                  pn_temp out aqpb065b.aqpb065btemp%type,
                                  pn_gesp out aqpb065b.aqpb065bgesp%type,
                                  pn_ggen out aqpb065b.aqpb065bggen%type,
                                  pn_ldoc out aqpb065b.aqpb065bldoc%type,
                                  pn_sapr out aqpb065b.aqpb065bsapr%type,
                                  pn_fbcr out aqpb065b.aqpb065bfbcr%type,
                                  pn_ppzo out aqpb065b.aqpb065bppzo%type,
                                  pn_pgrac out aqpb065b.aqpb065bpgra%type,
                                  pn_ciuu  out aqpb065b.aqpb065bciiuori%type,
                                  pn_dciu  out aqpb065b.aqpb065bactnomori%type,
                                  pn_cren  out aqpb065b.aqpb065bcren%type,
                                  pn_cobr  out aqpb065b.aqpb065bcobr%type,
                                  pn_chon  out aqpb065b.aqpb065bchon%type
                                  ); -- return number;                                                                    
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  -- FAE: Obtener información adicional
  procedure sp_plantilla_faemype_r1(pn_cod   in number,
                                    pn_mod   in number,
                                    pn_suc   in number,
                                    pn_mda   in number,
                                    pn_pap   in number,
                                    pn_cta   in number,
                                    pn_ope   in number,
                                    pn_sbo   in number,
                                    pn_top   in number,
                                    pn_fecha in date,
                                    pn_csap  out aqpb067b.aqpb067bcsap%type,
                                    pn_fdes  out aqpb067b.aqpb067bfdes%type,
                                    pn_mon   out aqpb067b.aqpb067bmon%type,
                                    pn_ncuo  out aqpb067b.aqpb067bncuo%type,
                                    pn_peri  out aqpb067b.aqpb067bperi%type,
                                    pn_pcob  out aqpb067b.aqpb067bpcob%type,
                                    pn_fini out aqpb067b.aqpb067bfini%type,
                                    pn_ffin out aqpb067b.aqpb067bffin%type,
                                    pn_ciuu  out aqpb067b.aqpb067bciiuori%type,
                                    pn_dciu  out aqpb067b.aqpb067bactnomori%type
                                    ); -- return number;  
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  -- FAE: Obtener información adicional
  procedure sp_plantilla_faemype_v2(pn_cod   in number,
                                    pn_mod   in number,
                                    pn_suc   in number,
                                    pn_mda   in number,
                                    pn_pap   in number,
                                    pn_cta   in number,
                                    pn_ope   in number,
                                    pn_sbo   in number,
                                    pn_top   in number,
                                    pn_fecha in date,
                                    pn_csap  out aqpb067b.aqpb067bcsap%type,
                                    pn_fdes  out aqpb067b.aqpb067bfdes%type,
                                    pn_mon   out aqpb067b.aqpb067bmon%type,
                                    pn_ncuo  out aqpb067b.aqpb067bncuo%type,
                                    pn_peri  out aqpb067b.aqpb067bperi%type,
                                    pn_pcob  out aqpb067b.aqpb067bpcob%type,
                                    pn_fini out aqpb067b.aqpb067bfini%type,
                                    pn_ffin out aqpb067b.aqpb067bffin%type,
                                    pn_ciuu  out aqpb067b.aqpb067bciiuori%type,
                                    pn_dciu  out aqpb067b.aqpb067bactnomori%type,
                                    pn_ncer  out aqpb067b.aqpb067bncer%type, --Numero de certificado
                                    pn_ccob  out aqpb067b.aqpb067bccob%type, --Codigo de Cobertura
                                    pn_cren  out aqpb067b.aqpb067bcren%type, --Certificado de renovacion
                                    pn_cobr  out aqpb067b.aqpb067bcobr%type, --Cobertura de renovacion
                                    pn_chon  out aqpb067b.aqpb067bchon%type, --Certificado de honra
                                    pn_codi  out aqpb067b.aqpb067bcodi%type, --Codigo de solicitud COFIDE
                                    pn_crec  out aqpb067b.aqpb067bcrec%type
                                    ); -- return number;                                                                 
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  procedure sp_plantilla_fcrecer(pn_cod   in number,
                                 pn_mod   in number,
                                 pn_suc   in number,
                                 pn_mda   in number,
                                 pn_pap   in number,
                                 pn_cta   in number,
                                 pn_ope   in number,
                                 pn_sbo   in number,
                                 pn_top   in number,
                                 pn_fecha in date,
                                 pn_tdoc  out aqpb073b.aqpb073btdoc%type,
                                 pn_ndoc  out aqpb073b.aqpb073bndoc%type,
                                 pn_esf   out aqpb073b.aqpb073besf%type,
                                 pn_ccob  out aqpb073b.aqpb073bccob%type,
                                 pn_tnro  out aqpb073b.aqpb073btnro%type,
                                 pn_mtoe  out aqpb073b.aqpb073bmtoe%type,
                                 pn_pcob  out aqpb073b.aqpb073bpcob%type,
                                 pn_ciuu  out aqpb073b.aqpb073bciiuori%type,
                                 pn_dciu  out aqpb073b.aqpb073bactnomori%type,
                                 pn_nven  out aqpb073b.aqpb073bnven%type
                                 );
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  procedure sp_plantilla_fcrecer_v2(pn_cod   in number,
                                 pn_mod   in number,
                                 pn_suc   in number,
                                 pn_mda   in number,
                                 pn_pap   in number,
                                 pn_cta   in number,
                                 pn_ope   in number,
                                 pn_sbo   in number,
                                 pn_top   in number,
                                 pn_fecha in date,
                                 pn_tdoc  out aqpb073b.aqpb073btdoc%type,
                                 pn_ndoc  out aqpb073b.aqpb073bndoc%type,
                                 pn_esf   out aqpb073b.aqpb073besf%type,
                                 pn_ccob  out aqpb073b.aqpb073bccob%type,
                                 pn_tnro  out aqpb073b.aqpb073btnro%type,
                                 pn_mtoe  out aqpb073b.aqpb073bmtoe%type,
                                 pn_pcob  out aqpb073b.aqpb073bpcob%type,
                                 pn_ciuu  out aqpb073b.aqpb073bciiuori%type,
                                 pn_dciu  out aqpb073b.aqpb073bactnomori%type,
                                 pn_nven  out aqpb073b.aqpb073bnven%type,
                                 pn_ncer  out aqpb073b.aqpb073bncer%type,
                                 pn_chon  out aqpb073b.aqpb073bchon%type,
                                 pn_ccob2 out aqpb073b.aqpb073bccob2%type,
                                 pn_conhon out aqpb073b.aqpb073bconhon%type
                                 );
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  procedure sp_obtener_calf_caja(pn_cod   in number,
                                 pn_mod   in number,
                                 pn_suc   in number,
                                 pn_mda   in number,
                                 pn_pap   in number,
                                 pn_cta   in number,
                                 pn_ope   in number,
                                 pn_sbo   in number,
                                 pn_top   in number,
                                 pn_est   in number,
                                 pn_fecha in date,
                                 --pn_dcla out aqpb067.aqpb067dcla%type,
                                 --pn_ncla out aqpb067.aqpb067ncla%type
                                 pn_calif0a out aqpb067.aqpb067cnoma%type,
                                 pn_calif1a out aqpb067.aqpb067ccppa%type,
                                 pn_calif2a out aqpb067.aqpb067cdefa%type,
                                 pn_calif3a out aqpb067.aqpb067cduda%type,
                                 pn_calif4a out aqpb067.aqpb067cpera%type,
                                 pn_deccaj  out date);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                   
  procedure sp_sch_aqpb070a_carga(pd_fecpro in date, pn_usuario in char, pn_indi in number);                          
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
procedure sp_cr_carga_temp_reac(pc_usuario in varchar2, 
                                     pc_sucurs in varchar2,
                                     pc_fecpro in date);  
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               
procedure sp_cr_carga_temp_fae(pc_usuario in varchar2, 
                                     pc_sucurs in varchar2,
                                     pc_fecpro in date);  
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                 
procedure sp_cr_carga_temp_crec(pc_usuario in varchar2, 
                                     pc_sucurs in varchar2,
                                     pc_fecpro in date);  
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             
  procedure sp_verificar_550(pc_mon in number,
                                  pc_suc  in number,
                                  pn_cta  in number,
                                  pn_oper in number,
                                  pc_fech  out date);  
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                               
  procedure sp_cr_FSH016_550(  pn_emp  in number,
                               pn_mod  in number,
                               pn_suc  in number,
                               pn_mda  in number,
                               pn_pap  in number,
                               pn_cta  in number,
                               pn_ope  in number,
                               pn_sbo  in number,
                               pn_top  in number,
                               pd_fpp  in date,  
                               pd_fec  in date,
                               pd_fei  in date, -- fecha inicio de calculo
                               pc_ind  in char, --indicador ultimo pago
                               pv_cap  out number,
                               pv_int  out number,
                               pv_icv  out number,
                               pv_mor  out number,
                               pv_seg  out number,
                               pv_rub  out number,
                               pv_gas  out number
                            );
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  --procedure sp_cr_sch_faemype_r1_new(pd_fecpro in date, pn_usuario in char);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  procedure sp_obtener_sald_insol2_h(pn_cod   in number,
                                   pn_mod   in number,
                                   pn_suc   in number,
                                   pn_mda   in number,
                                   pn_pap   in number,
                                   pn_cta   in number,
                                   pn_ope   in number,
                                   pn_sbo   in number,
                                   pn_top   in number,
                                   pn_fecha in date,
                                   pn_indi  in number,
                                   pn_stat  in number,
                                   pn_sald  out number);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
  procedure sp_obtener_sald_insol200_h(pn_cod   in number,
                                   pn_mod   in number,
                                   pn_suc   in number,
                                   pn_mda   in number,
                                   pn_pap   in number,
                                   pn_cta   in number,
                                   pn_ope   in number,
                                   pn_sbo   in number,
                                   pn_top   in number,
                                   pn_fecha in date,
                                   pn_indi  in number,
                                   pn_stat  in number,
                                   pn_sald  out number);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  procedure sp_obtener_sald_insol2_h99(pn_cod   in number,
                                   pn_mod   in number,
                                   pn_suc   in number,
                                   pn_mda   in number,
                                   pn_pap   in number,
                                   pn_cta   in number,
                                   pn_ope   in number,
                                   pn_sbo   in number,
                                   pn_top   in number,
                                   pn_fecha in date,
                                   pn_indi  in number,
                                   pn_stat  in number,
                                   pn_sald  out number);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
  procedure sp_obtener_sald_insol200_h99(pn_cod   in number,
                                   pn_mod   in number,
                                   pn_suc   in number,
                                   pn_mda   in number,
                                   pn_pap   in number,
                                   pn_cta   in number,
                                   pn_ope   in number,
                                   pn_sbo   in number,
                                   pn_top   in number,
                                   pn_fecha in date,
                                   pn_indi  in number,
                                   pn_stat  in number,
                                   pn_sald  out number);
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                               
  

end pq_cr_reporte_fondos;
/

create or replace package body pq_cr_reporte_fondos is

  -- *****************************************************************
  -- Nombre                       : pq_cr_reporte_fondos_p3
  -- Sistema                      : BANTOTAL
  -- Módulo                       : Créditos
  -- Versión                      : 1.0
  -- Fecha de Creación            : 10/12/2020
  -- Autor de Creación            : jrodriguej
  -- Estado                       : Activo
  -- Acceso                       : Público
  -- Descripción                  : Paquete para generar los reportes de fondos
  -- Fecha de Modificación        : 09/03/2021
  -- Autor de Modificación        : jrodriguej
  -- Descripción de Modificación  : Reemplazo de USRREPBI.REP_TOT_REPRO_2020 por AQPB090
  -- Fecha de Modificación        : 28/06/2021
  -- Autor de Modificación        : jrodriguej
  -- Descripción de Modificación  : Retiro de sucursal
  ---                             : 20211203 dcastro se comento  t.aotope = 353   para incluir creditos con tipo ope 550

  -- *****************************************************************

  --TABLA AQPB065
  procedure sp_reporte_reactiva_r1(pn_ffin    in date,
                                   pc_sucurs  in number,
                                   pn_usuario in char) is
  
    lc_razon     char(100);
    lc_ncre      char(20);
    lc_pcre      number;
    lc_pcre_c    number;
    lc_fecha_rcc date;
    lc_csbs      char(11);
    lc_fecha     DATE;
    lc_coderr    char(100);
    lc_msgerr    char(1000);
  
    --lc_ciiu number;
    lc_acti char(60);
    lc_inst number(10);
    lc_mda  char(10);
    lc_sdoi number(17, 2);
    lc_pgra number(5);
  
    lc_calif0 number(5, 2);
    lc_calif1 number(5, 2);
    lc_calif2 number(5, 2);
    lc_calif3 number(5, 2);
    lc_calif4 number(5, 2);
  
    lc_statd char(30);
    lc_lamr  char(2);
    lc_fupag date;
    lc_diat  number;
    lc_regi  number(9);
    lc_zona  number(9);
    lc_ases  char(10);
    lc_nsuc  char(30);
    lc_nzon  char(40);
    lc_nreg  char(30);
  
    lb_fsub  aqpb065b.aqpb065bfsub%type;
    lb_nsub  aqpb065b.aqpb065bnsub%type;
    lb_ncer  aqpb065b.aqpb065bncer%type;
    lb_ccob  aqpb065b.aqpb065bccob%type;
    lb_nact  aqpb065b.aqpb065bnact%type;
    lb_tdoc  aqpb065b.aqpb065btdoc%type;
    lb_ndoc  aqpb065b.aqpb065bndoc%type;
    lb_pcob  aqpb065b.aqpb065bpcob%type;
    lb_vpro  aqpb065b.aqpb065bvpro%type;
    lb_code  aqpb065b.aqpb065bcode%type;
    lb_nop   aqpb065b.aqpb065bnop%type;
    lb_tneg  aqpb065b.aqpb065btneg%type;
    lb_ntra  aqpb065b.aqpb065bntra%type;
    lb_nsec  aqpb065b.aqpb065bnsec%type;
    lb_ttit  aqpb065b.aqpb065bttit%type;
    lb_temp  aqpb065b.aqpb065btemp%type;
    lb_gesp  aqpb065b.aqpb065bgesp%type;
    lb_ggen  aqpb065b.aqpb065bggen%type;
    lb_ldoc  aqpb065b.aqpb065bldoc%type;
    lb_sapr  aqpb065b.aqpb065bsapr%type;
    lb_fbcr  aqpb065b.aqpb065bfbcr%type;
    lb_ppzo  aqpb065b.aqpb065bppzo%type;
    lb_pgrac aqpb065b.aqpb065bpgra%type;
  
    lb_ciuu aqpb065b.aqpb065bciiuori%type;
    lb_dciu aqpb065b.aqpb065bactnomori%type;
  
    lc_mtoc  number(17, 2);
    lc_scapc number(17, 2);
  
    lc_lrep  aqpb067.aqpb067lrep%type;
    lc_nrep  aqpb067.aqpb067nrep%type;
    lc_frep  aqpb067.aqpb067frep%type;
    lc_tabla varchar2(50);
    lc_peri2 number;
    lc_ncuo2 number;
    lc_fpri  date;
    lc_fult  date;
  
    lc_ufpag1 date;
    --lc_fupag date;
    lc_fvenup date;
    lc_fvenuc date;
    lc_ncuop  number;
    lc_ncuopg number;
    
    lb_cren varchar2(50);  
    lb_cobr varchar2(50); 
    lb_chon varchar2(50); 
    
    lc_gas  number(16, 2);
    lc_mor  number(16, 2);
    lc_int  number(16, 2);
    lc_cuo  number(16, 2);
    lc_icv  number(16, 2);
    lc_pen  number(16, 2);
    lc_tsum number(16, 2);
  
    lc_feccan date;
    --lc_ciiu4   char(5);
    lc_nro_pre char(20);
    lc_mda_pre char(2);
  
    lx_pepais NUMBER(3);
    lx_petdoc NUMBER(2);
    lx_pendoc CHAR(12);
  
    lc_ciiu6   number(9);
    lc_ciiu4   number(12);
    lc_nro_cuo number(9);
    lc_tea     number(10, 6);
  
    ln_cta number(9);
    ln_ope number(9);
  
    lb_flag_vig  char(1);
    lb_fmax_anu  date;
    --lb_flag_back number(3);
    lc_sdoins    number(17, 2);
    lc_nro_mes   number(3);
  
    lb_550      number(3);
    lb_fec_550  date;
    lb_mda      number(4);
    lb_max_sbop number(3);
    lb_cont_del number(3);
    
      
  
    lc_eshonr char(1);
    ln_mhonr number(17,2);
    ld_fhonr date;
    ln_sdohon number(17,2);
    
    ld_fcest  date;
    lc_calif0a aqpb067.aqpb067cnoma%type;
    lc_calif1a aqpb067.aqpb067ccppa%type;
    lc_calif2a aqpb067.aqpb067cdefa%type;
    lc_calif3a aqpb067.aqpb067cduda%type;
    lc_calif4a aqpb067.aqpb067cpera%type;
    lc_fecha_caj date;
    lc_tmor number;
    lc_trep number;
    
    ln_vint number;
    ln_vmor number;
    ln_vicv number;
              
    cursor reporte_reactiva is
    
    -- REACTIVA: VIGENTE
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             x.pepais,
             x.petdoc,
             x.pendoc,             
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aoimp monto,
             t.aotasa tasa,
             t.aopzo plazo,
             t.aofval,
             t.aofvto,
             t.aostat,
             t.aofe99,
             r.scsdo,
             0 estado
        from fsd010 t,
             fsr008 x,
             fsd011 r,
             (select distinct u.aqpb065bcod,
                              u.aqpb065bmod,
                              u.aqpb065bsuc,
                              u.aqpb065bmda,
                              u.aqpb065bpap,
                              u.aqpb065bcta,
                              u.aqpb065bope,
                              u.aqpb065bsbo,
                              u.aqpb065btop
                from aqpb065b u
               where u.aqpb065bcod = 1
                 and u.aqpb065bfec <= pn_ffin
                 and u.aqpb065best <> 'D') g
       where
      
       r.pgcod = t.pgcod
       and r.scmod = t.aomod
      --and r.scsuc = t.aosuc --  jrodriguej 28.06.2021
       and r.scmda = t.aomda
       and r.scpap = t.aopap
       and r.sccta = t.aocta
       and r.scoper = t.aooper
      --and r.scsbop = t.aosbop
      --and r.sctope = t.aotope
      
      --and t.aomod <> 419
       and t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat <> 99
      
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      -- AQPB065B // FSD010 
       and g.aqpb065bcod = t.pgcod
       and g.aqpb065bmod = t.aomod
      --and g.aqpb065bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb065bmda = t.aomda
       and g.aqpb065bpap = t.aopap
       and g.aqpb065bcta = t.aocta
       and g.aqpb065bope = t.aooper
      --and g.aqpb065bsbo = t.aosbop
      --and g.aqpb065btop = t.aotope
      -- REACTIVA
       and t.aomod = 101
       ---and t.aotope = 353   20211203 dcastro se comento para incluir creditos con tipo ope 550
       and t.aosuc = pc_sucurs
      
      union
      -- REACTIVA CANCELADOS
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             x.pepais,
             x.petdoc,
             x.pendoc,
             
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aoimp monto,
             t.aotasa tasa,
             t.aopzo plazo,
             t.aofval,
             t.aofvto,
             t.aostat,
             t.aofe99,
             0 scsdo,
             99 estado
      --y.xwfprcins
        from fsd010 t,
             fsr008 x,
             --fsd011 r,
             (select distinct u.aqpb065bcod,
                              u.aqpb065bmod,
                              u.aqpb065bsuc,
                              u.aqpb065bmda,
                              u.aqpb065bpap,
                              u.aqpb065bcta,
                              u.aqpb065bope,
                              u.aqpb065bsbo,
                              u.aqpb065btop
                from aqpb065b u
               where u.aqpb065bcod = 1
                 and u.aqpb065bfec <= pn_ffin
                 and u.aqpb065best <> 'D') g
       where
      --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat = 99
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
      
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      -- AQPB065B // FSD010 
       and g.aqpb065bcod = t.pgcod
       and g.aqpb065bmod = t.aomod
      --and g.aqpb065bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb065bmda = t.aomda
       and g.aqpb065bpap = t.aopap
       and g.aqpb065bcta = t.aocta
       and g.aqpb065bope = t.aooper
      --and g.aqpb065bsbo = t.aosbop
      --and g.aqpb065btop = t.aotope
      -- REACTIVA
       and t.aomod = 101
      ---and t.aotope = 353   20211203 dcastro se comento para incluir creditos con tipo ope 550
       and t.aosuc = pc_sucurs
      
      ;
  
    cursor reporte_reactiva_h is
    
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             x.pepais,
             x.petdoc,
             x.pendoc,
             
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aoimp monto,
             t.aotasa tasa,
             t.aopzo plazo,
             t.aofval,
             t.aofvto,
             r.aqpb070aprod aostat, --t.aostat,
             t.aofe99,
             (r.aqpb070asdmn * -1) scsdo, -- (r.bcsdmn * -1) scsdo
             0 estado
      --y.xwfprcins
        from fsd010   t
             join fsr008   x on t.pgcod = x.pgcod
                                 and t.aocta = x.ctnro
                                 and x.ttcod = 1
                                 and x.cttfir = 'T'
             left join aqpb070a r on r.aqpb070ausur = pn_usuario
                                --and r.aqpb070atabla = 'REACTIVA'
                                 and r.aqpb070aemp = t.pgcod
                                --and r.aqpb070arubr = h.rubro -- jrodriguej 28.06.2021
                                 and r.aqpb070amod = t.aomod
                                --and r.aqpb070asuc = t.aosuc -- jrodriguej 28.06.2021
                                 and r.aqpb070amda = t.aomda
                                 and r.aqpb070apap = t.aopap
                                 and r.aqpb070acta = t.aocta
                                 and r.aqpb070aoper = t.aooper
             --fsd014 h, -- jrodriguej 28.06.2021
             join aqpb065b g on g.aqpb065bcod = t.pgcod
                        -- and g.aqpb065bmod = t.aomod
                        --and g.aqpb065bsuc = t.aosuc -- jrodriguej 28.06.2021
                        -- and g.aqpb065bmda = t.aomda
                        -- and g.aqpb065bpap = t.aopap
                         and g.aqpb065bcta = t.aocta
                         and g.aqpb065bope = t.aooper
             
       where
      
      
       
      --and r.bcsbop = t.aosbop
      --and r.aqpb070atop = t.aotope
      --and r.aqpb070afech = pn_ffin
      
      --and t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and (t.aostat <> 99 or (t.aostat = 99 and t.aofe99 > pn_ffin))
      
       and g.aqpb065bcod = 1
                 and g.aqpb065bfec <= pn_ffin
                 and g.aqpb065best <> 'D'      
      
     
      -- REACTIVA
       and t.aosuc = pc_sucurs
       and t.aomod = 101
      ---and t.aotope = 353   20211203 dcastro se comento para incluir creditos con tipo ope 550
      
      UNION
      
      -- REACTIVA: CANCELADOS       
      
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             x.pepais,
             x.petdoc,
             x.pendoc,
             
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aoimp monto,
             t.aotasa tasa,
             t.aopzo plazo,
             t.aofval,
             t.aofvto,
             99 aostat, --t.aostat,
             t.aofe99,
             0 scsdo,
             99 estado
      --y.xwfprcins
        from fsd010 t,
             fsr008 x,
             --fsd011 r,
             (select distinct u.aqpb065bcod,
                              u.aqpb065bmod,
                              u.aqpb065bsuc,
                              u.aqpb065bmda,
                              u.aqpb065bpap,
                              u.aqpb065bcta,
                              u.aqpb065bope,
                              u.aqpb065bsbo,
                              u.aqpb065btop
                from aqpb065b u
               where u.aqpb065bcod = 1
                 and u.aqpb065bfec <= pn_ffin
                 and u.aqpb065best <> 'D') g
       where
      --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat = 99
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
      
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      -- AQPB065B // FSD010 
       and g.aqpb065bcod = t.pgcod
       and g.aqpb065bmod = t.aomod
      --and g.aqpb065bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb065bmda = t.aomda
       and g.aqpb065bpap = t.aopap
       and g.aqpb065bcta = t.aocta
       and g.aqpb065bope = t.aooper
      --and g.aqpb065bsbo = t.aosbop
      --and g.aqpb065btop = t.aotope
      -- REACTIVA
      and t.aomod = 101  
      ---and t.aotope = 353   20211203 dcastro se comento para incluir creditos con tipo ope 550
       
       and t.aosuc = pc_sucurs
      
      ;
  
    -- Cursos reactiva 200
    cursor reporte_reactiva_200 is
    
    -- REACTIVA: VIGENTE
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             x.pepais,
             x.petdoc,
             x.pendoc,
             
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aoimp monto,
             t.aotasa tasa,
             t.aopzo plazo,
             t.aofval,
             t.aofvto,
             t.aostat,
             t.aofe99,
             --r.scsdo,
             0 estado
      --y.xwfprcins
        from fsd010 t,
             fsr008 x,
             --fsd011 r,
             (select distinct u.aqpb065bcod,
                              u.aqpb065bmod,
                              u.aqpb065bsuc,
                              u.aqpb065bmda,
                              u.aqpb065bpap,
                              u.aqpb065bcta,
                              u.aqpb065bope,
                              u.aqpb065bsbo,
                              u.aqpb065btop
                from aqpb065b u
               where u.aqpb065bcod = 1
                 and u.aqpb065bfec <= pn_ffin
                 and u.aqpb065best <> 'D') g
       where
      
       t.pgcod = 1
       and t.aomod in (200,33) -- jrodriguej 28.06.2021
       and t.aofval <= pn_ffin
       --and t.aostat <> 99
       and (t.aostat <> 99 or (t.aostat = 99 and t.aofe99 > pn_ffin))
      
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      -- AQPB065B // FSD010 
       and g.aqpb065bcod = t.pgcod
      --and g.aqpb065bmod = t.aomod  -- jrodriguej 19.07.2021
      --and g.aqpb065bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb065bmda = t.aomda
       and g.aqpb065bpap = t.aopap
       and g.aqpb065bcta = t.aocta
       and g.aqpb065bope = t.aooper
      --and g.aqpb065bsbo = t.aosbop
      --and g.aqpb065btop = t.aotope
      
      -- REACTIVA
      --and g.aqpb065bmod = 101
       --and t.aotope = 353 -- jrodriguej 12.08.2021
       and t.aosuc = pc_sucurs
      
      union
      -- REACTIVA CANCELADOS
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             x.pepais,
             x.petdoc,
             x.pendoc,
             
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aoimp monto,
             t.aotasa tasa,
             t.aopzo plazo,
             t.aofval,
             t.aofvto,
             t.aostat,
             t.aofe99,
             --0 scsdo,
             99 estado
      --y.xwfprcins
        from fsd010 t,
             fsr008 x,
             --fsd011 r,
             (select distinct u.aqpb065bcod,
                              u.aqpb065bmod,
                              u.aqpb065bsuc,
                              u.aqpb065bmda,
                              u.aqpb065bpap,
                              u.aqpb065bcta,
                              u.aqpb065bope,
                              u.aqpb065bsbo,
                              u.aqpb065btop
                from aqpb065b u
               where u.aqpb065bcod = 1
                 and u.aqpb065bfec <= pn_ffin
                 and u.aqpb065best <> 'D') g
       where t.pgcod = 1
         and t.aomod in (200,33) -- jrodriguej 28.06.2021
         and t.aofval <= pn_ffin
         and t.aostat = 99
         and not exists (select 'x'
                from fsd010 l
               where l.pgcod = t.pgcod
                 and l.aomda = t.aomda
                 and l.aopap = t.aopap
                 and l.aocta = t.aocta
                 and l.aooper = t.aooper
                 and l.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144))
                 and l.aostat <> 99)
            
         and t.aofe99 =
             (select max(h.aofe99)
                from fsd010 h
               where h.pgcod = t.pgcod
                    --and h.aomod = t.aomod -- jrodriguej 19.07.2021
                    --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
                 and h.aomda = t.aomda
                 and h.aopap = t.aopap
                 and h.aocta = t.aocta
                 and h.aooper = t.aooper
                    --and r.scsbop = t.aosbop
                    --and h.aotope = t.aotope
                 and h.aofe99 <= pn_ffin
                 and h.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144)))
            
         and t.pgcod = x.pgcod
         and t.aocta = x.ctnro
         and x.ttcod = 1
         and x.cttfir = 'T'
            
            -- AQPB065B // FSD010 
         and g.aqpb065bcod = t.pgcod
            --and g.aqpb065bmod = t.aomod
            --and g.aqpb065bsuc = t.aosuc -- jrodriguej 28.06.2021
         and g.aqpb065bmda = t.aomda
         and g.aqpb065bpap = t.aopap
         and g.aqpb065bcta = t.aocta
         and g.aqpb065bope = t.aooper
            --and g.aqpb065bsbo = t.aosbop
            --and g.aqpb065btop = t.aotope
            
            -- REACTIVA
            --and g.aqpb065bmod = 101  -- jrodriguej 28.06.2021
            
         --and t.aotope = 353 -- jrodriguej 12.08.2021
         and t.aosuc = pc_sucurs
      
      ;
  
    cursor verificar_reactiva is
      select x.aqpb065usur usur,
             x.aqpb065aosuc suc,
             x.aqpb065aocta cta,
             x.aqpb065aooper oper,
             count(*) total
        from aqpb065 x
       where x.aqpb065usur = pn_usuario
         and x.aqpb065aosuc = pc_sucurs
       group by x.aqpb065usur,
                x.aqpb065aosuc,
                x.aqpb065aocta,
                x.aqpb065aooper
      having count(*) > 1;
  
  begin
  
    ---delete from aqpb065 t where trim(t.aqpb065usur) = pn_usuario;
    ---commit;
  
    -- 1. Nro meses RCC
    begin
      select x.tp1nro1
        into lc_nro_mes
        from fst198 x
       where x.TP1COD = 1
         and x.TP1COD1 = 11144
         and x.TP1CORR1 = 10
         and x.tp1corr2 = 2
         and x.tp1corr3 = 4;
    exception
      when others then
        lc_nro_mes := 1;
    end;
  
    -- 23. Fecha clasificación SBS 
    select to_date(t.tpnro, 'DDMMYY')
      into lc_fecha_rcc
      from fst098 t
     where t.pgcod = 1
       and t.tpcod = 7647
       and t.tpcorr = 12;
  
    if pn_ffin <= lc_fecha_rcc then
      lc_fecha_rcc := last_day(add_months(trunc(pn_ffin), -1 * lc_nro_mes));
    end if;
  
    -- Fecha actual
    select t.pgfape into lc_fecha from fst017 t where t.pgcod = 1;
     
  
    if lc_fecha = pn_ffin then
    
      begin
      
        for j in reporte_reactiva() loop
        
          ln_cta := j.aocta;
          ln_ope := j.aooper;
        
          -- 1. Fecha de subasta'
          begin
            -- Call the procedure
            pq_cr_reporte_fondos.sp_plantilla_reactiva(pn_cod   => j.pgcod,
                                                       pn_mod   => j.aomod,
                                                       pn_suc   => j.aosuc,
                                                       pn_mda   => j.aomda,
                                                       pn_pap   => j.aopap,
                                                       pn_cta   => j.aocta,
                                                       pn_ope   => j.aooper,
                                                       pn_sbo   => j.aosbop,
                                                       pn_top   => j.aotope,
                                                       pn_fecha => pn_ffin,
                                                       
                                                       pn_fsub  => lb_fsub,
                                                       pn_nsub  => lb_nsub,
                                                       pn_ncer  => lb_ncer,
                                                       pn_ccob  => lb_ccob,
                                                       pn_nact  => lb_nact,
                                                       pn_tdoc  => lb_tdoc,
                                                       pn_ndoc  => lb_ndoc,
                                                       pn_pcob  => lb_pcob,
                                                       pn_vpro  => lb_vpro,
                                                       pn_code  => lb_code,
                                                       pn_nop   => lb_nop,
                                                       pn_tneg  => lb_tneg,
                                                       pn_ntra  => lb_ntra,
                                                       pn_nsec  => lb_nsec,
                                                       pn_ttit  => lb_ttit,
                                                       pn_temp  => lb_temp,
                                                       pn_gesp  => lb_gesp,
                                                       pn_ggen  => lb_ggen,
                                                       pn_ldoc  => lb_ldoc,
                                                       pn_sapr  => lb_sapr,
                                                       pn_fbcr  => lb_fbcr,
                                                       pn_ppzo  => lb_ppzo,
                                                       pn_pgrac => lb_pgrac,
                                                       pn_ciuu  => lb_ciuu,
                                                       pn_dciu  => lb_dciu,
                                                       pn_cren  => lb_cren,
                                                       pn_cobr  => lb_cobr,
                                                       pn_chon  => lb_chon);
          
          exception
            when others then
              lb_fsub  := null;
              lb_nsub  := null;
              lb_ncer  := null;
              lb_ccob  := null;
              lb_nact  := null;
              lb_tdoc  := null;
              lb_ndoc  := null;
              lb_pcob  := null;
              lb_vpro  := null;
              lb_code  := null;
              lb_nop   := null;
              lb_tneg  := null;
              lb_ntra  := null;
              lb_nsec  := null;
              lb_ttit  := null;
              lb_temp  := null;
              lb_gesp  := null;
              lb_ggen  := null;
              lb_ldoc  := null;
              lb_sapr  := null;
              lb_fbcr  := null;
              lb_ppzo  := null;
              lb_pgrac := null;
              lb_ciuu  := null;
              lb_dciu  := null;
              lb_cren  := null;
              lb_cobr  := null;
              lb_chon  := null;
          end;
        
          if lb_tdoc = 1 then
            lb_tdoc := 21;
          elsif lb_tdoc = 6 then
            lb_tdoc := 9;
          end if;
        
          -- 0. Instancia
          begin
            select nvl(x.xwfprcins, 0)
              into lc_inst
              from xwf700 x
             where x.xwfempresa = j.pgcod
               and x.xwfmodulo = j.aomod
               and x.xwfsucursal = j.aosuc
               and x.xwfmoneda = j.aomda
               and x.xwfpapel = j.aopap
               and x.xwfcuenta = j.aocta
               and x.xwfoperacion = j.aooper
               and x.xwfsubope = j.aosbop
               and x.xwftipope = j.aotope
               and x.xwfcar3 = '1';
          exception
            when others then
              lc_inst := 0;
          end;
        
          -- 2. Nro prestamo
          if j.aomda = 0 then
            lc_mda_pre := '00';
          else
            lc_mda_pre := '01';
          end if;
        
          begin
            lc_nro_pre := concat(lpad(to_char(j.aocta), 9, '0'),
                                 concat(lc_mda_pre,
                                        lpad(to_char(j.aooper), 9, '0')));
          exception
            when others then
              lc_nro_pre := '';
          end;
        
          -- 8.Obtener datos de persona
          lx_pepais := j.pepais;
          lx_petdoc := j.petdoc;
          lx_pendoc := j.pendoc;
        
          -- 9. Razón social-Denominación 
          begin
            lc_razon := pq_cr_reporte_fondos_p3.fn_obtener_nombre(lx_pepais,
                                                                  lx_petdoc,
                                                                  lx_pendoc);
          exception
            when others then
              lc_razon := '';
          end;
        
          -- 18. Plazo del prestamo: Nro de cuotas
          begin
            -- Call the function
            lc_nro_cuo := pq_cr_reporte_fondos_p3.fn_fecha_ncuoa(pn_cod => j.pgcod,
                                                                 pn_mod => j.aomod,
                                                                 pn_suc => j.aosuc,
                                                                 pn_mda => j.aomda,
                                                                 pn_pap => j.aopap,
                                                                 pn_cta => j.aocta,
                                                                 pn_ope => j.aooper,
                                                                 pn_sbo => j.aosbop,
                                                                 pn_top => j.aotope);
          exception
            when others then
              lc_nro_cuo := 0;
          end;
        
          -- 10.1 Código de CIUU
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_ciiu_codigo4(p_pais   => lx_pepais,
                                                    p_petdoc => lx_petdoc,
                                                    p_pendoc => lx_pendoc,
                                                    p_ciuu4  => lc_ciiu4,
                                                    p_ciuu6  => lc_ciiu6);
          exception
            when others then
              lc_ciiu4 := 0;
              lc_ciiu6 := 0;
          end;
        
          -- 10.2 Descripción de CIUU 
          begin
            -- Call the procedure
            if lc_ciiu4 <> 0 then
              pq_cr_reporte_fondos_p3.sp_obtener_ciuu(pn_cciu => lc_ciiu6,
                                                      pn_dciu => lc_acti);
            else
              if lc_ciiu6 <> 0 then
                lc_ciiu4 := to_number(substr(to_char(lc_ciiu6), 1, 4));
              else
                lc_ciiu4 := 0;
              end if;
              lc_acti := '';
            end if;
          
          exception
            when others then
              lc_acti := '';
          end;
          --lc_acti := null;
        
          -- 12. Moneda                      
          begin
            if j.aomda = 0 then
              lc_mda := 'PEN';
            else
              lc_mda := 'USD';
            end if;
          end;
        
          -- 16. Saldo insoluto del préstamo
          begin
            --lc_sdoi := pq_cr_reporte_fondos_p3.fn_obtener_saldoi(j.pgcod,
            lc_sdoi := pq_cr_reporte_fondos_p3.fn_obtener_saldo_actual(j.pgcod,
                                                                       j.aomod,
                                                                       j.aosuc,
                                                                       j.aomda,
                                                                       j.aopap,
                                                                       j.aocta,
                                                                       j.aooper,
                                                                       j.aosbop,
                                                                       j.aotope,
                                                                       pn_ffin,
                                                                       pn_usuario);
          exception
            when others then
              lc_sdoi := 0;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           
          -- 16.1 Saldo Insoluto Real
        
          begin
            --- jrodriguej 26.04.2021                                        
          
            pq_cr_reporte_fondos.sp_obtener_sald_insol2_h(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_indi  => 1, -- REACTIVA
                                                           pn_stat  => j.estado,
                                                           pn_sald  => lc_sdoins);
          
          exception
            when others then
              lc_sdoins := 0;
          end;
        
          -- 15. Monto de la cobertura
          begin
            lc_mtoc := lc_sdoins * lb_pcob / 100;
          exception
            when others then
              lc_mtoc := 0;
          end;
        
          -- 19. Período de Gracia
          begin
            lc_pgra := pq_cr_reporte_fondos_p3.fn_obtener_pgracia(j.pgcod,
                                                                  j.aomod,
                                                                  j.aosuc,
                                                                  j.aomda,
                                                                  j.aopap,
                                                                  j.aocta,
                                                                  j.aooper,
                                                                  j.aosbop,
                                                                  j.aotope);
          exception
            when others then
              lc_pgra := 0;
          end;
        
          begin
            lc_pgra := lc_pgra / 30;
          exception
            when others then
              lc_pgra := 0;
          end;
        
          --  8. Código de cliente SBS
          -- 24. CLASIFICACIÓN SBS NORMAL %
          -- 25. CLASIFICACIÓN SBS CPP %
          -- 26. CLASIFICACIÓN SBS DEFICIENTE %
          -- 27. CLASIFICACIÓN SBS DUDOSO %
          -- 28. CLASIFICACIÓN SBS PÉRDIDA %
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_calf(pn_tdoc   => lx_petdoc, --j.petdoc,
                                                    pn_ndoc   => lx_pendoc, --j.pendoc,
                                                    pn_fech   => pn_ffin,
                                                    pn_calif0 => lc_calif0,
                                                    pn_calif1 => lc_calif1,
                                                    pn_calif2 => lc_calif2,
                                                    pn_calif3 => lc_calif3,
                                                    pn_calif4 => lc_calif4,
                                                    pn_csbs   => lc_csbs);
          
          exception
            when others then
              lc_calif0 := 100;
              lc_calif1 := 0;
              lc_calif2 := 0;
              lc_calif3 := 0;
              lc_calif4 := 0;
              lc_csbs   := 0;
          end;
        
          -- Acondicionamiento de CRR
          lc_calif0 := round(lc_calif0 / 100, 2);
          lc_calif1 := round(lc_calif1 / 100, 2);
          lc_calif2 := round(lc_calif2 / 100, 2);
          lc_calif3 := round(lc_calif3 / 100, 2);
          lc_calif4 := round(lc_calif4 / 100, 2);
        
          if lc_csbs is null then
            lc_csbs := '0';
          end if;
        
          -- 43. ESTADO DEL CREDITO
          begin
            lc_statd := pq_cr_reporte_fondos_p3.fn_estado_desc(j.aostat);
          exception
            when others then
              lc_statd := '';
          end;
          -- 45. FLAG DE AMORTIZACION
          begin
            lc_lamr := pq_cr_reporte_fondos_p3.fn_flag_amrtzn(j.pgcod,
                                                              j.aomod,
                                                              j.aosuc,
                                                              j.aomda,
                                                              j.aopap,
                                                              j.aocta,
                                                              j.aooper,
                                                              j.aosbop,
                                                              j.aotope,
                                                              pn_ffin);
          exception
            when others then
              lc_lamr := 'NO';
          end;
        
          -- 47. DIAS DE ATRASO DEL CREDITO
          begin
            lc_diat := fn_dias_atraso(pn_ffin, --fecha de proceso
                                      j.pgcod,
                                      j.aomod,
                                      j.aosuc,
                                      j.aomda,
                                      j.aopap,
                                      j.aocta,
                                      j.aooper,
                                      j.aosbop,
                                      j.aotope,
                                      j.aostat,
                                      j.aofvto);
          exception
            when others then
              lc_diat := 0;
          end;
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => j.aosuc,
                                                    pn_regi => lc_regi,
                                                    pn_zona => lc_zona,
                                                    pn_nsuc => lc_nsuc,
                                                    pn_nzon => lc_nzon,
                                                    pn_nreg => lc_nreg);
          exception
            when others then
              lc_regi := 0;
              lc_zona := 0;
              lc_nsuc := '';
              lc_nzon := '';
              lc_nreg := '';
          end;
        
          -- 55. ANALISTA
          begin
            lc_ases := fn_analista_credito(j.aomod,
                                           j.aosuc,
                                           j.aomda,
                                           j.aopap,
                                           j.aocta,
                                           j.aooper,
                                           j.aosbop,
                                           j.aotope);
          exception
            when others then
              lc_ases := '';
          end;
        
          -- 46. Saldo de capital cancelado
          begin
            lc_scapc := pq_cr_reporte_fondos_p3.fn_obtener_sdocap(j.pgcod,
                                                                  j.aomod,
                                                                  j.aosuc,
                                                                  j.aomda,
                                                                  j.aopap,
                                                                  j.aocta,
                                                                  j.aooper,
                                                                  j.aosbop,
                                                                  j.aotope,
                                                                  pn_ffin,
                                                                  pn_usuario);
          exception
            when others then
              lc_scapc := 0;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Reprogramaciones
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_repro_dato_jaqa400(pn_cod   => j.pgcod,
                                                   pn_cta   => j.aocta,
                                                   pn_ope   => j.aooper,
                                                   pn_fecha => pn_ffin,
                                                   pn_flag  => lc_lrep, -- Flag
                                                   pn_nrep  => lc_nrep, -- N de reprogramaciones
                                                   pn_fech  => lc_frep, -- Fecha de reprogramacion
                                                   pn_tabla => lc_tabla, -- Tabla
                                                   
                                                   pn_peri => lc_peri2, -- Período
                                                   pn_ncuo => lc_ncuo2, -- N de cuotas
                                                   pn_fpri => lc_fpri, -- Fecha ini del crédito reprogramado
                                                   pn_fult => lc_fult); -- Fecha fin del crédito reprogramado
          exception
            when others then
            
              lc_lrep  := 'NO';
              lc_nrep  := 0;
              lc_frep  := null;
              lc_tabla := '';
              lc_peri2 := 0;
              lc_ncuo2 := 0;
              lc_fpri  := null;
              lc_fult  := null;
          end;
          if lc_lrep  = 'NO' then 
            begin
             -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_repro_dato1(pn_cod   => j.pgcod,
                                                   pn_cta   => j.aocta,
                                                   pn_ope   => j.aooper,
                                                   pn_fecha => pn_ffin,
                                                   pn_flag  => lc_lrep, -- Flag
                                                   pn_nrep  => lc_nrep, -- N de reprogramaciones
                                                   pn_fech  => lc_frep, -- Fecha de reprogramacion
                                                   pn_tabla => lc_tabla, -- Tabla
                                                   
                                                   pn_peri => lc_peri2, -- Período
                                                   pn_ncuo => lc_ncuo2, -- N de cuotas
                                                   pn_fpri => lc_fpri, -- Fecha ini del crédito reprogramado
                                                   pn_fult => lc_fult); -- Fecha fin del crédito reprogramado
          exception
            when others then
            
              lc_lrep  := 'NO';
              lc_nrep  := 0;
              lc_frep  := null;
              lc_tabla := '';
              lc_peri2 := 0;
              lc_ncuo2 := 0;
              lc_fpri  := null;
              lc_fult  := null;
          end;
          end if;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       
          -- 35. Fecha de última cuota pagado
          begin
            lc_ufpag1 := pq_cr_reporte_fondos_p3.fn_fecha_upago(j.pgcod,
                                                                j.aomod,
                                                                j.aosuc,
                                                                j.aomda,
                                                                j.aopap,
                                                                j.aocta,
                                                                j.aooper,
                                                                j.aosbop,
                                                                j.aotope,
                                                                pn_ffin);
          exception
            when others then
              lc_ufpag1 := null;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     
          -- 22. Tipo de Crédito SBS
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_tipo_credito_sbs_vig(pn_cod     => j.pgcod,
                                                            pn_mod     => j.aomod,
                                                            pn_suc     => j.aosuc,
                                                            pn_mda     => j.aomda,
                                                            pn_pap     => j.aopap,
                                                            pn_cta     => j.aocta,
                                                            pn_ope     => j.aooper,
                                                            pn_sbo     => j.aosbop,
                                                            pn_top     => j.aotope,
                                                            pn_fecha   => pn_ffin,
                                                            pn_usuario => pn_usuario,
                                                            pn_ntipo   => lc_pcre_c,
                                                            pn_nconc   => lc_ncre);
          
            --- CASE
            --6=Corporativo;  10
            --7=Grande Emp;   11
            --8=Mediana Emp;  12
            --9=Pequeña Emp;  13
            --10=Microempresa  2
          
            case lc_pcre_c
              when 2 then
                lc_pcre := 10; --Microempresa
              when 10 then
                lc_pcre := 6; --Corporativo       
              when 11 then
                lc_pcre := 7; --Grande Emp   
              when 12 then
                lc_pcre := 8; --Mediana Emp 
              when 13 then
                lc_pcre := 9; --Pequeña Emp  
              else
                lc_pcre := 0;
            end case;
          
          exception
            when others then
              lc_pcre := 0;
              lc_ncre := '';
          end;
        
          --lc_pcre := 0;
          --lc_ncre := '';
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
        
          -- 36. Fecha de último pago                                              
          begin
          
            pq_cr_reporte_fondos_p3.sp_obtener_datos_ufecha(pn_cod   => j.pgcod,
                                                            pn_mod   => j.aomod,
                                                            pn_suc   => j.aosuc,
                                                            pn_mda   => j.aomda,
                                                            pn_pap   => j.aopap,
                                                            pn_cta   => j.aocta,
                                                            pn_ope   => j.aooper,
                                                            pn_sbo   => j.aosbop,
                                                            pn_top   => j.aotope,
                                                            pn_fecha => pn_ffin,
                                                            pn_fpagu => lc_fupag, -- Fecha de la última cuota pagada: ppfpag
                                                            
                                                            pn_fvenu => lc_fvenup); -- Fecha de vencimiento de la última cuota pagada
          exception
            when others then
              lc_fupag  := null;
              lc_fvenup := null;
          end;
        
          -- Fecha de vencimiento de la próxima cuota impaga
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_impaga(pn_cod    => j.pgcod,
                                                      pn_mod    => j.aomod,
                                                      pn_suc    => j.aosuc,
                                                      pn_mda    => j.aomda,
                                                      pn_pap    => j.aopap,
                                                      pn_cta    => j.aocta,
                                                      pn_ope    => j.aooper,
                                                      pn_sbo    => j.aosbop,
                                                      pn_top    => j.aotope,
                                                      pn_fecha  => pn_ffin,
                                                      pn_fvenuc => lc_fvenuc);
          exception
            when others then
              lc_fvenuc := null;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      
          -- 34. Nro. cuotas pendientes de pago
          begin
            pq_cr_reporte_fondos_p3.sp_fecha_ncuop(j.pgcod,
                                                   j.aomod,
                                                   j.aosuc,
                                                   j.aomda,
                                                   j.aopap,
                                                   j.aocta,
                                                   j.aooper,
                                                   j.aosbop,
                                                   j.aotope,
                                                   lc_fupag, -- última cuota pagada ppfpag
                                                   lc_ncuop, -- Nro de cuotas pendientes de pago
                                                   lc_ncuopg); -- Nro de cuotas ya pagadas
          exception
            when others then
              lc_ncuop  := 0;
              lc_ncuopg := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     
        
          -- Distribución de pago
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_distribuc_pago_acum(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tsum  => lc_tsum,
                                                           pn_gas   => lc_gas,
                                                           pn_mor   => lc_mor,
                                                           pn_int   => lc_int,
                                                           pn_cuo   => lc_cuo,
                                                           pn_icv   => lc_icv,
                                                           pn_pen   => lc_pen);
          
          exception
            when others then
            
              lc_tsum := 0;
              lc_gas  := 0;
              lc_mor  := 0;
              lc_int  := 0;
              lc_cuo  := 0;
              lc_icv  := 0;
              lc_pen  := 0;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   
          -- Fecha de cancelacion
          if j.aostat = 99 then
            lc_feccan := j.aofe99;
          else
            lc_feccan := null;
          end if;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_actual(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tea);
          exception
            when others then
              lc_tea := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes repro
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_repro(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_trep);
          exception
            when others then
              lc_trep := 0;
          end;
          -----------------------------------------------------
          -- Tasa de interes moratoria
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tmor);
          exception
            when others then
              lc_tmor := 0;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_rubr  => 9300082040000,
                                                           pd_fecha => pn_ffin,
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr => ln_mhonr,
                                                           pd_fhonr => ld_fhonr,
                                                           pn_sdohon => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon := 0;
          end;     
          --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,                                                           
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
          ----------------------------------------------------------
          -- 10. Distribución clasificación de riesgo enviado por caja
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_calf_caja(pn_cod   => j.pgcod,
                                                         pn_mod   => j.aomod,
                                                         pn_suc   => j.aosuc,
                                                         pn_mda   => j.aomda,
                                                         pn_pap   => j.aopap,
                                                         pn_cta   => j.aocta,
                                                         pn_ope   => j.aooper,
                                                         pn_sbo   => j.aosbop,
                                                         pn_top   => j.aotope,
                                                         pn_est   => j.aostat,
                                                         pn_fecha => pn_ffin,
                                                         --pn_dcla => lc_dcla,
                                                         --pn_ncla => lc_ncla
                                                         pn_calif0a => lc_calif0a,
                                                         pn_calif1a => lc_calif1a,
                                                         pn_calif2a => lc_calif2a,
                                                         pn_calif3a => lc_calif3a,
                                                         pn_calif4a => lc_calif4a,
                                                         pn_deccaj  => lc_fecha_caj);
          exception
            when others then
              lc_calif0a   := 100;
              lc_calif1a   := 0;
              lc_calif2a   := 0;
              lc_calif3a   := 0;
              lc_calif4a   := 0;
              lc_fecha_caj := null;
          end;
          -----------------------------------------------------
          -- Montos vencido
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_montos_venc(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_int  => ln_vint,
                                                           pn_mor  => ln_vmor,
                                                           pn_icv  => ln_vicv);
          exception
            when others then
              ln_vint := 0;
              ln_vmor := 0;
              ln_vicv := 0;
          end;
          -----------------------------------------------------------------------------
          
          begin
            insert into aqpb065
              (aqpb065usur, -- Usuario
               aqpb065pgcod,
               aqpb065aomod,
               aqpb065aosuc, -- 54. Agencia (Sucursal)
               aqpb065aomda,
               aqpb065aopap,
               aqpb065aocta, -- 56. Nro. de Cuenta
               aqpb065aooper, -- 57. Nro. de Operación     
               aqpb065aosbop,
               aqpb065aotope,
               aqpb065fsub, -- 1. Fecha de subasta 
               aqpb065nsub, -- 2. Nº Subasta 
               aqpb065ncer, -- 3. Nº Certificado        
               aqpb065ncob, -- 4. Código de cobertura
               aqpb065nact, -- 5. Nº de acto de aporte
               aqpb065tdoc, -- 6. Tipo de documento deudor (RUC o DNI)
               aqpb065ndoc, -- 7. Nro. de documento deudor (Nro. RUC o DNI)
               aqpb065csbs, -- 8. Código de cliente SBS (dato del BT)
               aqpb065razn, -- 9. Razón social-Denominación 
               aqpb065ciuu, -- 10. CIUU
               aqpb065pres, -- 11. Nº préstamo 
               aqpb065mda, -- 12. Moneda
               aqpb065mnto, -- 13. Monto Préstamo   
               aqpb065pcob, -- 14. % de la cobertura 
               aqpb065mtoc, -- 15. Monto de la cobertura 
               aqpb065sdoi, -- 16. Saldo insoluto del préstamo
               aqpb065tea, -- 17. TEA
               aqpb065pzo, -- 18. Plazo del préstamo 
               aqpb065pgra, -- 19. Periodo de Gracia
               aqpb065fini, -- 20. Fecha inicio de crédito
               aqpb065ffin, -- 21. Fecha fin de crédito
               aqpb065tcre, -- 22. Tipo de Crédito SBS
               aqpb065ncre, -- Concepto
               aqpb065fcla, -- 23. Fecha clasificación SBS 
               aqpb065cnom, -- 24. Calificación Normal (en números de 100 a 0)
               aqpb065ccpp, -- 25. Calificación CPP (en números de 100 a 0)  
               aqpb065cdef, -- 26. Calificación Deficiente (en números de 100 a 0)
               aqpb065cdud, -- 27. Calificación Dudoso (en números de 100 a 0)
               aqpb065cper, -- 28. Calificación Perdida (en números de 100 a 0)
               aqpb065vpro, -- 29. Venta promedio mensual 2019 (venta mensual del BT del crédito reactiva se anualiza) 
               aqpb065cent, -- 30. Código de entidad participante
               aqpb065nope, -- 31. Nro. De operación de reporte (BI ¿ 4 dígitos)
               aqpb065tadj, -- 32. Tasa adjudicada en negociación (BI ¿ con 2 decimales, sin %)
               aqpb065ntra, -- 33. Nro. tramo (BI- 4 dígitos)
               aqpb065ttit, -- 34. Tipo de título valor (Valor constante: Pagaré)
               aqpb065temp, -- 35. Tamaño empresa (BI) 
               aqpb065gesp, -- 36. Garantía específica (BI)
               aqpb065ggen, -- 37. Garantía genérica (BI)
               aqpb065locd, -- 38. Localización de documentación (BI)
               aqpb065actn, -- 39. Actividad económica
               aqpb065csdo, -- 40. Saldo aprobado por COFIDE (BI)
               aqpb065fope, -- 41. Fecha de operación reporte BCRP (SOFI)
               aqpb065ppzo, -- 42. Plazo del préstamo reportado a COFIDE (BI)
               aqpb065ecre, -- 43. Estado del crédito (vigente, cancelado, refinanciado, castigado, judicial, etc)
               aqpb065fest, -- 44. Fecha del cambio de estado del crédito.
               aqpb065lamr, -- 45. Flag de amortización (si/no)
               aqpb065fult, -- 46. Fecha de último pago
               aqpb065datr, -- 47. Días de atraso del crédito
               aqpb065lrep, -- 48. Flag de reprogramación (si/no)
               aqpb065frep, -- 49. Fecha de reprogramación 
               aqpb065frini, -- 50. Fecha inicio de crédito reprogramado
               aqpb065frfin, -- 51. Fecha fin de crédito reprogramado
               aqpb065reg, -- 52. Región
               aqpb065nreg, -- 52.1 Región - Nombre
               aqpb065zon, -- 53. Zona
               aqpb065nzon, -- 53.1 Zona - Nombre
               aqpb065nsuc, -- 54.1 Agencia(Sucursal) - Nombre
               aqpb065ase, -- 55. Analista  
               
               aqpb065tdocc, -- 6.1 Tipo de documento deudor (RUC o DNI)
               aqpb065ndocc, -- 7.1 Nro. de documento deudor (Nro. RUC o DNI)
               aqpb065fcan, -- 45. Fecha de cancelación
               aqpb065scap, -- 46. Saldo de capital cancelado
               
               aqpb065ncuo, -- 60.  NRO. CUOTAS PENDIENTES DE PAGO
               aqpb065fvenui, -- 61. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA IMPAGA
               aqpb065fvenup, -- 62. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA PAGADA
               aqpb065fpag, -- 63. FECHA DE PAGO DE LA ÚLTIMA CUOTA PAGADA
               aqpb065ncuop, -- 64. NÚMERO DE CUOTAS PAGADAS                  
               
               aqpb065mcuop, -- 65. MONTO DE CUOTAS PAGADAS
               aqpb065gas, -- 66.a Seguros
               aqpb065mor, -- 66.b Interés Moratorio
               aqpb065int, -- 66.c Intereses
               aqpb065cuo, -- 66.d Capital
               aqpb065icv, -- 66.e Interés compensatorio
               aqpb065pen, -- 65.f Penalidad
               aqpb065ins, -- 66. Instancia
               
               aqpb065sdoins, -- 67. Saldo Insoluto Real
               aqpb065pgrac, -- Período de Gracia COFIDE
               aqpb065stat,
               aqpb065fe99,
               
               aqpb065ciiuori, --ciuu
               aqpb065actnomori,
               
               aqpb065fcr,
               aqpb065hcr,
               aqpb065fproc,
               
               aqpb065mhonr,
               aqpb065fhonr,
               aqpb065chonr,
               aqpb065sdocap,
               aqpb065sdohon,
               aqpb065crehon,
               aqpb065fclaa,
               aqpb065cnoma,
               aqpb065ccppa,
               aqpb065cdefa,
               aqpb065cduda,
               aqpb065cpera,
               aqpb065tmor,
               aqpb065tasa,
               aqpb065tintrep,
               aqpb065codhon,
               aqpb065vint,
               aqpb065vmor,
               aqpb065vicv,
               aqpb065cren,
               aqpb065cobr,
               aqpb065chon)
            
            values
              (pn_usuario,
               j.pgcod,
               j.aomod,
               j.aosuc, -- 54. Agencia (Sucursal)
               j.aomda,
               j.aopap,
               j.aocta, -- 56. Nro. de Cuenta
               j.aooper, -- 57. Nro. de Operación  
               j.aosbop,
               j.aotope,
               lb_fsub, -- 1. Fecha de subasta 
               lb_nsub, -- 2. Nº Subasta 
               lb_ncer, -- 3. Nº Certificado        
               lb_ccob, -- 4. Código de cobertura
               lb_nact, -- 5. Nº de acto de aporte
               lx_petdoc, --j.petdoc, -- 6. Número de documento (DNI o RUC)
               trim(lx_pendoc), --j.pendoc, -- 7. Nro. de documento deudor (Nro. RUC o DNI)
               trim(lc_csbs), -- 8. Código de cliente SBS (dato del BT)
               substr(trim(lc_razon), 1, 100), -- 9. Razón social-Denominación 
               lc_ciiu4, --lc_ciiu, -- 10. CIUU
               lc_nro_pre, --j.prestamo, -- 11. Nº préstamo 
               lc_mda, -- 12. Moneda            
               j.monto, -- 13. Monto Préstamo  
               lb_pcob, -- 14. % de la cobertura 
               lc_mtoc, -- 15. Monto de la cobertura 
               lc_sdoi, -- 16. Saldo insoluto del préstamo
               lc_tea, --j.tasa, -- 17. TEA
               lc_nro_cuo, --(j.plazo / 30), -- 18. Plazo del préstamo
               lc_pgra, -- 19. Periodo de Gracia
               j.aofval, -- 20. Fecha inicio de crédito
               j.aofvto, -- 21. Fecha fin de crédito
               lc_pcre, -- 22. Tipo de Crédito SBS
               substr(trim(lc_ncre), 1, 20), -- 22.1 Concepto
               lc_fecha_rcc, -- 23. Fecha clasificación SBS 
               lc_calif0, -- 24. Calificación Normal (en números de 100 a 0)
               lc_calif1, -- 25. Calificación CPP (en números de 100 a 0)  
               lc_calif2, -- 26. Calificación Deficiente (en números de 100 a 0)
               lc_calif3, -- 27. Calificación Dudoso (en números de 100 a 0)
               lc_calif4, -- 28. Calificación Perdida (en números de 100 a 0)         
               lb_vpro, -- 29. Venta promedio mensual 2019 (venta mensual del BT del crédito reactiva se anualiza) 
               '0803', -- 30. Código de entidad participante
               lb_nop, -- 31. Nro. De operación de reporte (BI ¿ 4 dígitos)
               lb_tneg, -- 32. Tasa adjudicada en negociación (BI ¿ con 2 decimales, sin %)
               substr(trim(lb_ntra), 1, 5), -- 33. Nro. tramo (BI- 4 dígitos)
               'Pagaré', -- 34. Tipo de título valor (Valor constante: Pagaré)
               
               lb_temp, -- 35. Tamaño empresa (BI) 
               lb_gesp, -- 36. Garantía específica (BI)
               lb_ggen, -- 37. Garantía genérica (BI)
               substr(trim(lb_ldoc), 1, 100), -- 38. Localización de documentación (BI)
               
               substr(trim(lc_acti), 1, 60), -- 39. Actividad económica
               lb_sapr, -- 40. Saldo aprobado por COFIDE (BI)
               lb_fbcr, -- 41. Fecha de operación reporte BCRP (SOFI)
               lb_ppzo, -- 42. Plazo del préstamo reportado a COFIDE (BI)
               substr(trim(lc_statd), 1, 30), -- 43. Estado del crédito (vigente, cancelado, refinanciado, castigado, judicial, etc)
               case when ld_fcest > nvl(j.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 (case when ld_fcest > nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) then ld_fcest else lc_frep end )
                 else (case when nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) > nvl(j.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then lc_frep else j.aofe99 end )end, --fecha de cambio de estado, -- 44. Fecha del cambio de estado del crédito.
               lc_lamr, -- 45. Flag de amortización (si/no)
               
               lc_fupag, --lc_fupag, -- 46. Fecha de último pago, ppfpag de la cuota
               
               lc_diat, -- 47. Días de atraso del crédito
               lc_lrep, -- 48. Flag de reprogramación (si/no)
               lc_frep, -- 49. Fecha de reprogramación 
               lc_fpri, -- 50. Fecha inicio de crédito reprogramado
               lc_fult, -- 51. Fecha fin de crédito reprogramado
               lc_regi, -- 52. Región
               substr(trim(lc_nreg), 1, 30), -- 52.1 Región - Nombre
               lc_zona, -- 53. Zona
               substr(trim(lc_nzon), 1, 40), -- 53.1 Zona - Nombre
               substr(trim(lc_nsuc), 1, 30), -- 54.1 Agencia(Sucursal) - Nombre
               substr(trim(lc_ases), 1, 10), -- 55. Analista    
               
               lb_tdoc, -- 6.1 Tipo de documento deudor (RUC o DNI)
               lb_ndoc, -- 7.1 Nro. de documento deudor (Nro. RU   
               lc_feccan, --j.aofe99, -- 45. Fecha de cancelación
               lc_scapc, -- 46. Saldo de capital cancelado    
               
               lc_ncuop, -- 60.  NRO. CUOTAS PENDIENTES DE PAGO
               lc_fvenuc, -- 61. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA IMPAGA
               lc_fvenup, -- 62. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA PAGADA
               lc_ufpag1, -- 63. FECHA DE PAGO DE LA ÚLTIMA CUOTA PAGADA, d602fc
               lc_ncuopg, -- 64. NÚMERO DE CUOTAS PAGADAS          
               
               lc_tsum, -- 65. MONTO DE CUOTAS PAGADAS
               lc_gas, -- 66.a Seguros
               lc_mor, -- 66.b Interés Moratorio
               lc_int, -- 66.c Intereses
               lc_cuo, -- 66.d Capital
               lc_icv, -- 66.e Interés compensatorio
               lc_pen, -- 65.f Penalidad
               
               0, -- 66. Instancia
               lc_sdoins, -- 67. Saldo Insoluto Real
               lb_pgrac, -- Período de Gracia COFIDE
               
               j.aostat,
               j.aofe99,
               
               lb_ciuu,
               lb_dciu,
               
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               pn_ffin,
               ln_mhonr, --monto honrado
               ld_fhonr,--fecha honramiento
               lc_eshonr,
               lc_sdoi,
               nvl(ln_sdohon,0),
               lc_sdoi + nvl(ln_sdohon,0),
               lc_fecha_caj, --fecha clasificacion caja
               lc_calif0a, --clasifi normal caja,
               lc_calif1a, --clasifiacion cpp caja
               lc_calif2a, --clasifi deficiente caja
               lc_calif3a, --clasificacion dudosa caja
               lc_calif4a, --clasificacion perdida caja
               lc_tmor, --tasa interese moratoria
               j.tasa, --tasa intereses original
               lc_trep, --tasa interes reprogramado
               case when lc_lrep = 'SI' then '2'else (case when lc_eshonr = 'S' then '1' else '0' end) end, --codigo honra
               ln_vint,
               ln_vmor,
               ln_vicv,
               lb_cren,
               lb_cobr,
               lb_chon  ); 
          
            commit;
          
          exception
            when others then
            
              lc_coderr := substr(trim(sqlcode), 1, 100);
              lc_msgerr := substr(trim(sqlerrm), 1, 1000);
            
              begin
                insert into AQPB070E
                  (aqpb070etab,
                   aqpb070efec,
                   aqpb070esuc,
                   aqpb070eusr,
                   aqpb070ecoe,
                   aqpb070emsge,
                   aqpb070efcr,
                   aqpb070ehcr,
                   aqpb070ecta,
                   aqpb070eope)
                values
                  ('AQPB065',
                   pn_ffin,
                   pc_sucurs,
                   substr(trim(pn_usuario), 1, 10),
                   lc_coderr,
                   lc_msgerr,
                   to_char(sysdate, 'DD/MM/YYYY'),
                   to_char(sysdate, 'HH24:MI:SS'),
                   ln_cta,
                   ln_ope);
                commit;
              exception
                when others then
                  null;
              end;
            
          end;
        
        end loop;
      
      end;
    
    else
    
      begin
      
        for j in reporte_reactiva_h() loop
        
          ln_cta := j.aocta;
          ln_ope := j.aooper;
        
          -- 1. Fecha de subasta'
          begin
            -- Call the procedure
            pq_cr_reporte_fondos.sp_plantilla_reactiva(pn_cod   => j.pgcod,
                                                       pn_mod   => j.aomod,
                                                       pn_suc   => j.aosuc,
                                                       pn_mda   => j.aomda,
                                                       pn_pap   => j.aopap,
                                                       pn_cta   => j.aocta,
                                                       pn_ope   => j.aooper,
                                                       pn_sbo   => j.aosbop,
                                                       pn_top   => j.aotope,
                                                       pn_fecha => pn_ffin,
                                                       
                                                       pn_fsub  => lb_fsub,
                                                       pn_nsub  => lb_nsub,
                                                       pn_ncer  => lb_ncer,
                                                       pn_ccob  => lb_ccob,
                                                       pn_nact  => lb_nact,
                                                       pn_tdoc  => lb_tdoc,
                                                       pn_ndoc  => lb_ndoc,
                                                       pn_pcob  => lb_pcob,
                                                       pn_vpro  => lb_vpro,
                                                       pn_code  => lb_code,
                                                       pn_nop   => lb_nop,
                                                       pn_tneg  => lb_tneg,
                                                       pn_ntra  => lb_ntra,
                                                       pn_nsec  => lb_nsec,
                                                       pn_ttit  => lb_ttit,
                                                       pn_temp  => lb_temp,
                                                       pn_gesp  => lb_gesp,
                                                       pn_ggen  => lb_ggen,
                                                       pn_ldoc  => lb_ldoc,
                                                       pn_sapr  => lb_sapr,
                                                       pn_fbcr  => lb_fbcr,
                                                       pn_ppzo  => lb_ppzo,
                                                       pn_pgrac => lb_pgrac,
                                                       pn_ciuu  => lb_ciuu,
                                                       pn_dciu  => lb_dciu,
                                                       pn_cren  => lb_cren,
                                                       pn_cobr  => lb_cobr,
                                                       pn_chon  => lb_chon);
          exception
            when others then
              lb_fsub  := null;
              lb_nsub  := null;
              lb_ncer  := null;
              lb_ccob  := null;
              lb_nact  := null;
              lb_tdoc  := null;
              lb_ndoc  := null;
              lb_pcob  := null;
              lb_vpro  := null;
              lb_code  := null;
              lb_nop   := null;
              lb_tneg  := null;
              lb_ntra  := null;
              lb_nsec  := null;
              lb_ttit  := null;
              lb_temp  := null;
              lb_gesp  := null;
              lb_ggen  := null;
              lb_ldoc  := null;
              lb_sapr  := null;
              lb_fbcr  := null;
              lb_ppzo  := null;
              lb_pgrac := null;
              lb_ciuu  := null;
              lb_dciu  := null;
              lb_cren  := null;
              lb_cobr  := null;
              lb_chon  := null;
          end;
        
          if lb_tdoc = 1 then
            lb_tdoc := 21;
          elsif lb_tdoc = 6 then
            lb_tdoc := 9;
          end if;
        
          -- 0. Instancia
          begin
            select nvl(x.xwfprcins, 0)
              into lc_inst
              from xwf700 x
             where x.xwfempresa = j.pgcod
               and x.xwfmodulo = j.aomod
               and x.xwfsucursal = j.aosuc
               and x.xwfmoneda = j.aomda
               and x.xwfpapel = j.aopap
               and x.xwfcuenta = j.aocta
               and x.xwfoperacion = j.aooper
               and x.xwfsubope = j.aosbop
               and x.xwftipope = j.aotope
               and x.xwfcar3 = '1';
          exception
            when others then
              lc_inst := 0;
          end;
        
          -- 2. Nro prestamo
          if j.aomda = 0 then
            lc_mda_pre := '00';
          else
            lc_mda_pre := '01';
          end if;
        
          begin
            lc_nro_pre := concat(lpad(to_char(j.aocta), 9, '0'),
                                 concat(lc_mda_pre,
                                        lpad(to_char(j.aooper), 9, '0')));
          exception
            when others then
              lc_nro_pre := '';
          end;
        
          -- 8.Obtener datos de persona
          lx_pepais := j.pepais;
          lx_petdoc := j.petdoc;
          lx_pendoc := j.pendoc;
        
          -- 9. Razón social-Denominación 
          begin
            lc_razon := pq_cr_reporte_fondos_p3.fn_obtener_nombre(lx_pepais,
                                                                  lx_petdoc,
                                                                  lx_pendoc);
          exception
            when others then
              lc_razon := '';
          end;
        
          -- 18. Plazo del prestamo: Nro de cuotas
          begin
            -- Call the function
            lc_nro_cuo := pq_cr_reporte_fondos_p3.fn_fecha_ncuoa(pn_cod => j.pgcod,
                                                                 pn_mod => j.aomod,
                                                                 pn_suc => j.aosuc,
                                                                 pn_mda => j.aomda,
                                                                 pn_pap => j.aopap,
                                                                 pn_cta => j.aocta,
                                                                 pn_ope => j.aooper,
                                                                 pn_sbo => j.aosbop,
                                                                 pn_top => j.aotope);
          exception
            when others then
              lc_nro_cuo := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   
        
          -- 10. CIUU        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_ciiu_codigo4(p_pais   => lx_pepais,
                                                    p_petdoc => lx_petdoc,
                                                    p_pendoc => lx_pendoc,
                                                    p_ciuu4  => lc_ciiu4,
                                                    p_ciuu6  => lc_ciiu6);
          exception
            when others then
              lc_ciiu4 := 0;
              lc_ciiu6 := 0;
          end;
        
          -- 10.2 Descripción de CIUU 
          begin
            -- Call the procedure
            if lc_ciiu4 <> 0 then
              pq_cr_reporte_fondos_p3.sp_obtener_ciuu(pn_cciu => lc_ciiu6,
                                                      pn_dciu => lc_acti);
            else
              if lc_ciiu6 <> 0 then
                lc_ciiu4 := to_number(substr(to_char(lc_ciiu6), 1, 4));
              else
                lc_ciiu4 := 0;
              end if;
              lc_acti := '';
            end if;
          
          exception
            when others then
              lc_acti := '';
          end;
        
          -- 12. Moneda                      
          begin
            if j.aomda = 0 then
              lc_mda := 'PEN';
            else
              lc_mda := 'USD';
            end if;
          end;
        
          -- 16. Saldo insoluto del préstamo
          begin
            --lc_sdoi := pq_cr_reporte_fondos_p3.fn_obtener_saldoi(j.pgcod,
            lc_sdoi := pq_cr_reporte_fondos_p3.fn_obtener_saldo_actual(j.pgcod,
                                                                       j.aomod,
                                                                       j.aosuc,
                                                                       j.aomda,
                                                                       j.aopap,
                                                                       j.aocta,
                                                                       j.aooper,
                                                                       j.aosbop,
                                                                       j.aotope,
                                                                       pn_ffin,
                                                                       pn_usuario);
          exception
            when others then
              lc_sdoi := 0;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
          -- 16.1. Saldo Insoluto Real
        
          begin
            --- jrodriguej 03.03.2021                                           
          
            pq_cr_reporte_fondos.sp_obtener_sald_insol2_h(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_indi  => 1, -- REACTIVA
                                                           pn_stat  => j.estado,
                                                           pn_sald  => lc_sdoins);
          
          exception
            when others then
              lc_sdoins := 0;
          end;
        
          -- 15. Monto de la cobertura
          begin
            lc_mtoc := lc_sdoins * lb_pcob / 100;
          exception
            when others then
              lc_mtoc := 0;
          end;
        
          -- 19. Período de Gracia
          begin
            lc_pgra := pq_cr_reporte_fondos_p3.fn_obtener_pgracia(j.pgcod,
                                                                  j.aomod,
                                                                  j.aosuc,
                                                                  j.aomda,
                                                                  j.aopap,
                                                                  j.aocta,
                                                                  j.aooper,
                                                                  j.aosbop,
                                                                  j.aotope);
          exception
            when others then
              lc_pgra := 0;
          end;
        
          begin
            lc_pgra := lc_pgra / 30;
          exception
            when others then
              lc_pgra := 0;
          end;
          --  8. Código de cliente SBS
          -- 24. CLASIFICACIÓN SBS NORMAL %
          -- 25. CLASIFICACIÓN SBS CPP %
          -- 26. CLASIFICACIÓN SBS DEFICIENTE %
          -- 27. CLASIFICACIÓN SBS DUDOSO %
          -- 28. CLASIFICACIÓN SBS PÉRDIDA %
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_calf(pn_tdoc   => lx_petdoc, --j.petdoc,
                                                    pn_ndoc   => lx_pendoc, --j.pendoc,
                                                    pn_fech   => pn_ffin,
                                                    pn_calif0 => lc_calif0,
                                                    pn_calif1 => lc_calif1,
                                                    pn_calif2 => lc_calif2,
                                                    pn_calif3 => lc_calif3,
                                                    pn_calif4 => lc_calif4,
                                                    pn_csbs   => lc_csbs);
          exception
            when others then
              lc_calif0 := 100;
              lc_calif1 := 0;
              lc_calif2 := 0;
              lc_calif3 := 0;
              lc_calif4 := 0;
              lc_csbs   := 0;
            
          end;
        
          -- Acondicionamiento de CRR
          lc_calif0 := round(lc_calif0 / 100, 2);
          lc_calif1 := round(lc_calif1 / 100, 2);
          lc_calif2 := round(lc_calif2 / 100, 2);
          lc_calif3 := round(lc_calif3 / 100, 2);
          lc_calif4 := round(lc_calif4 / 100, 2);
        
          if lc_csbs is null then
            lc_csbs := '0';
          end if;
        
          -- 43. ESTADO DEL CREDITO
          begin
            lc_statd := pq_cr_reporte_fondos_p3.fn_estado_desc(j.aostat);
          exception
            when others then
              lc_statd := '';
          end;
        
          -- 45. FLAG DE AMORTIZACION
          begin
            lc_lamr := pq_cr_reporte_fondos_p3.fn_flag_amrtzn(j.pgcod,
                                                              j.aomod,
                                                              j.aosuc,
                                                              j.aomda,
                                                              j.aopap,
                                                              j.aocta,
                                                              j.aooper,
                                                              j.aosbop,
                                                              j.aotope,
                                                              pn_ffin);
          exception
            when others then
              lc_lamr := 'NO';
          end;
        
          -- 47. DIAS DE ATRASO DEL CREDITO
          begin
            lc_diat := fn_dias_atraso(pn_ffin, --fecha de proceso
                                      j.pgcod,
                                      j.aomod,
                                      j.aosuc,
                                      j.aomda,
                                      j.aopap,
                                      j.aocta,
                                      j.aooper,
                                      j.aosbop,
                                      j.aotope,
                                      j.aostat,
                                      j.aofvto);
          exception
            when others then
              lc_diat := 0;
          end;
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => j.aosuc,
                                                    pn_regi => lc_regi,
                                                    pn_zona => lc_zona,
                                                    pn_nsuc => lc_nsuc,
                                                    pn_nzon => lc_nzon,
                                                    pn_nreg => lc_nreg);
          exception
            when others then
              lc_regi := 0;
              lc_zona := 0;
              lc_nsuc := '';
              lc_nzon := '';
              lc_nreg := '';
            
          end;
        
          -- 55. ANALISTA
          begin
            lc_ases := fn_analista_credito(j.aomod,
                                           j.aosuc,
                                           j.aomda,
                                           j.aopap,
                                           j.aocta,
                                           j.aooper,
                                           j.aosbop,
                                           j.aotope);
          exception
            when others then
              lc_ases := '';
          end;
        
          -- 46. Saldo de capital cancelado
          begin
            lc_scapc := pq_cr_reporte_fondos_p3.fn_obtener_sdocap(j.pgcod,
                                                                  j.aomod,
                                                                  j.aosuc,
                                                                  j.aomda,
                                                                  j.aopap,
                                                                  j.aocta,
                                                                  j.aooper,
                                                                  j.aosbop,
                                                                  j.aotope,
                                                                  pn_ffin,
                                                                  pn_usuario);
          exception
            when others then
              lc_scapc := 0;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Reprogramaciones
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_repro_dato_jaqa400(pn_cod   => j.pgcod,
                                                   pn_cta   => j.aocta,
                                                   pn_ope   => j.aooper,
                                                   pn_fecha => pn_ffin,
                                                   pn_flag  => lc_lrep, -- Flag
                                                   pn_nrep  => lc_nrep, -- N de reprogramaciones
                                                   pn_fech  => lc_frep, -- Fecha de reprogramacion
                                                   pn_tabla => lc_tabla, -- Tabla
                                                   
                                                   pn_peri => lc_peri2, -- Período
                                                   pn_ncuo => lc_ncuo2, -- N de cuotas
                                                   pn_fpri => lc_fpri, -- Fecha ini del crédito reprogramado
                                                   pn_fult => lc_fult); -- Fecha fin del crédito reprogramado
          exception
            when others then
            
              lc_lrep  := 'NO';
              lc_nrep  := 0;
              lc_frep  := null;
              lc_tabla := '';
              lc_peri2 := 0;
              lc_ncuo2 := 0;
              lc_fpri  := null;
              lc_fult  := null;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       
          -- 35. Fecha de última cuota pagado
          begin
            lc_ufpag1 := pq_cr_reporte_fondos_p3.fn_fecha_upago(j.pgcod,
                                                                j.aomod,
                                                                j.aosuc,
                                                                j.aomda,
                                                                j.aopap,
                                                                j.aocta,
                                                                j.aooper,
                                                                j.aosbop,
                                                                j.aotope,
                                                                pn_ffin);
          exception
            when others then
              lc_ufpag1 := null;
          end;
        
          -- 22. Tipo de Crédito SBS
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_tipo_credito_sbs_vig(pn_cod     => j.pgcod,
                                                            pn_mod     => j.aomod,
                                                            pn_suc     => j.aosuc,
                                                            pn_mda     => j.aomda,
                                                            pn_pap     => j.aopap,
                                                            pn_cta     => j.aocta,
                                                            pn_ope     => j.aooper,
                                                            pn_sbo     => j.aosbop,
                                                            pn_top     => j.aotope,
                                                            pn_fecha   => pn_ffin,
                                                            pn_usuario => pn_usuario,
                                                            pn_ntipo   => lc_pcre_c,
                                                            pn_nconc   => lc_ncre);
          
            --- CASE
            --6=Corporativo;  10
            --7=Grande Emp;   11
            --8=Mediana Emp;  12
            --9=Pequeña Emp;  13
            --10=Microempresa  2
          
            case lc_pcre_c
              when 2 then
                lc_pcre := 10; --Microempresa
              when 10 then
                lc_pcre := 6; --Corporativo       
              when 11 then
                lc_pcre := 7; --Grande Emp   
              when 12 then
                lc_pcre := 8; --Mediana Emp 
              when 13 then
                lc_pcre := 9; --Pequeña Emp  
              else
                lc_pcre := 0;
            end case;
          
          exception
            when others then
              lc_pcre := 0;
              lc_ncre := '';
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                                              
          -- 36. Fecha de último pago   
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_datos_ufecha(pn_cod   => j.pgcod,
                                                            pn_mod   => j.aomod,
                                                            pn_suc   => j.aosuc,
                                                            pn_mda   => j.aomda,
                                                            pn_pap   => j.aopap,
                                                            pn_cta   => j.aocta,
                                                            pn_ope   => j.aooper,
                                                            pn_sbo   => j.aosbop,
                                                            pn_top   => j.aotope,
                                                            pn_fecha => pn_ffin,
                                                            pn_fpagu => lc_fupag, -- Fecha de la última cuota pagada: ppfpag
                                                            
                                                            pn_fvenu => lc_fvenup); -- Fecha de vencimiento de la última cuota pagada
          exception
            when others then
              lc_fupag  := null;
              lc_fvenup := null;
          end;
        
          -- Fecha de vencimiento de la próxima cuota impaga
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_impaga(pn_cod    => j.pgcod,
                                                      pn_mod    => j.aomod,
                                                      pn_suc    => j.aosuc,
                                                      pn_mda    => j.aomda,
                                                      pn_pap    => j.aopap,
                                                      pn_cta    => j.aocta,
                                                      pn_ope    => j.aooper,
                                                      pn_sbo    => j.aosbop,
                                                      pn_top    => j.aotope,
                                                      pn_fecha  => pn_ffin,
                                                      pn_fvenuc => lc_fvenuc);
          exception
            when others then
              lc_fvenuc := null;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      
          -- 34. Nro. cuotas pendientes de pago
          begin
            pq_cr_reporte_fondos_p3.sp_fecha_ncuop(j.pgcod,
                                                   j.aomod,
                                                   j.aosuc,
                                                   j.aomda,
                                                   j.aopap,
                                                   j.aocta,
                                                   j.aooper,
                                                   j.aosbop,
                                                   j.aotope,
                                                   lc_fupag, -- última cuota pagada ppfpag
                                                   lc_ncuop, -- Nro de cuotas pendientes de pago
                                                   lc_ncuopg); -- Nro de cuotas ya pagadas
          exception
            when others then
              lc_ncuop  := 0;
              lc_ncuopg := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     
        
          -- Distribución de pago
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_distribuc_pago_acum(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tsum  => lc_tsum,
                                                           pn_gas   => lc_gas,
                                                           pn_mor   => lc_mor,
                                                           pn_int   => lc_int,
                                                           pn_cuo   => lc_cuo,
                                                           pn_icv   => lc_icv,
                                                           pn_pen   => lc_pen);
          exception
            when others then
            
              lc_tsum := 0;
              lc_gas  := 0;
              lc_mor  := 0;
              lc_int  := 0;
              lc_cuo  := 0;
              lc_icv  := 0;
              lc_pen  := 0;
            
          end;
        
          -- Fecha de cancelacion
          lc_feccan := null;
          if j.aostat = 99 then
            lc_feccan := j.aofe99;
          end if;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
          -- Tasa de interes
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_actual(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tea);
          exception
            when others then
              lc_tea := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
          -- Tasa de interes repro
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_repro(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_trep);
          exception
            when others then
              lc_trep := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
          -- Tasa de interes moratoria
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tmor);
          exception
            when others then
              lc_tmor := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_rubr   => 9300082040000,
                                                           pd_fecha => pn_ffin,
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr  => ln_mhonr,
                                                           pd_fhonr  => ld_fhonr,
                                                           pn_sdohon   => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon := 0;
              
          end; 
          --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,                                                           
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
          ----------------------------------------------------------
          -- 10. Distribución clasificación de riesgo enviado por caja
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_calf_caja(pn_cod   => j.pgcod,
                                                         pn_mod   => j.aomod,
                                                         pn_suc   => j.aosuc,
                                                         pn_mda   => j.aomda,
                                                         pn_pap   => j.aopap,
                                                         pn_cta   => j.aocta,
                                                         pn_ope   => j.aooper,
                                                         pn_sbo   => j.aosbop,
                                                         pn_top   => j.aotope,
                                                         pn_est   => j.aostat,
                                                         pn_fecha => pn_ffin,
                                                         --pn_dcla => lc_dcla,
                                                         --pn_ncla => lc_ncla
                                                         pn_calif0a => lc_calif0a,
                                                         pn_calif1a => lc_calif1a,
                                                         pn_calif2a => lc_calif2a,
                                                         pn_calif3a => lc_calif3a,
                                                         pn_calif4a => lc_calif4a,
                                                         pn_deccaj  => lc_fecha_caj);
          exception
            when others then
              lc_calif0a   := 100;
              lc_calif1a   := 0;
              lc_calif2a   := 0;
              lc_calif3a   := 0;
              lc_calif4a   := 0;
              lc_fecha_caj := null;
          end;
          -----------------------------------------------------
          -- Montos vencido
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_montos_venc(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_int  => ln_vint,
                                                           pn_mor  => ln_vmor,
                                                           pn_icv  => ln_vicv);
          exception
            when others then
              ln_vint := 0;
              ln_vmor := 0;
              ln_vicv := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          begin
            insert into aqpb065
              (aqpb065usur, -- Usuario
               aqpb065pgcod,
               aqpb065aomod,
               aqpb065aosuc, -- 54. Agencia (Sucursal)
               aqpb065aomda,
               aqpb065aopap,
               aqpb065aocta, -- 56. Nro. de Cuenta
               aqpb065aooper, -- 57. Nro. de Operación     
               aqpb065aosbop,
               aqpb065aotope,
               aqpb065fsub, -- 1. Fecha de subasta 
               aqpb065nsub, -- 2. Nº Subasta 
               aqpb065ncer, -- 3. Nº Certificado        
               aqpb065ncob, -- 4. Código de cobertura
               aqpb065nact, -- 5. Nº de acto de aporte
               aqpb065tdoc, -- 6. Tipo de documento deudor (RUC o DNI)
               aqpb065ndoc, -- 7. Nro. de documento deudor (Nro. RUC o DNI)
               aqpb065csbs, -- 8. Código de cliente SBS (dato del BT)
               aqpb065razn, -- 9. Razón social-Denominación 
               aqpb065ciuu, -- 10. CIUU
               aqpb065pres, -- 11. Nº préstamo 
               aqpb065mda, -- 12. Moneda
               aqpb065mnto, -- 13. Monto Préstamo   
               aqpb065pcob, -- 14. % de la cobertura 
               aqpb065mtoc, -- 15. Monto de la cobertura 
               aqpb065sdoi, -- 16. Saldo insoluto del préstamo
               aqpb065tea, -- 17. TEA
               aqpb065pzo, -- 18. Plazo del préstamo 
               aqpb065pgra, -- 19. Periodo de Gracia
               aqpb065fini, -- 20. Fecha inicio de crédito
               aqpb065ffin, -- 21. Fecha fin de crédito
               aqpb065tcre, -- 22. Tipo de Crédito SBS
               aqpb065ncre, -- Concepto
               aqpb065fcla, -- 23. Fecha clasificación SBS 
               aqpb065cnom, -- 24. Calificación Normal (en números de 100 a 0)
               aqpb065ccpp, -- 25. Calificación CPP (en números de 100 a 0)  
               aqpb065cdef, -- 26. Calificación Deficiente (en números de 100 a 0)
               aqpb065cdud, -- 27. Calificación Dudoso (en números de 100 a 0)
               aqpb065cper, -- 28. Calificación Perdida (en números de 100 a 0)
               aqpb065vpro, -- 29. Venta promedio mensual 2019 (venta mensual del BT del crédito reactiva se anualiza) 
               aqpb065cent, -- 30. Código de entidad participante
               aqpb065nope, -- 31. Nro. De operación de reporte (BI ¿ 4 dígitos)
               aqpb065tadj, -- 32. Tasa adjudicada en negociación (BI ¿ con 2 decimales, sin %)
               aqpb065ntra, -- 33. Nro. tramo (BI- 4 dígitos)
               aqpb065ttit, -- 34. Tipo de título valor (Valor constante: Pagaré)
               aqpb065temp, -- 35. Tamaño empresa (BI) 
               aqpb065gesp, -- 36. Garantía específica (BI)
               aqpb065ggen, -- 37. Garantía genérica (BI)
               aqpb065locd, -- 38. Localización de documentación (BI)
               aqpb065actn, -- 39. Actividad económica
               aqpb065csdo, -- 40. Saldo aprobado por COFIDE (BI)
               aqpb065fope, -- 41. Fecha de operación reporte BCRP (SOFI)
               aqpb065ppzo, -- 42. Plazo del préstamo reportado a COFIDE (BI)
               aqpb065ecre, -- 43. Estado del crédito (vigente, cancelado, refinanciado, castigado, judicial, etc)
               aqpb065fest, -- 44. Fecha del cambio de estado del crédito.
               aqpb065lamr, -- 45. Flag de amortización (si/no)
               aqpb065fult, -- 46. Fecha de último pago
               aqpb065datr, -- 47. Días de atraso del crédito
               aqpb065lrep, -- 48. Flag de reprogramación (si/no)
               aqpb065frep, -- 49. Fecha de reprogramación 
               aqpb065frini, -- 50. Fecha inicio de crédito reprogramado
               aqpb065frfin, -- 51. Fecha fin de crédito reprogramado
               aqpb065reg, -- 52. Región
               aqpb065nreg, -- 52.1 Región - Nombre
               aqpb065zon, -- 53. Zona
               aqpb065nzon, -- 53.1 Zona - Nombre
               aqpb065nsuc, -- 54.1 Agencia(Sucursal) - Nombre
               aqpb065ase, -- 55. Analista  
               
               aqpb065tdocc, -- 6.1 Tipo de documento deudor (RUC o DNI)
               aqpb065ndocc, -- 7.1 Nro. de documento deudor (Nro. RUC o DNI)
               aqpb065fcan, -- 45. Fecha de cancelación
               aqpb065scap, -- 46. Saldo de capital cancelado
               
               aqpb065ncuo, -- 60.  NRO. CUOTAS PENDIENTES DE PAGO
               aqpb065fvenui, -- 61. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA IMPAGA
               aqpb065fvenup, -- 62. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA PAGADA
               aqpb065fpag, -- 63. FECHA DE PAGO DE LA ÚLTIMA CUOTA PAGADA
               aqpb065ncuop, -- 64. NÚMERO DE CUOTAS PAGADAS                  
               
               aqpb065mcuop, -- 65. MONTO DE CUOTAS PAGADAS
               aqpb065gas, -- 66.a Seguros
               aqpb065mor, -- 66.b Interés Moratorio
               aqpb065int, -- 66.c Intereses
               aqpb065cuo, -- 66.d Capital
               aqpb065icv, -- 66.e Interés compensatorio
               aqpb065pen, -- 65.f Penalidad
               aqpb065ins, -- 66. Instancia
               aqpb065sdoins, -- 67. Saldo Insoluto Real
               aqpb065pgrac, -- Período de Gracia COFIDE
               aqpb065stat,
               aqpb065fe99,
               
               aqpb065ciiuori, --ciuu
               aqpb065actnomori,
               
               aqpb065fcr,
               aqpb065hcr,
               aqpb065fproc,
               aqpb065mhonr,
               aqpb065fhonr,
               aqpb065chonr,
               aqpb065sdocap,
               aqpb065sdohon,
               aqpb065crehon,
               aqpb065fclaa,
               aqpb065cnoma,
               aqpb065ccppa,
               aqpb065cdefa,
               aqpb065cduda,
               aqpb065cpera,
               aqpb065tmor,
               aqpb065tasa,
               aqpb065tintrep,
               aqpb065codhon,
               aqpb065vint,
               aqpb065vmor,
               aqpb065vicv,
               aqpb065cren,
               aqpb065cobr,
               aqpb065chon)
            
            values
              (pn_usuario,
               j.pgcod,
               j.aomod,
               j.aosuc, -- 54. Agencia (Sucursal)
               j.aomda,
               j.aopap,
               j.aocta, -- 56. Nro. de Cuenta
               j.aooper, -- 57. Nro. de Operación  
               j.aosbop,
               j.aotope,
               lb_fsub, -- 1. Fecha de subasta 
               lb_nsub, --lb_nsub, -- 2. Nº Subasta 
               lb_ncer, -- 3. Nº Certificado        
               lb_ccob, -- 4. Código de cobertura
               lb_nact, --lb_nact, -- 5. Nº de acto de aporte
               lx_petdoc, --j.petdoc, -- 6. Número de documento (DNI o RUC)
               trim(lx_pendoc), --j.pendoc, -- 7. Nro. de documento deudor (Nro. RUC o DNI)
               trim(lc_csbs), -- 8. Código de cliente SBS (dato del BT)
               substr(trim(lc_razon), 1, 100), -- 9. Razón social-Denominación 
               lc_ciiu4, --lc_ciiu, -- 10. CIUU
               lc_nro_pre, --j.prestamo, -- 11. Nº préstamo 
               lc_mda, -- 12. Moneda            
               j.monto, -- 13. Monto Préstamo  
               lb_pcob, -- 14. % de la cobertura 
               lc_mtoc, -- 15. Monto de la cobertura 
               lc_sdoi, -- 16. Saldo insoluto del préstamo
               lc_tea, --j.tasa, -- 17. TEA
               lc_nro_cuo, --(j.plazo / 30), -- 18. Plazo del préstamo
               lc_pgra, -- 19. Periodo de Gracia
               j.aofval, -- 20. Fecha inicio de crédito
               j.aofvto, -- 21. Fecha fin de crédito
               lc_pcre, -- 22. Tipo de Crédito SBS
               substr(trim(lc_ncre), 1, 20), -- 22.1 Concepto
               lc_fecha_rcc, -- 23. Fecha clasificación SBS 
               lc_calif0, -- 24. Calificación Normal (en números de 100 a 0)
               lc_calif1, -- 25. Calificación CPP (en números de 100 a 0)  
               lc_calif2, -- 26. Calificación Deficiente (en números de 100 a 0)
               lc_calif3, -- 27. Calificación Dudoso (en números de 100 a 0)
               lc_calif4, -- 28. Calificación Perdida (en números de 100 a 0)         
               lb_vpro, -- 29. Venta promedio mensual 2019 (venta mensual del BT del crédito reactiva se anualiza) 
               '0803', -- 30. Código de entidad participante
               lb_nop, -- 31. Nro. De operación de reporte (BI ¿ 4 dígitos)
               lb_tneg, -- 32. Tasa adjudicada en negociación (BI ¿ con 2 decimales, sin %)
               substr(trim(lb_ntra), 1, 5), -- 33. Nro. tramo (BI- 4 dígitos)
               'Pagaré', -- 34. Tipo de título valor (Valor constante: Pagaré)
               
               lb_temp, -- 35. Tamaño empresa (BI) 
               lb_gesp, -- 36. Garantía específica (BI)
               lb_ggen, -- 37. Garantía genérica (BI)
               substr(trim(lb_ldoc), 1, 100), -- 38. Localización de documentación (BI)
               
               substr(trim(lc_acti), 1, 60), -- 39. Actividad económica
               lb_sapr, -- 40. Saldo aprobado por COFIDE (BI)
               lb_fbcr, -- 41. Fecha de operación reporte BCRP (SOFI)
               lb_ppzo, -- 42. Plazo del préstamo reportado a COFIDE (BI)
               substr(trim(lc_statd), 1, 30), -- 43. Estado del crédito (vigente, cancelado, refinanciado, castigado, judicial, etc)
               case when ld_fcest > nvl(j.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 (case when ld_fcest > nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) then ld_fcest else lc_frep end )
                 else (case when nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) > nvl(j.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then lc_frep else j.aofe99 end )end, --fecha de cambio de estado, -- 44. Fecha del cambio de estado del crédito.
               lc_lamr, -- 45. Flag de amortización (si/no)
               
               lc_fupag, --lc_fupag, -- 46. Fecha de último pago, ppfpag de la cuota
               
               lc_diat, -- 47. Días de atraso del crédito
               lc_lrep, -- 48. Flag de reprogramación (si/no)
               lc_frep, -- 49. Fecha de reprogramación 
               lc_fpri, -- 50. Fecha inicio de crédito reprogramado
               lc_fult, -- 51. Fecha fin de crédito reprogramado
               lc_regi, -- 52. Región
               substr(trim(lc_nreg), 1, 30), -- 52.1 Región - Nombre
               lc_zona, -- 53. Zona
               substr(trim(lc_nzon), 1, 40), -- 53.1 Zona - Nombre
               substr(trim(lc_nsuc), 1, 30), -- 54.1 Agencia(Sucursal) - Nombre
               substr(trim(lc_ases), 1, 10), -- 55. Analista    
               
               lb_tdoc, -- 6.1 Tipo de documento deudor (RUC o DNI)
               lb_ndoc, -- 7.1 Nro. de documento deudor (Nro. RU   
               lc_feccan, --j.aofe99, -- 45. Fecha de cancelación
               lc_scapc, -- 46. Saldo de capital cancelado    
               
               lc_ncuop, -- 60.  NRO. CUOTAS PENDIENTES DE PAGO
               lc_fvenuc, -- 61. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA IMPAGA
               lc_fvenup, -- 62. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA PAGADA
               lc_ufpag1, -- 63. FECHA DE PAGO DE LA ÚLTIMA CUOTA PAGADA, d602fc
               lc_ncuopg, -- 64. NÚMERO DE CUOTAS PAGADAS          
               
               lc_tsum, -- 65. MONTO DE CUOTAS PAGADAS
               lc_gas, -- 66.a Seguros
               lc_mor, -- 66.b Interés Moratorio
               lc_int, -- 66.c Intereses
               lc_cuo, -- 66.d Capital
               lc_icv, -- 66.e Interés compensatorio
               lc_pen, -- 65.f Penalidad  
               
               0, -- 66. Instancia
               lc_sdoins, -- 67. Saldo Insoluto Real
               lb_pgrac, -- Período de Gracia COFIDE
               j.aostat,
               j.aofe99,
               
               lb_ciuu,
               lb_dciu,
               
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               pn_ffin,
               ln_mhonr,
               ld_fhonr,
               lc_eshonr,
               lc_sdoi,
               nvl(ln_sdohon,0),
               lc_sdoi + nvl(ln_sdohon,0),
               lc_fecha_caj, --fecha clasificacion caja
               lc_calif0a, --clasifi normal caja,
               lc_calif1a, --clasifiacion cpp caja
               lc_calif2a, --clasifi deficiente caja
               lc_calif3a, --clasificacion dudosa caja
               lc_calif4a, --clasificacion perdida caja
               lc_tmor, --tasa interese moratoria
               j.tasa, --tasa intereses original
               lc_trep, --tasa interes reprogramado
               case when lc_lrep = 'SI' then '2'else (case when lc_eshonr = 'S' then '1' else '0' end) end,--codigo honra
               ln_vint,
               ln_vmor,
               ln_vicv,
               lb_cren,
               lb_cobr,
               lb_chon  ); 
            commit;
          
          exception
            when others then
            
              lc_coderr := substr(trim(sqlcode), 1, 100);
              lc_msgerr := substr(trim(sqlerrm), 1, 1000);
            
              begin
                insert into AQPB070E
                  (aqpb070etab,
                   aqpb070efec,
                   aqpb070esuc,
                   aqpb070eusr,
                   aqpb070ecoe,
                   aqpb070emsge,
                   aqpb070efcr,
                   aqpb070ehcr,
                   aqpb070ecta,
                   aqpb070eope)
                values
                  ('AQPB065',
                   pn_ffin,
                   pc_sucurs,
                   substr(trim(pn_usuario), 1, 10),
                   lc_coderr,
                   lc_msgerr,
                   to_char(sysdate, 'DD/MM/YYYY'),
                   to_char(sysdate, 'HH24:MI:SS'),
                   ln_cta,
                   ln_ope);
                commit;
              exception
                when others then
                  null;
              end;
            
          end;
        
        end loop;
      
      end;
    
    end if;
  
    --- Créditos con módulo 200     -- jrodriguej  19.07.2021
  
    for j in reporte_reactiva_200() loop
    
      ln_cta := j.aocta;
      ln_ope := j.aooper;      
      
    
      -- 1. Fecha de subasta
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_plantilla_reactiva(pn_cod   => j.pgcod,
                                                        pn_mod   => j.aomod,
                                                        pn_suc   => j.aosuc,
                                                        pn_mda   => j.aomda,
                                                        pn_pap   => j.aopap,
                                                        pn_cta   => j.aocta,
                                                        pn_ope   => j.aooper,
                                                        pn_sbo   => j.aosbop,
                                                        pn_top   => j.aotope,
                                                        pn_fecha => pn_ffin,
                                                        
                                                        pn_fsub  => lb_fsub,
                                                        pn_nsub  => lb_nsub,
                                                        pn_ncer  => lb_ncer,
                                                        pn_ccob  => lb_ccob,
                                                        pn_nact  => lb_nact,
                                                        pn_tdoc  => lb_tdoc,
                                                        pn_ndoc  => lb_ndoc,
                                                        pn_pcob  => lb_pcob,
                                                        pn_vpro  => lb_vpro,
                                                        pn_code  => lb_code,
                                                        pn_nop   => lb_nop,
                                                        pn_tneg  => lb_tneg,
                                                        pn_ntra  => lb_ntra,
                                                        pn_nsec  => lb_nsec,
                                                        pn_ttit  => lb_ttit,
                                                        pn_temp  => lb_temp,
                                                        pn_gesp  => lb_gesp,
                                                        pn_ggen  => lb_ggen,
                                                        pn_ldoc  => lb_ldoc,
                                                        pn_sapr  => lb_sapr,
                                                        pn_fbcr  => lb_fbcr,
                                                        pn_ppzo  => lb_ppzo,
                                                        pn_pgrac => lb_pgrac,
                                                        pn_ciuu  => lb_ciuu,
                                                        pn_dciu  => lb_dciu,
                                                       pn_cren  => lb_cren,
                                                       pn_cobr  => lb_cobr,
                                                       pn_chon  => lb_chon);
      exception
        when others then
          lb_fsub  := null;
          lb_nsub  := null;
          lb_ncer  := null;
          lb_ccob  := null;
          lb_nact  := null;
          lb_tdoc  := null;
          lb_ndoc  := null;
          lb_pcob  := null;
          lb_vpro  := null;
          lb_code  := null;
          lb_nop   := null;
          lb_tneg  := null;
          lb_ntra  := null;
          lb_nsec  := null;
          lb_ttit  := null;
          lb_temp  := null;
          lb_gesp  := null;
          lb_ggen  := null;
          lb_ldoc  := null;
          lb_sapr  := null;
          lb_fbcr  := null;
          lb_ppzo  := null;
          lb_pgrac := null;
          lb_ciuu  := null;
          lb_dciu  := null;
          lb_cren := null;
          lb_cobr  := null;
          lb_chon  := null;
      end;
    
      if lb_tdoc = 1 then
        lb_tdoc := 21;
      elsif lb_tdoc = 6 then
        lb_tdoc := 9;
      end if;
    
      -- 0. Instancia
      begin
        select nvl(x.xwfprcins, 0)
          into lc_inst
          from xwf700 x
         where x.xwfempresa = j.pgcod
           and x.xwfmodulo = j.aomod
           and x.xwfsucursal = j.aosuc
           and x.xwfmoneda = j.aomda
           and x.xwfpapel = j.aopap
           and x.xwfcuenta = j.aocta
           and x.xwfoperacion = j.aooper
           and x.xwfsubope = j.aosbop
           and x.xwftipope = j.aotope
           and x.xwfcar3 = '1';
      exception
        when others then
          lc_inst := 0;
      end;
    
      -- 2. Nro prestamo
      if j.aomda = 0 then
        lc_mda_pre := '00';
      else
        lc_mda_pre := '01';
      end if;
    
      begin
        lc_nro_pre := concat(lpad(to_char(j.aocta), 9, '0'),
                             concat(lc_mda_pre,
                                    lpad(to_char(j.aooper), 9, '0')));
      exception
        when others then
          lc_nro_pre := '';
      end;
    
      -- 8.Obtener datos de persona
      lx_pepais := j.pepais;
      lx_petdoc := j.petdoc;
      lx_pendoc := j.pendoc;
    
      -- 9. Razón social-Denominación 
      begin
        lc_razon := pq_cr_reporte_fondos_p3.fn_obtener_nombre(lx_pepais,
                                                              lx_petdoc,
                                                              lx_pendoc);
      exception
        when others then
          lc_razon := '';
      end;
    
      -- 18. Plazo del prestamo: Nro de cuotas
      begin
        -- Call the function
        lc_nro_cuo := pq_cr_reporte_fondos_p200.fn_fecha_ncuoa(pn_cod => j.pgcod,
                                                               pn_mod => j.aomod,
                                                               pn_suc => j.aosuc,
                                                               pn_mda => j.aomda,
                                                               pn_pap => j.aopap,
                                                               pn_cta => j.aocta,
                                                               pn_ope => j.aooper,
                                                               pn_sbo => j.aosbop,
                                                               pn_top => j.aotope);
      exception
        when others then
          lc_nro_cuo := 0;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   
    
      -- 10. CIUU        
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_ciiu_codigo4(p_pais   => lx_pepais,
                                                p_petdoc => lx_petdoc,
                                                p_pendoc => lx_pendoc,
                                                p_ciuu4  => lc_ciiu4,
                                                p_ciuu6  => lc_ciiu6);
      exception
        when others then
          lc_ciiu4 := 0;
          lc_ciiu6 := 0;
      end;
    
      -- 10.2 Descripción de CIUU 
      begin
        -- Call the procedure
        if lc_ciiu4 <> 0 then
          pq_cr_reporte_fondos_p3.sp_obtener_ciuu(pn_cciu => lc_ciiu6,
                                                  pn_dciu => lc_acti);
        else
          if lc_ciiu6 <> 0 then
            lc_ciiu4 := to_number(substr(to_char(lc_ciiu6), 1, 4));
          else
            lc_ciiu4 := 0;
          end if;
          lc_acti := '';
        end if;
      
      exception
        when others then
          lc_acti := '';
      end;
    
      -- 12. Moneda                      
      begin
        if j.aomda = 0 then
          lc_mda := 'PEN';
        else
          lc_mda := 'USD';
        end if;
      end;
    
      -- 16. Saldo del préstamo
      begin
        lc_sdoi := pq_cr_reporte_fondos_p200.fn_obtener_saldo_actual(j.pgcod,
                                                                     j.aomod,
                                                                     j.aosuc,
                                                                     j.aomda,
                                                                     j.aopap,
                                                                     j.aocta,
                                                                     j.aooper,
                                                                     j.aosbop,
                                                                     j.aotope,
                                                                     pn_ffin,
                                                                     pn_usuario);
      exception
        when others then
          lc_sdoi := 0;
      end;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
      -- 16.1. Saldo Insoluto Real
    
      begin
        --- jrodriguej 03.03.2021                                           
      
        pq_cr_reporte_fondos.sp_obtener_sald_insol200_h(pn_cod   => j.pgcod,
                                                         pn_mod   => j.aomod,
                                                         pn_suc   => j.aosuc,
                                                         pn_mda   => j.aomda,
                                                         pn_pap   => j.aopap,
                                                         pn_cta   => j.aocta,
                                                         pn_ope   => j.aooper,
                                                         pn_sbo   => j.aosbop,
                                                         pn_top   => j.aotope,
                                                         pn_fecha => pn_ffin,
                                                         pn_indi  => 1, -- REACTIVA
                                                         pn_stat  => j.estado,
                                                         pn_sald  => lc_sdoins);
      
      exception
        when others then
          lc_sdoins := 0;
      end;
    
      -- 15. Monto de la cobertura
      begin
        lc_mtoc := lc_sdoins * lb_pcob / 100;
      exception
        when others then
          lc_mtoc := 0;
      end;
    
      -- 19. Período de Gracia
      begin
        lc_pgra := pq_cr_reporte_fondos_p200.fn_obtener_pgracia(j.pgcod,
                                                                j.aomod,
                                                                j.aosuc,
                                                                j.aomda,
                                                                j.aopap,
                                                                j.aocta,
                                                                j.aooper,
                                                                j.aosbop,
                                                                j.aotope);
      exception
        when others then
          lc_pgra := 0;
      end;
    
      begin
        lc_pgra := lc_pgra / 30;
      exception
        when others then
          lc_pgra := 0;
      end;
      --  8. Código de cliente SBS
      -- 24. CLASIFICACIÓN SBS NORMAL %
      -- 25. CLASIFICACIÓN SBS CPP %
      -- 26. CLASIFICACIÓN SBS DEFICIENTE %
      -- 27. CLASIFICACIÓN SBS DUDOSO %
      -- 28. CLASIFICACIÓN SBS PÉRDIDA %
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_obtener_calf(pn_tdoc   => lx_petdoc, --j.petdoc,
                                                pn_ndoc   => lx_pendoc, --j.pendoc,
                                                pn_fech   => pn_ffin,
                                                pn_calif0 => lc_calif0,
                                                pn_calif1 => lc_calif1,
                                                pn_calif2 => lc_calif2,
                                                pn_calif3 => lc_calif3,
                                                pn_calif4 => lc_calif4,
                                                pn_csbs   => lc_csbs);
      exception
        when others then
          lc_calif0 := 100;
          lc_calif1 := 0;
          lc_calif2 := 0;
          lc_calif3 := 0;
          lc_calif4 := 0;
          lc_csbs   := 0;
        
      end;
    
      -- Acondicionamiento de CRR
      lc_calif0 := round(lc_calif0 / 100, 2);
      lc_calif1 := round(lc_calif1 / 100, 2);
      lc_calif2 := round(lc_calif2 / 100, 2);
      lc_calif3 := round(lc_calif3 / 100, 2);
      lc_calif4 := round(lc_calif4 / 100, 2);
    
      if lc_csbs is null then
        lc_csbs := '0';
      end if;
    
      -- 43. ESTADO DEL CREDITO
      begin
        lc_statd := pq_cr_reporte_fondos_p3.fn_estado_desc(j.aostat);
      exception
        when others then
          lc_statd := '';
      end;
    
      -- 45. FLAG DE AMORTIZACION
      begin
        lc_lamr := pq_cr_reporte_fondos_p200.fn_flag_amrtzn(j.pgcod,
                                                            j.aomod,
                                                            j.aosuc,
                                                            j.aomda,
                                                            j.aopap,
                                                            j.aocta,
                                                            j.aooper,
                                                            j.aosbop,
                                                            j.aotope,
                                                            pn_ffin);
      exception
        when others then
          lc_lamr := 'NO';
      end;
    
      -- 47. DIAS DE ATRASO DEL CREDITO
      begin
        lc_diat := fn_dias_atraso(pn_ffin, --fecha de proceso
                                  j.pgcod,
                                  j.aomod,
                                  j.aosuc,
                                  j.aomda,
                                  j.aopap,
                                  j.aocta,
                                  j.aooper,
                                  j.aosbop,
                                  j.aotope,
                                  j.aostat,
                                  j.aofvto);
      exception
        when others then
          lc_diat := 0;
      end;
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => j.aosuc,
                                                pn_regi => lc_regi,
                                                pn_zona => lc_zona,
                                                pn_nsuc => lc_nsuc,
                                                pn_nzon => lc_nzon,
                                                pn_nreg => lc_nreg);
      exception
        when others then
          lc_regi := 0;
          lc_zona := 0;
          lc_nsuc := '';
          lc_nzon := '';
          lc_nreg := '';
        
      end;
    
      -- 55. ANALISTA
      begin
        lc_ases := fn_analista_credito(j.aomod,
                                       j.aosuc,
                                       j.aomda,
                                       j.aopap,
                                       j.aocta,
                                       j.aooper,
                                       j.aosbop,
                                       j.aotope);
      exception
        when others then
          lc_ases := '';
      end;
    
      -- 46. Saldo de capital cancelado
      begin
        lc_scapc := pq_cr_reporte_fondos_p200.fn_obtener_sdocap(j.pgcod,
                                                                j.aomod,
                                                                j.aosuc,
                                                                j.aomda,
                                                                j.aopap,
                                                                j.aocta,
                                                                j.aooper,
                                                                j.aosbop,
                                                                j.aotope,
                                                                pn_ffin,
                                                                pn_usuario);
      exception
        when others then
          lc_scapc := 0;
      end;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
      -- Reprogramaciones
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_repro_dato_jaqa400(pn_cod   => j.pgcod,
                                                 pn_cta   => j.aocta,
                                                 pn_ope   => j.aooper,
                                                 pn_fecha => pn_ffin,
                                                 pn_flag  => lc_lrep, -- Flag
                                                 pn_nrep  => lc_nrep, -- N de reprogramaciones
                                                 pn_fech  => lc_frep, -- Fecha de reprogramacion
                                                 pn_tabla => lc_tabla, -- Tabla
                                                 
                                                 pn_peri => lc_peri2, -- Período
                                                 pn_ncuo => lc_ncuo2, -- N de cuotas
                                                 pn_fpri => lc_fpri, -- Fecha ini del crédito reprogramado
                                                 pn_fult => lc_fult); -- Fecha fin del crédito reprogramado
      exception
        when others then
        
          lc_lrep  := 'NO';
          lc_nrep  := 0;
          lc_frep  := null;
          lc_tabla := '';
          lc_peri2 := 0;
          lc_ncuo2 := 0;
          lc_fpri  := null;
          lc_fult  := null;
      end;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       
      -- 35. Fecha de última cuota pagado
      begin
        lc_ufpag1 := pq_cr_reporte_fondos_p200.fn_fecha_upago(j.pgcod,
                                                              j.aomod,
                                                              j.aosuc,
                                                              j.aomda,
                                                              j.aopap,
                                                              j.aocta,
                                                              j.aooper,
                                                              j.aosbop,
                                                              j.aotope,
                                                              pn_ffin);
      exception
        when others then
          lc_ufpag1 := null;
      end;
    
      -- 22. Tipo de Crédito SBS
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_tipo_credito_sbs_vig(pn_cod     => j.pgcod,
                                                          pn_mod     => j.aomod,
                                                          pn_suc     => j.aosuc,
                                                          pn_mda     => j.aomda,
                                                          pn_pap     => j.aopap,
                                                          pn_cta     => j.aocta,
                                                          pn_ope     => j.aooper,
                                                          pn_sbo     => j.aosbop,
                                                          pn_top     => j.aotope,
                                                          pn_fecha   => pn_ffin,
                                                          pn_usuario => pn_usuario,
                                                          pn_ntipo   => lc_pcre_c,
                                                          pn_nconc   => lc_ncre);
      
        --- CASE
        --6=Corporativo;  10
        --7=Grande Emp;   11
        --8=Mediana Emp;  12
        --9=Pequeña Emp;  13
        --10=Microempresa  2
      
        case lc_pcre_c
          when 2 then
            lc_pcre := 10; --Microempresa
          when 10 then
            lc_pcre := 6; --Corporativo       
          when 11 then
            lc_pcre := 7; --Grande Emp   
          when 12 then
            lc_pcre := 8; --Mediana Emp 
          when 13 then
            lc_pcre := 9; --Pequeña Emp  
          else
            lc_pcre := 0;
        end case;
      
      exception
        when others then
          lc_pcre := 0;
          lc_ncre := '';
      end;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                                              
      -- 36. Fecha de último pago   
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_datos_ufecha(pn_cod   => j.pgcod,
                                                          pn_mod   => j.aomod,
                                                          pn_suc   => j.aosuc,
                                                          pn_mda   => j.aomda,
                                                          pn_pap   => j.aopap,
                                                          pn_cta   => j.aocta,
                                                          pn_ope   => j.aooper,
                                                          pn_sbo   => j.aosbop,
                                                          pn_top   => j.aotope,
                                                          pn_fecha => pn_ffin,
                                                          pn_fpagu => lc_fupag, -- Fecha de la última cuota pagada: ppfpag
                                                          
                                                          pn_fvenu => lc_fvenup); -- Fecha de vencimiento de la última cuota pagada
      exception
        when others then
          lc_fupag  := null;
          lc_fvenup := null;
      end;
    
      -- Fecha de vencimiento de la próxima cuota impaga
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_impaga(pn_cod    => j.pgcod,
                                                    pn_mod    => j.aomod,
                                                    pn_suc    => j.aosuc,
                                                    pn_mda    => j.aomda,
                                                    pn_pap    => j.aopap,
                                                    pn_cta    => j.aocta,
                                                    pn_ope    => j.aooper,
                                                    pn_sbo    => j.aosbop,
                                                    pn_top    => j.aotope,
                                                    pn_fecha  => pn_ffin,
                                                    pn_fvenuc => lc_fvenuc);
      exception
        when others then
          lc_fvenuc := null;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      
      -- 34. Nro. cuotas pendientes de pago
      begin
        pq_cr_reporte_fondos_p200.sp_fecha_ncuop(j.pgcod,
                                                 j.aomod,
                                                 j.aosuc,
                                                 j.aomda,
                                                 j.aopap,
                                                 j.aocta,
                                                 j.aooper,
                                                 j.aosbop,
                                                 j.aotope,
                                                 lc_fupag, -- última cuota pagada ppfpag
                                                 lc_ncuop, -- Nro de cuotas pendientes de pago
                                                 lc_ncuopg); -- Nro de cuotas ya pagadas
      exception
        when others then
          lc_ncuop  := 0;
          lc_ncuopg := 0;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     
    
      -- Distribución de pago
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_distribuc_pago_acum(pn_cod   => j.pgcod,
                                                         pn_mod   => j.aomod,
                                                         pn_suc   => j.aosuc,
                                                         pn_mda   => j.aomda,
                                                         pn_pap   => j.aopap,
                                                         pn_cta   => j.aocta,
                                                         pn_ope   => j.aooper,
                                                         pn_sbo   => j.aosbop,
                                                         pn_top   => j.aotope,
                                                         pn_fecha => pn_ffin,
                                                         pn_tsum  => lc_tsum,
                                                         pn_gas   => lc_gas,
                                                         pn_mor   => lc_mor,
                                                         pn_int   => lc_int,
                                                         pn_cuo   => lc_cuo,
                                                         pn_icv   => lc_icv,
                                                         pn_pen   => lc_pen);
      exception
        when others then
        
          lc_tsum := 0;
          lc_gas  := 0;
          lc_mor  := 0;
          lc_int  := 0;
          lc_cuo  := 0;
          lc_icv  := 0;
          lc_pen  := 0;
        
      end;
    
      -- Fecha de cancelacion
      lc_feccan := null;
      if j.aostat = 99 then
        lc_feccan := j.aofe99;
      end if;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
      -- Tasa de interes
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_tasa_actual(pn_cod   => j.pgcod,
                                                         pn_mod   => j.aomod,
                                                         pn_suc   => j.aosuc,
                                                         pn_mda   => j.aomda,
                                                         pn_pap   => j.aopap,
                                                         pn_cta   => j.aocta,
                                                         pn_ope   => j.aooper,
                                                         pn_sbo   => j.aosbop,
                                                         pn_top   => j.aotope,
                                                         pn_fecha => pn_ffin,
                                                         pn_tasa  => lc_tea);
      exception
        when others then
          lc_tea := 0;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
      -- Tasa de interes repro
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_obtener_tasa_repro(pn_cod   => j.pgcod,
                                                         pn_mod   => j.aomod,
                                                         pn_suc   => j.aosuc,
                                                         pn_mda   => j.aomda,
                                                         pn_pap   => j.aopap,
                                                         pn_cta   => j.aocta,
                                                         pn_ope   => j.aooper,
                                                         pn_sbo   => j.aosbop,
                                                         pn_top   => j.aotope,
                                                         pn_fecha => pn_ffin,
                                                         pn_tasa  => lc_trep);
      exception
        when others then
          lc_trep := 0;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
      -- Tasa de interes moratoria
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => j.pgcod,
                                                         pn_mod   => j.aomod,
                                                         pn_suc   => j.aosuc,
                                                         pn_mda   => j.aomda,
                                                         pn_pap   => j.aopap,
                                                         pn_cta   => j.aocta,
                                                         pn_ope   => j.aooper,
                                                         pn_sbo   => j.aosbop,
                                                         pn_top   => j.aotope,
                                                         pn_fecha => pn_ffin,
                                                         pn_tasa  => lc_tmor);
      exception
        when others then
          lc_tmor := 0;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_rubr   => 9300082040000,
                                                           pd_fecha => pn_ffin,
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr  => ln_mhonr,
                                                           pd_fhonr  => ld_fhonr,
                                                           pn_sdohon   => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon := 0;
              
          end; 
          --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,                                                           
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
          ----------------------------------------------------------
          -- 10. Distribución clasificación de riesgo enviado por caja
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_calf_caja(pn_cod   => j.pgcod,
                                                         pn_mod   => j.aomod,
                                                         pn_suc   => j.aosuc,
                                                         pn_mda   => j.aomda,
                                                         pn_pap   => j.aopap,
                                                         pn_cta   => j.aocta,
                                                         pn_ope   => j.aooper,
                                                         pn_sbo   => j.aosbop,
                                                         pn_top   => j.aotope,
                                                         pn_est   => j.aostat,
                                                         pn_fecha => pn_ffin,
                                                         --pn_dcla => lc_dcla,
                                                         --pn_ncla => lc_ncla
                                                         pn_calif0a => lc_calif0a,
                                                         pn_calif1a => lc_calif1a,
                                                         pn_calif2a => lc_calif2a,
                                                         pn_calif3a => lc_calif3a,
                                                         pn_calif4a => lc_calif4a,
                                                         pn_deccaj  => lc_fecha_caj);
          exception
            when others then
              lc_calif0a   := 100;
              lc_calif1a   := 0;
              lc_calif2a   := 0;
              lc_calif3a   := 0;
              lc_calif4a   := 0;
              lc_fecha_caj := null;
          end;
          -----------------------------------------------------
          -- Montos vencido
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_montos_venc(pn_cod   => j.pgcod,
                                                           pn_mod   => j.aomod,
                                                           pn_suc   => j.aosuc,
                                                           pn_mda   => j.aomda,
                                                           pn_pap   => j.aopap,
                                                           pn_cta   => j.aocta,
                                                           pn_ope   => j.aooper,
                                                           pn_sbo   => j.aosbop,
                                                           pn_top   => j.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_int  => ln_vint,
                                                           pn_mor  => ln_vmor,
                                                           pn_icv  => ln_vicv);
          exception
            when others then
              ln_vint := 0;
              ln_vmor := 0;
              ln_vicv := 0;
          end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
      begin
        insert into aqpb065
          (aqpb065usur, -- Usuario
           aqpb065pgcod,
           aqpb065aomod,
           aqpb065aosuc, -- 54. Agencia (Sucursal)
           aqpb065aomda,
           aqpb065aopap,
           aqpb065aocta, -- 56. Nro. de Cuenta
           aqpb065aooper, -- 57. Nro. de Operación     
           aqpb065aosbop,
           aqpb065aotope,
           aqpb065fsub, -- 1. Fecha de subasta 
           aqpb065nsub, -- 2. Nº Subasta 
           aqpb065ncer, -- 3. Nº Certificado        
           aqpb065ncob, -- 4. Código de cobertura
           aqpb065nact, -- 5. Nº de acto de aporte
           aqpb065tdoc, -- 6. Tipo de documento deudor (RUC o DNI)
           aqpb065ndoc, -- 7. Nro. de documento deudor (Nro. RUC o DNI)
           aqpb065csbs, -- 8. Código de cliente SBS (dato del BT)
           aqpb065razn, -- 9. Razón social-Denominación 
           aqpb065ciuu, -- 10. CIUU
           aqpb065pres, -- 11. Nº préstamo 
           aqpb065mda, -- 12. Moneda
           aqpb065mnto, -- 13. Monto Préstamo   
           aqpb065pcob, -- 14. % de la cobertura 
           aqpb065mtoc, -- 15. Monto de la cobertura 
           aqpb065sdoi, -- 16. Saldo insoluto del préstamo
           aqpb065tea, -- 17. TEA
           aqpb065pzo, -- 18. Plazo del préstamo 
           aqpb065pgra, -- 19. Periodo de Gracia
           aqpb065fini, -- 20. Fecha inicio de crédito
           aqpb065ffin, -- 21. Fecha fin de crédito
           aqpb065tcre, -- 22. Tipo de Crédito SBS
           aqpb065ncre, -- Concepto
           aqpb065fcla, -- 23. Fecha clasificación SBS 
           aqpb065cnom, -- 24. Calificación Normal (en números de 100 a 0)
           aqpb065ccpp, -- 25. Calificación CPP (en números de 100 a 0)  
           aqpb065cdef, -- 26. Calificación Deficiente (en números de 100 a 0)
           aqpb065cdud, -- 27. Calificación Dudoso (en números de 100 a 0)
           aqpb065cper, -- 28. Calificación Perdida (en números de 100 a 0)
           aqpb065vpro, -- 29. Venta promedio mensual 2019 (venta mensual del BT del crédito reactiva se anualiza) 
           aqpb065cent, -- 30. Código de entidad participante
           aqpb065nope, -- 31. Nro. De operación de reporte (BI ¿ 4 dígitos)
           aqpb065tadj, -- 32. Tasa adjudicada en negociación (BI ¿ con 2 decimales, sin %)
           aqpb065ntra, -- 33. Nro. tramo (BI- 4 dígitos)
           aqpb065ttit, -- 34. Tipo de título valor (Valor constante: Pagaré)
           aqpb065temp, -- 35. Tamaño empresa (BI) 
           aqpb065gesp, -- 36. Garantía específica (BI)
           aqpb065ggen, -- 37. Garantía genérica (BI)
           aqpb065locd, -- 38. Localización de documentación (BI)
           aqpb065actn, -- 39. Actividad económica
           aqpb065csdo, -- 40. Saldo aprobado por COFIDE (BI)
           aqpb065fope, -- 41. Fecha de operación reporte BCRP (SOFI)
           aqpb065ppzo, -- 42. Plazo del préstamo reportado a COFIDE (BI)
           aqpb065ecre, -- 43. Estado del crédito (vigente, cancelado, refinanciado, castigado, judicial, etc)
           aqpb065fest, -- 44. Fecha del cambio de estado del crédito.
           aqpb065lamr, -- 45. Flag de amortización (si/no)
           aqpb065fult, -- 46. Fecha de último pago
           aqpb065datr, -- 47. Días de atraso del crédito
           aqpb065lrep, -- 48. Flag de reprogramación (si/no)
           aqpb065frep, -- 49. Fecha de reprogramación 
           aqpb065frini, -- 50. Fecha inicio de crédito reprogramado
           aqpb065frfin, -- 51. Fecha fin de crédito reprogramado
           aqpb065reg, -- 52. Región
           aqpb065nreg, -- 52.1 Región - Nombre
           aqpb065zon, -- 53. Zona
           aqpb065nzon, -- 53.1 Zona - Nombre
           aqpb065nsuc, -- 54.1 Agencia(Sucursal) - Nombre
           aqpb065ase, -- 55. Analista  
           
           aqpb065tdocc, -- 6.1 Tipo de documento deudor (RUC o DNI)
           aqpb065ndocc, -- 7.1 Nro. de documento deudor (Nro. RUC o DNI)
           aqpb065fcan, -- 45. Fecha de cancelación
           aqpb065scap, -- 46. Saldo de capital cancelado
           
           aqpb065ncuo, -- 60.  NRO. CUOTAS PENDIENTES DE PAGO
           aqpb065fvenui, -- 61. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA IMPAGA
           aqpb065fvenup, -- 62. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA PAGADA
           aqpb065fpag, -- 63. FECHA DE PAGO DE LA ÚLTIMA CUOTA PAGADA
           aqpb065ncuop, -- 64. NÚMERO DE CUOTAS PAGADAS                  
           
           aqpb065mcuop, -- 65. MONTO DE CUOTAS PAGADAS
           aqpb065gas, -- 66.a Seguros
           aqpb065mor, -- 66.b Interés Moratorio
           aqpb065int, -- 66.c Intereses
           aqpb065cuo, -- 66.d Capital
           aqpb065icv, -- 66.e Interés compensatorio
           aqpb065pen, -- 65.f Penalidad
           aqpb065ins, -- 66. Instancia
           aqpb065sdoins, -- 67. Saldo Insoluto Real
           aqpb065pgrac, -- Período de Gracia COFIDE
           aqpb065stat,
           aqpb065fe99,
           
           aqpb065ciiuori, --ciuu
           aqpb065actnomori,
           
           aqpb065fcr,
           aqpb065hcr,
           aqpb065fproc,
           aqpb065mhonr,
           aqpb065fhonr,
           aqpb065chonr,
           aqpb065sdocap,
           aqpb065sdohon,
           aqpb065crehon,
           aqpb065fclaa,
               aqpb065cnoma,
               aqpb065ccppa,
               aqpb065cdefa,
               aqpb065cduda,
               aqpb065cpera,
               aqpb065tmor,
               aqpb065tasa,
               aqpb065tintrep,
               aqpb065codhon,
               aqpb065vint,
               aqpb065vmor,
               aqpb065vicv,
               aqpb065cren,
               aqpb065cobr,
               aqpb065chon)
        
        values
          (pn_usuario,
           j.pgcod,
           j.aomod,
           j.aosuc, -- 54. Agencia (Sucursal)
           j.aomda,
           j.aopap,
           j.aocta, -- 56. Nro. de Cuenta
           j.aooper, -- 57. Nro. de Operación  
           j.aosbop,
           j.aotope,
           lb_fsub, -- 1. Fecha de subasta 
           lb_nsub, --lb_nsub, -- 2. Nº Subasta 
           lb_ncer, -- 3. Nº Certificado        
           lb_ccob, -- 4. Código de cobertura
           lb_nact, --lb_nact, -- 5. Nº de acto de aporte
           lx_petdoc, --j.petdoc, -- 6. Número de documento (DNI o RUC)
           trim(lx_pendoc), --j.pendoc, -- 7. Nro. de documento deudor (Nro. RUC o DNI)
           trim(lc_csbs), -- 8. Código de cliente SBS (dato del BT)
           substr(trim(lc_razon), 1, 100), -- 9. Razón social-Denominación 
           lc_ciiu4, --lc_ciiu, -- 10. CIUU
           lc_nro_pre, --j.prestamo, -- 11. Nº préstamo 
           lc_mda, -- 12. Moneda            
           j.monto, -- 13. Monto Préstamo  
           lb_pcob, -- 14. % de la cobertura 
           lc_mtoc, -- 15. Monto de la cobertura 
           lc_sdoi, -- 16. Saldo insoluto del préstamo
           lc_tea, --j.tasa, -- 17. TEA
           lc_nro_cuo, --(j.plazo / 30), -- 18. Plazo del préstamo
           lc_pgra, -- 19. Periodo de Gracia
           j.aofval, -- 20. Fecha inicio de crédito
           j.aofvto, -- 21. Fecha fin de crédito
           lc_pcre, -- 22. Tipo de Crédito SBS
           substr(trim(lc_ncre), 1, 20), -- 22.1 Concepto
           lc_fecha_rcc, -- 23. Fecha clasificación SBS 
           lc_calif0, -- 24. Calificación Normal (en números de 100 a 0)
           lc_calif1, -- 25. Calificación CPP (en números de 100 a 0)  
           lc_calif2, -- 26. Calificación Deficiente (en números de 100 a 0)
           lc_calif3, -- 27. Calificación Dudoso (en números de 100 a 0)
           lc_calif4, -- 28. Calificación Perdida (en números de 100 a 0)         
           lb_vpro, -- 29. Venta promedio mensual 2019 (venta mensual del BT del crédito reactiva se anualiza) 
           '0803', -- 30. Código de entidad participante
           lb_nop, -- 31. Nro. De operación de reporte (BI ¿ 4 dígitos)
           lb_tneg, -- 32. Tasa adjudicada en negociación (BI ¿ con 2 decimales, sin %)
           substr(trim(lb_ntra), 1, 5), -- 33. Nro. tramo (BI- 4 dígitos)
           'Pagaré', -- 34. Tipo de título valor (Valor constante: Pagaré)
           
           lb_temp, -- 35. Tamaño empresa (BI) 
           lb_gesp, -- 36. Garantía específica (BI)
           lb_ggen, -- 37. Garantía genérica (BI)
           substr(trim(lb_ldoc), 1, 100), -- 38. Localización de documentación (BI)
           
           substr(trim(lc_acti), 1, 60), -- 39. Actividad económica
           lb_sapr, -- 40. Saldo aprobado por COFIDE (BI)
           lb_fbcr, -- 41. Fecha de operación reporte BCRP (SOFI)
           lb_ppzo, -- 42. Plazo del préstamo reportado a COFIDE (BI)
           substr(trim(lc_statd), 1, 30), -- 43. Estado del crédito (vigente, cancelado, refinanciado, castigado, judicial, etc)
           case when ld_fcest > nvl(j.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 (case when ld_fcest > nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) then ld_fcest else lc_frep end )
                 else (case when nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) > nvl(j.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then lc_frep else j.aofe99 end )end, --fecha de cambio de estado, -- 44. Fecha del cambio de estado del crédito.
               
           lc_lamr, -- 45. Flag de amortización (si/no)
           
           lc_fupag, --lc_fupag, -- 46. Fecha de último pago, ppfpag de la cuota
           
           lc_diat, -- 47. Días de atraso del crédito
           lc_lrep, -- 48. Flag de reprogramación (si/no)
           lc_frep, -- 49. Fecha de reprogramación 
           lc_fpri, -- 50. Fecha inicio de crédito reprogramado
           lc_fult, -- 51. Fecha fin de crédito reprogramado
           lc_regi, -- 52. Región
           substr(trim(lc_nreg), 1, 30), -- 52.1 Región - Nombre
           lc_zona, -- 53. Zona
           substr(trim(lc_nzon), 1, 40), -- 53.1 Zona - Nombre
           substr(trim(lc_nsuc), 1, 30), -- 54.1 Agencia(Sucursal) - Nombre
           substr(trim(lc_ases), 1, 10), -- 55. Analista    
           
           lb_tdoc, -- 6.1 Tipo de documento deudor (RUC o DNI)
           lb_ndoc, -- 7.1 Nro. de documento deudor (Nro. RU   
           lc_feccan, --j.aofe99, -- 45. Fecha de cancelación
           lc_scapc, -- 46. Saldo de capital cancelado    
           
           lc_ncuop, -- 60.  NRO. CUOTAS PENDIENTES DE PAGO
           lc_fvenuc, -- 61. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA IMPAGA
           lc_fvenup, -- 62. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA PAGADA
           lc_ufpag1, -- 63. FECHA DE PAGO DE LA ÚLTIMA CUOTA PAGADA, d602fc
           lc_ncuopg, -- 64. NÚMERO DE CUOTAS PAGADAS          
           
           lc_tsum, -- 65. MONTO DE CUOTAS PAGADAS
           lc_gas, -- 66.a Seguros
           lc_mor, -- 66.b Interés Moratorio
           lc_int, -- 66.c Intereses
           lc_cuo, -- 66.d Capital
           lc_icv, -- 66.e Interés compensatorio
           lc_pen, -- 65.f Penalidad  
           
           0, -- 66. Instancia
           lc_sdoins, -- 67. Saldo Insoluto Real
           lb_pgrac, -- Período de Gracia COFIDE
           j.aostat,
           j.aofe99,
           
           lb_ciuu,
           lb_dciu,
           
           to_char(sysdate, 'DD/MM/YYYY'),
           to_char(sysdate, 'HH24:MI:SS'),
           pn_ffin,
           ln_mhonr,
           ld_fhonr,
           lc_eshonr,
           lc_sdoi,
           nvl(ln_sdohon,0),
           lc_sdoi+nvl(ln_sdohon,0),
           lc_fecha_caj, --fecha clasificacion caja
               lc_calif0a, --clasifi normal caja,
               lc_calif1a, --clasifiacion cpp caja
               lc_calif2a, --clasifi deficiente caja
               lc_calif3a, --clasificacion dudosa caja
               lc_calif4a, --clasificacion perdida caja
               lc_tmor, --tasa interese moratoria
               j.tasa, --tasa intereses original
               lc_trep, --tasa interes reprogramado
               case when lc_lrep = 'SI' then '2'else (case when lc_eshonr = 'S' then '1' else '0' end) end, --codigo honra
               ln_vint,
               ln_vmor,
               ln_vicv,
               lb_cren,
               lb_cobr,
               lb_chon); 
        commit;
      
      exception
        when others then
        
          lc_coderr := substr(trim(sqlcode), 1, 100);
          lc_msgerr := substr(trim(sqlerrm), 1, 1000);
        
          begin
            insert into AQPB070E
              (aqpb070etab,
               aqpb070efec,
               aqpb070esuc,
               aqpb070eusr,
               aqpb070ecoe,
               aqpb070emsge,
               aqpb070efcr,
               aqpb070ehcr,
               aqpb070ecta,
               aqpb070eope)
            values
              ('AQPB065',
               pn_ffin,
               pc_sucurs,
               substr(trim(pn_usuario), 1, 10),
               lc_coderr,
               lc_msgerr,
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               ln_cta,
               ln_ope);
            commit;
          exception
            when others then
              null;
          end;
        
      end;
    
    end loop;
  
    -- Verificaciones
    for z in verificar_reactiva() loop
    
      ln_cta := z.cta;
      ln_ope := z.oper;
    
      -- Verificar si hay una cuenta con tipo de operación 550
      begin
        select count(*)
          into lb_550
          from aqpb065 x
         where x.aqpb065usur = pn_usuario
           and x.aqpb065aosuc = pc_sucurs
           and x.aqpb065aocta = z.cta
           and x.aqpb065aooper = z.oper
           and x.aqpb065aotope = 550;
      exception
        when others then
          lb_550 := 0;
      end;
    
      if lb_550 <> 0 then
      
        begin
        
          begin
            select distinct x.aqpb065aomda
              into lb_mda
              from aqpb065 x
             where x.aqpb065usur = pn_usuario
               and x.aqpb065aosuc = pc_sucurs
               and x.aqpb065aocta = z.cta
               and x.aqpb065aooper = z.oper
               and x.aqpb065aotope = 550;
          exception
            when others then
              lb_mda := null;
          end;
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos.sp_verificar_550(pc_mon  => lb_mda,
                                                  pc_suc  => pc_sucurs,
                                                  pn_cta  => z.cta,
                                                  pn_oper => z.oper,
                                                  pc_fech => lb_fec_550);
          exception
            when others then
              lb_fec_550 := null;
          end;
        
          if pn_ffin >= lb_fec_550 then
          
            delete from aqpb065 x
             where x.aqpb065usur = pn_usuario
               and x.aqpb065aosuc = pc_sucurs
               and x.aqpb065aocta = z.cta
               and x.aqpb065aooper = z.oper
               and x.aqpb065aotope <> 550;
            commit;
          
          else
          
            delete from aqpb065 x
             where x.aqpb065usur = pn_usuario
               and x.aqpb065aosuc = pc_sucurs
               and x.aqpb065aocta = z.cta
               and x.aqpb065aooper = z.oper
               and x.aqpb065aotope = 550;
            commit;
          
          end if;
        end;
      
      end if;
    
      --- Verificar si hay una cuenta con estado vigente
      begin
        select 'S'
          into lb_flag_vig
          from aqpb065 x
         where x.aqpb065usur = pn_usuario
           and x.aqpb065aosuc = pc_sucurs
           and x.aqpb065aocta = z.cta
           and x.aqpb065aooper = z.oper
           and x.aqpb065stat <> 99;
      exception
        when others then
          lb_flag_vig := 'N';
      end;
    
      begin
        if lb_flag_vig = 'S' then
          --- Hay vigente, borrar los no vigentes
        
          delete from aqpb065 x
           where x.aqpb065usur = pn_usuario
             and x.aqpb065aosuc = pc_sucurs
             and x.aqpb065aocta = z.cta
             and x.aqpb065aooper = z.oper
             and x.aqpb065stat = 99;
          commit;
        
        else
          --- Solo hay cancelados, dejar el crédito con máxima fecha de cancelación
          select max(x.aqpb065fe99)
            into lb_fmax_anu
            from aqpb065 x
           where x.aqpb065usur = pn_usuario
             and x.aqpb065aosuc = pc_sucurs
             and x.aqpb065aocta = z.cta
             and x.aqpb065aooper = z.oper
             and x.aqpb065stat = 99;
        
          select max(x.aqpb065aosbop)
            into lb_max_sbop
            from aqpb065 x
           where x.aqpb065usur = pn_usuario
             and x.aqpb065aosuc = pc_sucurs
             and x.aqpb065aocta = z.cta
             and x.aqpb065aooper = z.oper
             and x.aqpb065stat = 99
             and x.aqpb065fe99 = lb_fmax_anu;
        
          -- Verificación
          begin
            select count(*)
              into lb_cont_del
              from aqpb065 x
             where x.aqpb065usur = pn_usuario
               and x.aqpb065aosuc = pc_sucurs
               and x.aqpb065aocta = z.cta
               and x.aqpb065aooper = z.oper
               and x.aqpb065stat = 99
               and x.aqpb065fe99 <> lb_fmax_anu;
          exception
            when others then
              lb_cont_del := 0;
          end;
        
          --lb_cont_del = 0; significa que las cancelaciones tienen las mismas fechas
          if lb_cont_del = 0 then
          
            delete from aqpb065 x
             where x.aqpb065usur = pn_usuario
               and x.aqpb065aosuc = pc_sucurs
               and x.aqpb065aocta = z.cta
               and x.aqpb065aooper = z.oper
               and x.aqpb065stat = 99
               and x.aqpb065fe99 <> lb_fmax_anu;
            commit;
          
            delete from aqpb065 x
             where x.aqpb065usur = pn_usuario
               and x.aqpb065aosuc = pc_sucurs
               and x.aqpb065aocta = z.cta
               and x.aqpb065aooper = z.oper
               and x.aqpb065aosbop <> lb_max_sbop
               and x.aqpb065stat = 99
               and x.aqpb065fe99 = lb_fmax_anu;
            commit;
          
          else
            --lb_cont_del = 1; significa que las cancelaciones tienen fechas diferentes a las maximas
            delete from aqpb065 x
             where x.aqpb065usur = pn_usuario
               and x.aqpb065aosuc = pc_sucurs
               and x.aqpb065aocta = z.cta
               and x.aqpb065aooper = z.oper
               and x.aqpb065stat = 99
               and x.aqpb065fe99 <> lb_fmax_anu;
            commit;
          end if;
        
          /*       
          delete from aqpb065 x
           where x.aqpb065usur = pn_usuario
             and x.aqpb065aosuc = pc_sucurs
             and x.aqpb065aocta = z.cta
             and x.aqpb065aooper = z.oper
             and x.aqpb065fe99 <> lb_fmax_anu
             and x.aqpb065stat = 99;
          commit;
          */
        
        end if;
      
      exception
        when others then
        
          lc_coderr := substr(trim(sqlcode), 1, 100);
          lc_msgerr := substr(trim(sqlerrm), 1, 1000);
        
          begin
            insert into AQPB070E
              (aqpb070etab,
               aqpb070efec,
               aqpb070esuc,
               aqpb070eusr,
               aqpb070ecoe,
               aqpb070emsge,
               aqpb070efcr,
               aqpb070ehcr,
               aqpb070ecta,
               aqpb070eope)
            values
              ('AQPB065',
               pn_ffin,
               pc_sucurs,
               substr(trim(pn_usuario), 1, 10),
               lc_coderr,
               lc_msgerr,
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               ln_cta,
               ln_ope);
            commit;
          exception
            when others then
              null;
          end;
        
      end;
    
    end loop;
  
  exception
    when others then
    
      lc_coderr := substr(trim(sqlcode), 1, 100);
      lc_msgerr := substr(trim(sqlerrm), 1, 1000);
    
      begin
        insert into AQPB070E
          (aqpb070etab,
           aqpb070efec,
           aqpb070esuc,
           aqpb070eusr,
           aqpb070ecoe,
           aqpb070emsge,
           aqpb070efcr,
           aqpb070ehcr,
           aqpb070ecta,
           aqpb070eope)
        values
          ('AQPB065',
           pn_ffin,
           pc_sucurs,
           substr(trim(pn_usuario), 1, 10),
           lc_coderr,
           lc_msgerr,
           to_char(sysdate, 'DD/MM/YYYY'),
           to_char(sysdate, 'HH24:MI:SS'),
           ln_cta,
           ln_ope);
        commit;
      exception
        when others then
          null;
      end;
    
  end sp_reporte_reactiva_r1;

  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   

  --TABLA AQPB067
          PROCEDURE sp_reporte_faemype_r1(pn_ffin    in date,
                                  pc_sucurs  in number,
                                  pn_usuario in char) is
  
    lc_fecha_rcc date;
    lc_fecha     date;
    lc_sdoi      number(17, 2);
    lc_sdoins    number(17, 2);
    lc_sdoins_mesant  number(17, 2);
    lc_coderr    char(100);
    lc_msgerr    char(1000);
  
    lc_calif0 number(10, 2);
    lc_calif1 number(10, 2);
    lc_calif2 number(10, 2);
    lc_calif3 number(10, 2);
    lc_calif4 number(10, 2);
  
    lc_eshonr char(1);
    ln_mhonr number(17,2);
    ld_fhonr date;
    ln_sdohon number(17,2);
    
    lc_ncer  varchar2(50);
    lc_ccob  varchar2(50); 
    lc_cren  varchar2(50); 
    lc_cobr  varchar2(50);
    lc_chon  varchar2(50);
    lc_codi  varchar2(50);
    lc_crec  varchar2(50);
    
    lx_esf  char(11);
    lx_diat number;
    lx_mda  char(10);
  
    lc_regi   number(9);
    lc_zona   number(9);
    lc_nsuc   char(30);
    lc_nzon   char(40);
    lc_nreg   char(30);
    lc_ases   char(10);
    lc_perjur char(70);
    lc_pernat char(70);
    lc_statd  char(30);
  
    lc_dcon char(4); -- 11. Situación contable
    lc_scon char(20);
    lc_dest char(4); -- 11. Situación contable
    lc_lest char(20);
  
    lc_fupag date;
    lc_ncuop number;
    --lc_upago date;
    lc_diat  number;
    lc_csbs  char(11);
    --lc_ciiu  number;
    lc_acti  char(60);
    lc_ciiu6 number(9);
    lc_ciiu4 number(12);
  
    lc_pcre number;
    lc_ncre AQPB067.AQPB067NCRE%type;
  
    lc_csap aqpb067b.aqpb067bcsap%type;
    lc_fdes aqpb067b.aqpb067bfdes%type;
    lc_mon  aqpb067b.aqpb067bmon%type;
    lc_ncuo aqpb067b.aqpb067bncuo%type;
    lc_peri aqpb067b.aqpb067bperi%type;
    lc_pcob aqpb067b.aqpb067bpcob%type;
  
    --lc_dcla aqpb067.aqpb067dcla%type;
    --lc_ncla aqpb067.aqpb067ncla%type;
    lc_mcob aqpb067.aqpb067mcob%type;
  
    lc_mpre aqpb067.aqpb067mpre%type;
  
    lc_fvenuc date;
    lc_fvenup date;
    lc_ncuopg number;
  
    lc_gas  number(16, 2);
    lc_mor  number(16, 2);
    lc_int  number(16, 2);
    lc_cuo  number(16, 2);
    lc_icv  number(16, 2);
    lc_pen  number(16, 2);
    lc_tsum number(16, 2);
  
    lc_lrep  aqpb067.aqpb067lrep%type;
    lc_nrep  aqpb067.aqpb067nrep%type;
    lc_frep  aqpb067.aqpb067frep%type;
    lc_tabla varchar2(50);
    lc_peri2 number;
    lc_ncuo2 number;
    lc_fpri  date;
    lc_fult  date;
  
    lc_calif0a aqpb067.aqpb067cnoma%type;
    lc_calif1a aqpb067.aqpb067ccppa%type;
    lc_calif2a aqpb067.aqpb067cdefa%type;
    lc_calif3a aqpb067.aqpb067cduda%type;
    lc_calif4a aqpb067.aqpb067cpera%type;
  
    lc_ciuu1 aqpb067.aqpb067ciiuori%type;
    lc_dciu1 aqpb067.aqpb067actnomori%type;
  
    lc_ufpag1 date;
    ln_cta    number(9);
    ln_ope    number(9);
  
    lb_flag_vig  char(1);
    lb_fmax_anu  date;
    lc_fecha_caj date;
    --lb_flag_back number(3);
    lc_nro_mes   number(3);
    lc_fini_cof  date;
    lc_ffin_cof  date;
    lc_aostat    number(2);
  
    lb_550      number(3);
    lb_fec_550  date;
    lb_mda      number(4);
    lb_max_sbop number(3);
    lb_cont_del number(3);
  
    ld_fcest date;
    lc_tea number;
--2021.10.01 dcastro
    lc_gas1  number(16, 2);
    lc_mor1  number(16, 2);
    lc_int1  number(16, 2);
    --lc_cuo1  number(16, 2);
    lc_icv1  number(16, 2);
    lc_pen1  number(16, 2);
    lc_tsum1 number(16, 2);
    
    lc_tmor number;
    lc_trep number;
    lc_fmant date;
    --ld_feci1 date;
---2021.10.01 dcastro

  
    cursor reporte_fae_mype1 is
    -- FAE 1: Vigentes
      select /*+index(T SYS_C00977166) index(X SYS_C00982110)*/t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             substr(r.scrub, 1, 4) dcon,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             r.scsdo,
             0 estado
      
        from fsd010 t,
             FSD011 r, ---> a fsh012
             fsr008 x,
             --fsr011 f, ---> quita
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      -- FSD010 // FSD011
       r.pgcod = t.pgcod
       and r.scmod = t.aomod
      --and r.scsuc = t.aosuc -- jrodriguej 28.06.2021
       and r.scmda = t.aomda
       and r.scpap = t.aopap
       and r.sccta = t.aocta
       and r.scoper = t.aooper
      --and r.scsbop = t.aosbop
      --and r.sctope = t.aotope
      
      --and t.aomod <> 419
       and t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat <> 99 
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      -- and g.aqpb067btop = t.aotope
      
     
       and t.aosuc = pc_sucurs
      -- and (t.aomod <> 101 or t.aotope <> 354) -- jrodriguej 29.06.2021
       and (t.aomod, t.aotope) not in (select 101, 354 from dual) -- jrodriguej 29.06.2021
       
      union
      
      -- fae 1:CANCELADOS
      select /*+index(T SYS_C00977166) index(X SYS_C00982110)*/t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             --substr(r.scrub, 1, 4) dcon,
             null     dcon, -- Obtener último estado contable
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0        scsdo,
             99       estado
      
        from fsd010 t,
             ---FSD011 r, ---> a fsh012
             fsr008 x,
             --fsr011 f,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat = 99
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      --and g.aqpb067btop = t.aotope
      
     
       and t.aosuc = pc_sucurs
      --and (t.aomod <> 101 or t.aotope <> 354)  -- jrodriguej 29.06.2021
       and (t.aomod, t.aotope) not in (select 101, 354 from dual) -- jrodriguej 29.06.2021
      
      
      union
      
      -- Vigentes del FAE 2
      select /*+index(T SYS_C00977166) index(X SYS_C00982110)*/t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             substr(r.scrub, 1, 4) dcon,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             r.scsdo,
             0 estado
      
        from fsd010 t,
             FSD011 r, ---> a fsh012
             fsr008 x,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      -- FSD010 // FSD011
       r.pgcod = t.pgcod
       and r.scmod = t.aomod
      --and r.scsuc = t.aosuc -- jrodriguej 28.06.2021
       and r.scmda = t.aomda
       and r.scpap = t.aopap
       and r.sccta = t.aocta
       and r.scoper = t.aooper
      --and r.scsbop = t.aosbop
      -- and r.sctope = t.aotope
      
      --and t.aomod <> 419
       and t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat <> 99
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      -- and g.aqpb067btop = t.aotope
      
       and t.aosuc = pc_sucurs
       and t.aomod = 101
       and t.aotope = 354
      
      
      union
      
      -- Cancelados del FAE 2
      select /*+index(T SYS_C00977166) index(X SYS_C00982110)*/t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             --substr(r.scrub, 1, 4) dcon,
             null     dcon,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0        scsdo,
             99       estado
      
        from fsd010 t,
             --FSD011 r, ---> a fsh012
             fsr008 x,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat = 99
      
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      --and g.aqpb067btop = t.aotope
      
       and t.aosuc = pc_sucurs
       and t.aomod = 101
       and t.aotope = 354
       
      ;
  
    cursor reporte_fae_mype1_his is
    -- FAE 1: Vigentes
      select /*+index(X SYS_C00982110) index(T FSD01009) index(a aqpb070a2)*/ t.pgcod,    --24.10.2022
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             --substr(r.bcrubr, 1, 4) dcon,
             substr(r.aqpb070arubr, 1, 4) dcon,
             t.aofval,
             t.aofvto,
             t.aofe99,
             r.aqpb070aprod aostat, --t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             nvl(r.aqpb070asdmn * -1,0) scsdo, --(r.bcsdmn * -1) scsdo
             0 estado
        from fsd010   t
        left join aqpb070a r on  r.aqpb070ausur = pn_usuario
      --and r.aqpb070atabla = 'FAE1'
       and r.aqpb070aemp = t.pgcod
      --and r.aqpb070arubr = h.rubro -- jrodriguej 28.06.2021
       and r.aqpb070amod = t.aomod
      --and r.aqpb070asuc = t.aosuc -- jrodriguej 28.06.2021
       and r.aqpb070amda = t.aomda
       and r.aqpb070apap = t.aopap
       and r.aqpb070acta = t.aocta
       and r.aqpb070aoper = t.aooper
      ----and r.bcsbop = t.aosbop
      --and r.aqpb070atop = t.aotope
      --and r.bcfech = pn_ffin   
        join    fsr008   x on t.pgcod = x.pgcod
                and t.aocta = x.ctnro
                and x.ttcod = 1
                and x.cttfir = 'T'
        join  aqpb067b g on g.aqpb067bcod = t.pgcod
              and g.aqpb067bmod = t.aomod
              --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
              and g.aqpb067bmda = t.aomda
              and g.aqpb067bpap = t.aopap
              and g.aqpb067bcta = t.aocta
              and g.aqpb067bope = t.aooper
              --and g.aqpb067bsbo = t.aosbop
              --and g.aqpb067btop = t.aotope
             -- fsr011 f,
             -- fsd014 h, -- jrodriguej 28.06.2021
             /*(select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g*/
       where g.aqpb067bfec <= pn_ffin
                 and g.aqpb067best <> 'D'
      
      
      -- FSD010 // FSD011
           
      
      --and t.aomod <> 419
       and t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144, 200))
       and t.aofval <= pn_ffin
       and (t.aostat <> 99 or (t.aostat = 99 and t.aofe99 > pn_ffin))
      
      -- FSD010 // FSR008
       --and 
      
      
      -- AQPB067B // FSD010 
      -- and 
      
       and t.aosuc = pc_sucurs
      -- and (t.aomod <> 101 or t.aotope <> 354)  -- jrodriguej 29.06.2021
       and (t.aomod, t.aotope) not in (select 101, 354 from dual) -- jrodriguej 29.06.2021
      
      union
      
      -- FAE 1:CANCELADOS
      select /*+index(X SYS_C00982110) index(T SYS_C00977166)*/ t.pgcod,       --24.10.2022
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             --substr(r.scrub, 1, 4) dcon,
             null     dcon, -- Obtener último estado contable
             t.aofval,
             t.aofvto,
             t.aofe99,
             99       aostat, --t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0        scsdo,
             99       estado
      
        from fsd010 t,
             ---FSD011 r, ---> a fsh012
             fsr008 x,
             -- fsr011 f,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      -- FSD010 // FSD011
      --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144, 200))
       and t.aofval <= pn_ffin
       and t.aostat = 99
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
      
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      --and g.aqpb067btop = t.aotope
     
       and t.aosuc = pc_sucurs
      --and (t.aomod <> 101 or t.aotope <> 354) -- jrodriguej 29.06.2021
       and (t.aomod, t.aotope) not in (select 101, 354 from dual) -- jrodriguej 29.06.2021
       
      
      union
      
      -- FAE 2: VIGENTES
      select /*+index(X SYS_C00982110) index(T FSD01012)*/t.pgcod,           --24.10.2022
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             --substr(r.bcrubr, 1, 4) dcon,
             substr(r.aqpb070arubr, 1, 4) dcon,
             t.aofval,
             t.aofvto,
             t.aofe99,
             r.aqpb070aprod aostat, --t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             nvl(r.aqpb070asdmn * -1,0) scsdo, --(r.bcsdmn * -1) scsdo
             0 estado
        from fsd010   t
        left join aqpb070a r on  r.aqpb070ausur = pn_usuario
      --and r.aqpb070atabla = 'FAE1'
       and r.aqpb070aemp = t.pgcod
      --and r.aqpb070arubr = h.rubro -- jrodriguej 28.06.2021
       and r.aqpb070amod = t.aomod
      --and r.aqpb070asuc = t.aosuc -- jrodriguej 28.06.2021
       and r.aqpb070amda = t.aomda
       and r.aqpb070apap = t.aopap
       and r.aqpb070acta = t.aocta
       and r.aqpb070aoper = t.aooper
      ----and r.bcsbop = t.aosbop
      --and r.aqpb070atop = t.aotope
      --and r.bcfech = pn_ffin   
        join    fsr008   x on t.pgcod = x.pgcod
                and t.aocta = x.ctnro
                and x.ttcod = 1
                and x.cttfir = 'T'
        join  aqpb067b g on g.aqpb067bcod = t.pgcod
              and g.aqpb067bmod = t.aomod
              --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
              and g.aqpb067bmda = t.aomda
              and g.aqpb067bpap = t.aopap
              and g.aqpb067bcta = t.aocta
              and g.aqpb067bope = t.aooper
              --and g.aqpb067bsbo = t.aosbop
              --and g.aqpb067btop = t.aotope
             -- fsr011 f,
             -- fsd014 h, -- jrodriguej 28.06.2021
             /*(select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g*/
       where
            g.aqpb067bfec <= pn_ffin
                 and g.aqpb067best <> 'D'
      -- FSD010 // FSD011
     
      --and t.aomod <> 419
       and t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144, 200))
       and t.aofval <= pn_ffin
       and (t.aostat <> 99 or (t.aostat = 99 and t.aofe99 > pn_ffin))
      
      -- FSD010 // FSR008
      
      -- AQPB067B // FSD010 
       
      
       and t.aosuc = pc_sucurs
       and t.aomod = 101
       and t.aotope = 354
      
      
      union
      
      -- FAE 2:CANCELADOS
      select /*+index(X SYS_C00982110) index(T SYS_C00977166)*/t.pgcod,         --24.10.2022
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             --substr(r.scrub, 1, 4) dcon,
             null     dcon, -- Obtener último estado contable
             t.aofval,
             t.aofvto,
             t.aofe99,
             99       aostat, --t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0        scsdo,
             99       estado
             
      
        from fsd010 t,
             ---FSD011 r, ---> a fsh012
             fsr008 x,
             --fsr011 f,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      -- FSD010 // FSD011
      --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144, 200))
       and t.aofval <= pn_ffin
       and t.aostat = 99
      
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
      
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      -- FSD010 // FSR011  
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      -- and g.aqpb067btop = t.aotope
      
      -- FILTRO FAE 2
      
       and t.aosuc = pc_sucurs
       and t.aomod = 101
       and t.aotope = 354
       
      
      ;
  
    cursor reporte_fae_mype1_200 is
    -- FAE 1: Vigentes
      select /*+index(X SYS_C00982110) index(T SYS_C00977166)*/ t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0 estado
      
        from fsd010 t,
             fsr008 x,
             --fsr011 f, ---> quita
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      -- FSD010 // FSD011
       t.pgcod = 1
       and t.aomod in (200,33)
       and t.aofval <= pn_ffin
       --and t.aostat <> 99
       and (t.aostat <> 99 or (t.aostat = 99 and t.aofe99 > pn_ffin))
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
      --and g.aqpb067bmod = t.aomod -- jrodriguej 30.07.2021
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      -- and g.aqpb067btop = t.aotope
      
      -- FILTRO FAE 1  
       and t.aosuc = pc_sucurs
       and (t.aomod, t.aotope) not in (select 200, 354 from dual) -- jrodriguej 29.06.2021
       
      
      union
      
      -- fae 1:CANCELADOS
      select /*+index(X SYS_C00982110) index(T SYS_C00977166)*/t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             99 estado
      
        from fsd010 t,
             fsr008 x,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where t.pgcod = 1
         and t.aomod in (200,33)
         and t.aofval <= pn_ffin
         and t.aostat = 99
         and not exists
       (select 'x'
                from fsd010 l
               where l.pgcod = t.pgcod
                 and l.aomda = t.aomda
                 and l.aopap = t.aopap
                 and l.aocta = t.aocta
                 and l.aooper = t.aooper
                 and l.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144))
                 and l.aostat <> 99)
         and t.aofe99 =
             (select max(h.aofe99)
                from fsd010 h
               where h.pgcod = t.pgcod
                    --and h.aomod = t.aomod
                    --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
                 and h.aomda = t.aomda
                 and h.aopap = t.aopap
                 and h.aocta = t.aocta
                 and h.aooper = t.aooper
                    --and r.scsbop = t.aosbop
                    --and h.aotope = t.aotope
                 and h.aofe99 <= pn_ffin
                    --and h.aomod <> 419
                 and h.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144)))
            -- FSD010 // FSR008
         and t.pgcod = x.pgcod
         and t.aocta = x.ctnro
         and x.ttcod = 1
         and x.cttfir = 'T'
            -- AQPB067B // FSD010 
         and g.aqpb067bcod = t.pgcod
            --and g.aqpb067bmod = t.aomod -- jrodriguej 30.07.2021
            --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
         and g.aqpb067bmda = t.aomda
         and g.aqpb067bpap = t.aopap
         and g.aqpb067bcta = t.aocta
         and g.aqpb067bope = t.aooper
            --and g.aqpb067bsbo = t.aosbop
            --and g.aqpb067btop = t.aotope
            
         and t.aosuc = pc_sucurs
         and (t.aomod, t.aotope) not in (select 200, 354 from dual) -- jrodriguej 29.06.2021
      
      
      union
      
      -- Vigentes del FAE 2
      select /*+index(X SYS_C00982110) index(T SYS_C00977166)*/t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0 estado
      
        from fsd010 t,
             fsr008 x,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where t.pgcod = 1
         and t.aomod in( 200,33)
         and t.aofval <= pn_ffin
         --and t.aostat <> 99
         and (t.aostat <> 99 or (t.aostat = 99 and t.aofe99 > pn_ffin))
            -- FSD010 // FSR008
         and t.pgcod = x.pgcod
         and t.aocta = x.ctnro
         and x.ttcod = 1
         and x.cttfir = 'T'
            -- AQPB067B // FSD010 
         and g.aqpb067bcod = t.pgcod
            --and g.aqpb067bmod = t.aomod -- jrodriguej 30.07.2021
            --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
         and g.aqpb067bmda = t.aomda
         and g.aqpb067bpap = t.aopap
         and g.aqpb067bcta = t.aocta
         and g.aqpb067bope = t.aooper
            --and g.aqpb067bsbo = t.aosbop
            -- and g.aqpb067btop = t.aotope
            
         and t.aosuc = pc_sucurs
            --and t.aomod = 101
         and t.aotope = 354
      
      
      union
      
      -- Cancelados del FAE 2
      select /*+index(X SYS_C00982110) index(T SYS_C00977166)*/t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             99 estado
      
        from fsd010 t,
             fsr008 x,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where t.pgcod = 1
         and t.aomod in (200,33)
         and t.aofval <= pn_ffin
         and t.aostat = 99
            
         and not exists (select 'x'
                from fsd010 l
               where l.pgcod = t.pgcod
                 and l.aomda = t.aomda
                 and l.aopap = t.aopap
                 and l.aocta = t.aocta
                 and l.aooper = t.aooper
                 and l.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144))
                 and l.aostat <> 99)
         and t.aofe99 =
             (select max(h.aofe99)
                from fsd010 h
               where h.pgcod = t.pgcod
                    --and h.aomod = t.aomod
                    --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
                 and h.aomda = t.aomda
                 and h.aopap = t.aopap
                 and h.aocta = t.aocta
                 and h.aooper = t.aooper
                    --and r.scsbop = t.aosbop
                    --and h.aotope = t.aotope
                 and h.aofe99 <= pn_ffin
                    --and h.aomod <> 419
                 and h.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144)))
            
            -- FSD010 // FSR008
         and t.pgcod = x.pgcod
         and t.aocta = x.ctnro
         and x.ttcod = 1
         and x.cttfir = 'T'
            -- AQPB067B // FSD010 
         and g.aqpb067bcod = t.pgcod
            --and g.aqpb067bmod = t.aomod -- jrodriguej 30.07.2021
            --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
         and g.aqpb067bmda = t.aomda
         and g.aqpb067bpap = t.aopap
         and g.aqpb067bcta = t.aocta
         and g.aqpb067bope = t.aooper
            --and g.aqpb067bsbo = t.aosbop
            --and g.aqpb067btop = t.aotope
            
         and t.aosuc = pc_sucurs
            --and t.aomod = 101
         and t.aotope = 354
      
      ;
  
    cursor verificar_fae_mype is
      select x.aqpb067usur usur,
             x.aqpb067aosuc suc,
             x.aqpb067aocta cta,
             x.aqpb067aooper oper,
             count(*) total
        from aqpb067 x
       where x.aqpb067usur = pn_usuario
         and x.aqpb067aosuc = pc_sucurs
       group by x.aqpb067usur,
                x.aqpb067aosuc,
                x.aqpb067aocta,
                x.aqpb067aooper
      having count(*) > 1;
  
  begin
  
    -- 1. ESF RUC CAJA
    lx_esf := '20100209641';
  
    -- 23. Fecha clasificación SBS 
    select to_date(t.tpnro, 'DDMMYY')
      into lc_fecha_rcc
      from fst098 t
     where t.pgcod = 1
       and t.tpcod = 7647
       and t.tpcorr = 12;
  
    -- 1. Nro meses RCC
    begin
      select x.tp1nro1
        into lc_nro_mes
        from fst198 x
       where x.TP1COD = 1
         and x.TP1COD1 = 11144
         and x.TP1CORR1 = 10
         and x.tp1corr2 = 2
         and x.tp1corr3 = 4;
    exception
      when others then
        lc_nro_mes := 1;
    end;
  
    if pn_ffin <= lc_fecha_rcc then
      lc_fecha_rcc := last_day(add_months(trunc(pn_ffin), -1 * lc_nro_mes));
    end if;
  
    -- Fecha actual
    select t.pgfape into lc_fecha from fst017 t where t.pgcod = 1;
    
    --fecha mes anterior
    lc_fmant := trunc(pn_ffin) - (to_number(to_char(pn_ffin, 'DD')));
  
    if lc_fecha = pn_ffin then
    
      begin
      
        -- Inserción de datos para el reporte por usuario: fecha actual
        for i in reporte_fae_mype1() loop
        
          ln_cta := i.aocta;
          ln_ope := i.aooper;
        
          -- 2. Número de Contrato SAP (código proporcionado por Cofide)
          begin
            -- Call the procedure                                                               
          
            pq_cr_reporte_fondos.sp_plantilla_faemype_v2(pn_cod   => i.pgcod,
                                                         pn_mod   => i.aomod,
                                                         pn_suc   => i.aosuc,
                                                         pn_mda   => i.aomda,
                                                         pn_pap   => i.aopap,
                                                         pn_cta   => i.aocta,
                                                         pn_ope   => i.aooper,
                                                         pn_sbo   => i.aosbop,
                                                         pn_top   => i.aotope,
                                                         pn_fecha => pn_ffin,
                                                         pn_csap  => lc_csap,
                                                         pn_fdes  => lc_fdes,
                                                         pn_mon   => lc_mon,
                                                         pn_ncuo  => lc_ncuo,
                                                         pn_peri  => lc_peri,
                                                         pn_pcob  => lc_pcob,
                                                         pn_fini  => lc_fini_cof,
                                                         pn_ffin  => lc_ffin_cof,
                                                         pn_ciuu  => lc_ciuu1,
                                                         pn_dciu  => lc_dciu1,
                                                         pn_ncer  => lc_ncer,
                                                         pn_ccob  => lc_ccob,  
                                                         pn_cren  => lc_cren,  
                                                         pn_cobr  => lc_cobr,  
                                                         pn_chon  => lc_chon,  
                                                         pn_codi  => lc_codi,  
                                                         pn_crec  => lc_crec  
                                                         );
          exception
            when others then
              lc_csap     := null;
              lc_fdes     := null;
              lc_mon      := null;
              lc_ncuo     := null;
              lc_peri     := null;
              lc_pcob     := null;
              lc_fini_cof := null;
              lc_ffin_cof := null;
              lc_ncer  := null;
              lc_ccob  := null; 
              lc_cren  := null;  
              lc_cobr  := null;
              lc_chon  := null;
              lc_codi  := null;
              lc_crec  := null;
          end;
        
          -- 8. Saldo Insoluto/ Capital
          begin
            --lc_sdoi := pq_cr_reporte_fondos_p3.fn_obtener_saldoi(i.pgcod,
            lc_sdoi := pq_cr_reporte_fondos_p3.fn_obtener_saldo_actual(i.pgcod,
                                                                       i.aomod,
                                                                       i.aosuc,
                                                                       i.aomda,
                                                                       i.aopap,
                                                                       i.aocta,
                                                                       i.aooper,
                                                                       i.aosbop,
                                                                       i.aotope,
                                                                       pn_ffin,
                                                                       pn_usuario);
          
          exception
            when others then
              lc_sdoi := 0;
          end;

 
              
          -- 8. Saldo Insoluto Real
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
          -- Saldo Insoluto Real
          begin
            --- jrodriguej 03.03.2021                                           
          
            pq_cr_reporte_fondos.sp_obtener_sald_insol2_h(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_indi  => 2, -- FAE
                                                           pn_stat  => i.estado,
                                                           pn_sald  => lc_sdoins);
          
          exception
            when others then
              lc_sdoins := 0;
          end;
          
          -- Saldo Insoluto Mes Anterior
          
          begin                                           
          
            pq_cr_reporte_fondos.sp_obtener_sald_insol2_h99(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_fecha => lc_fmant,
                                                           pn_indi  => 2, -- FAE
                                                           pn_stat  => i.estado,
                                                           pn_sald  => lc_sdoins_mesant);
          
          exception
            when others then
              lc_sdoins_mesant := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                      
        
        -- 9. Monto prepago
        /* 2021.10.01 dcastro se comento
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_mprepago(pn_cod   => i.pgcod,
                                                        pn_mod   => i.aomod,
                                                        pn_suc   => i.aosuc,
                                                        pn_mda   => i.aomda,
                                                        pn_pap   => i.aopap,
                                                        pn_cta   => i.aocta,
                                                        pn_ope   => i.aooper,
                                                        pn_sbo   => i.aosbop,
                                                        pn_top   => i.aotope,
                                                        pn_fecha => pn_ffin,
                                                        pn_monto => lc_mpre);
          exception
            when others then
              lc_mpre := 0;
          end;
        
        */
        --se cambio 2021.10.01
                
          begin
          pq_cr_reporte_fondos_p200.sp_distribuc_pago_mes(pn_cod => i.pgcod,
                                                          pn_mod => i.aomod,
                                                          pn_suc => i.aosuc,
                                                          pn_mda => i.aomda,
                                                          pn_pap => i.aopap,
                                                          pn_cta => i.aocta,
                                                          pn_ope => i.aooper,
                                                          pn_sbo => i.aosbop,
                                                          pn_top => i.aotope,
                                                          pn_fecha => pn_ffin,
                                                          pn_tsum => lc_tsum1,
                                                          pn_gas => lc_gas1,
                                                          pn_mor => lc_mor1,
                                                          pn_int => lc_int1,
                                                          pn_cuo => lc_mpre,
                                                          pn_icv => lc_icv1,
                                                          pn_pen => lc_pen1);

          exception
            when others then
              lc_mpre := 0;
        end;
        
        if lc_mpre > lc_sdoins_mesant then
          lc_mpre := lc_sdoins_mesant;
        end if;
        
    /*    if lc_mpre = 0 then
          
          ld_feci1 :=  to_date(to_char(pn_ffin, 'yyyymm') || '01', 'yyyymmdd');
         
          begin

            pq_cr_reporte_fondos.sp_cr_fsh016_550(pn_emp => i.pgcod,
                                                  pn_mod => i.aomod,
                                                  pn_suc => i.aosuc,
                                                  pn_mda => i.aomda,
                                                  pn_pap => i.aopap,
                                                  pn_cta => i.aocta,
                                                  pn_ope => i.aooper,
                                                  pn_sbo => i.aosbop,
                                                  pn_top => i.aotope,
                                                  pd_fpp => pn_ffin,
                                                  pd_fec => pn_ffin,
                                                  pd_fei => ld_feci1,
                                                  pc_ind => null,
                                                  pv_cap => lc_mpre,
                                                  pv_int => lc_int1, 
                                                  pv_icv => lc_icv1,
                                                  pv_mor => lc_mor1,
                                                  pv_seg => lc_gas1,
                                                  pv_rub => lc_icv1,
                                                  pv_gas => lc_gas1);
          end;

        
        end if;
        */
        -- 2021.10.01 dcastro
        
        
          -- 10. Distribución clasificación de riesgo enviado por caja
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_calf_caja(pn_cod   => i.pgcod,
                                                         pn_mod   => i.aomod,
                                                         pn_suc   => i.aosuc,
                                                         pn_mda   => i.aomda,
                                                         pn_pap   => i.aopap,
                                                         pn_cta   => i.aocta,
                                                         pn_ope   => i.aooper,
                                                         pn_sbo   => i.aosbop,
                                                         pn_top   => i.aotope,
                                                         pn_est   => i.aostat,
                                                         pn_fecha => pn_ffin,
                                                         --pn_dcla => lc_dcla,
                                                         --pn_ncla => lc_ncla
                                                         pn_calif0a => lc_calif0a,
                                                         pn_calif1a => lc_calif1a,
                                                         pn_calif2a => lc_calif2a,
                                                         pn_calif3a => lc_calif3a,
                                                         pn_calif4a => lc_calif4a,
                                                         pn_deccaj  => lc_fecha_caj);
          exception
            when others then
              lc_calif0a   := 100;
              lc_calif1a   := 0;
              lc_calif2a   := 0;
              lc_calif3a   := 0;
              lc_calif4a   := 0;
              lc_fecha_caj := null;
          end;
        
          -- 13. Región
          -- 13.1 Región - Nombre
          -- 14. Zona
          -- 14.1 Zona - Nombre
          -- 15. Agencia (Sucursal)
          -- 15.1 Agencia(Sucursal) - Nombre
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => i.aosuc,
                                                    pn_regi => lc_regi,
                                                    pn_zona => lc_zona,
                                                    pn_nsuc => lc_nsuc,
                                                    pn_nzon => lc_nzon,
                                                    pn_nreg => lc_nreg);
          exception
            when others then
              lc_regi := 0;
              lc_zona := 0;
              lc_nsuc := '';
              lc_nzon := '';
              lc_nreg := '';
          end;
        
          -- 16. Analista
          begin
            lc_ases := fn_analista_credito(i.aomod,
                                           i.aosuc,
                                           i.aomda,
                                           i.aopap,
                                           i.aocta,
                                           i.aooper,
                                           i.aosbop,
                                           i.aotope);
          exception
            when others then
              lc_ases := '';
          end;
        
          -- 21. Razón social
          begin
            lc_perjur := pq_cr_reporte_fondos_p3.fn_obtener_perjur(i.pepais,
                                                                   i.petdoc,
                                                                   i.pendoc);
          exception
            when others then
              lc_perjur := '';
          end;
        
          -- 22. Apellidos y nombres del cliente 
          begin
            lc_pernat := pq_cr_reporte_fondos_p3.fn_obtener_pernat(i.pepais,
                                                                   i.petdoc,
                                                                   i.pendoc);
          exception
            when others then
              lc_pernat := '';
          end;
        
          -- 23. ESTADO DEL CREDITO
          begin
            lc_statd := pq_cr_reporte_fondos_p3.fn_estado_desc(i.aostat);
          exception
            when others then
              lc_statd := '';
          end;
        
          -- 31. Monto de cobertura
          --lc_mcob := (lc_pcob * i.scsdo) * -1;
          begin
            --lc_mcob := (lc_pcob / 100 * lc_sdoi);
            lc_mcob := (lc_pcob / 100 * lc_sdoins);
          exception
            when others then
              lc_mcob := 0;
          end;
        
          -- 36. Fecha de último pago                                              
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_datos_ufecha(pn_cod   => i.pgcod,
                                                            pn_mod   => i.aomod,
                                                            pn_suc   => i.aosuc,
                                                            pn_mda   => i.aomda,
                                                            pn_pap   => i.aopap,
                                                            pn_cta   => i.aocta,
                                                            pn_ope   => i.aooper,
                                                            pn_sbo   => i.aosbop,
                                                            pn_top   => i.aotope,
                                                            pn_fecha => pn_ffin,
                                                            pn_fpagu => lc_fupag, -- Fecha de la última cuota pagada
                                                            pn_fvenu => lc_fvenup); -- Fecha de vencimiento de la última cuota pagada
          exception
            when others then
              lc_fupag  := null;
              lc_fvenup := null;
          end;
        
          -- 34. Nro. cuotas pendientes de pago
          begin
            pq_cr_reporte_fondos_p3.sp_fecha_ncuop(i.pgcod,
                                                   i.aomod,
                                                   i.aosuc,
                                                   i.aomda,
                                                   i.aopap,
                                                   i.aocta,
                                                   i.aooper,
                                                   i.aosbop,
                                                   i.aotope,
                                                   lc_fupag,
                                                   lc_ncuop, -- Nro de cuotas pendientes de pago
                                                   lc_ncuopg); -- Nro de cuotas ya pagadas
          exception
            when others then
              lc_ncuop  := 0;
              lc_ncuopg := 0;
          end;
        
          -- Fecha de vencimiento de la próxima cuota impaga
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_impaga(pn_cod    => i.pgcod,
                                                      pn_mod    => i.aomod,
                                                      pn_suc    => i.aosuc,
                                                      pn_mda    => i.aomda,
                                                      pn_pap    => i.aopap,
                                                      pn_cta    => i.aocta,
                                                      pn_ope    => i.aooper,
                                                      pn_sbo    => i.aosbop,
                                                      pn_top    => i.aotope,
                                                      pn_fecha  => pn_ffin,
                                                      pn_fvenuc => lc_fvenuc);
          exception
            when others then
              lc_fvenuc := null;
          end;
        
          -- 37. Días de atraso   
          begin
            lc_diat := fn_dias_atraso(pn_ffin, --fecha de proceso
                                      i.pgcod,
                                      i.aomod,
                                      i.aosuc,
                                      i.aomda,
                                      i.aopap,
                                      i.aocta,
                                      i.aooper,
                                      i.aosbop,
                                      i.aotope,
                                      i.aostat,
                                      i.aofvto);
          exception
            when others then
              lc_diat := 0;
          end;

          --dcastro 27092021          
          if i.aostat = 99 then  -- si el credito esta cancelados , dias atraso deben ser 0
            lc_diat := 0;
          end if;
          --dcastro 25092021
            
          -- 39. Calificación Normal (en números de 100 a 0)
          -- 40. Calificación CPP (en números de 100 a 0)  
          -- 41. Calificación Deficiente (en números de 100 a 0)
          -- 42. Calificación Dudoso (en números de 100 a 0)
          -- 43. Calificación Perdida (en números de 100 a 0                       
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_calf(pn_tdoc   => i.petdoc,
                                                    pn_ndoc   => i.pendoc,
                                                    pn_fech   => pn_ffin,
                                                    pn_calif0 => lc_calif0,
                                                    pn_calif1 => lc_calif1,
                                                    pn_calif2 => lc_calif2,
                                                    pn_calif3 => lc_calif3,
                                                    pn_calif4 => lc_calif4,
                                                    pn_csbs   => lc_csbs);
          exception
            when others then
              lc_calif0 := 100;
              lc_calif1 := 0;
              lc_calif2 := 0;
              lc_calif3 := 0;
              lc_calif4 := 0;
              lc_csbs   := 0;
          end;
        
          -- 45. CIUU
          -- 46. Actividad económica
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_ciiu_codigo4(p_pais   => i.pepais,
                                                    p_petdoc => i.petdoc,
                                                    p_pendoc => i.pendoc,
                                                    p_ciuu4  => lc_ciiu4,
                                                    p_ciuu6  => lc_ciiu6);
          exception
            when others then
              lc_ciiu4 := 0;
              lc_ciiu6 := 0;
          end;
        
          -- 10.2 Descripción de CIUU 
          begin
            -- Call the procedure                                    
            if lc_ciiu4 <> 0 then
              pq_cr_reporte_fondos_p3.sp_obtener_ciuu(pn_cciu => lc_ciiu6,
                                                      pn_dciu => lc_acti);
            else
              if lc_ciiu6 <> 0 then
                lc_ciiu4 := to_number(substr(to_char(lc_ciiu6), 1, 4));
              else
                lc_ciiu4 := 0;
              end if;
              lc_acti := '';
            end if;
          
          exception
            when others then
              lc_acti := '';
          end;
        
          -- 35. Fecha de cancelación de última cuota pagado
          begin
            lc_ufpag1 := pq_cr_reporte_fondos_p3.fn_fecha_upago(i.pgcod,
                                                                i.aomod,
                                                                i.aosuc,
                                                                i.aomda,
                                                                i.aopap,
                                                                i.aocta,
                                                                i.aooper,
                                                                i.aosbop,
                                                                i.aotope,
                                                                pn_ffin);
          exception
            when others then
              lc_ufpag1 := null;
          end;
        
          -- 47. Tipo crédito SBS
          begin
            -- Call the procedure                                                 
            pq_cr_reporte_fondos_p3.sp_tipo_credito_sbs_vig(pn_cod     => i.pgcod,
                                                            pn_mod     => i.aomod,
                                                            pn_suc     => i.aosuc,
                                                            pn_mda     => i.aomda,
                                                            pn_pap     => i.aopap,
                                                            pn_cta     => i.aocta,
                                                            pn_ope     => i.aooper,
                                                            pn_sbo     => i.aosbop,
                                                            pn_top     => i.aotope,
                                                            pn_fecha   => pn_ffin,
                                                            pn_usuario => pn_usuario,
                                                            pn_ntipo   => lc_pcre,
                                                            pn_nconc   => lc_ncre);
          exception
            when others then
              lc_pcre := 0;
              lc_ncre := '';
          end;
        
          -- 24. Estado contable
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_scond_c(pn_cod   => i.pgcod,
                                                       pn_mod   => i.aomod,
                                                       pn_suc   => i.aosuc,
                                                       pn_mda   => i.aomda,
                                                       pn_pap   => i.aopap,
                                                       pn_cta   => i.aocta,
                                                       pn_ope   => i.aooper,
                                                       pn_sbo   => i.aosbop,
                                                       pn_top   => i.aotope,
                                                       pn_dcon  => i.dcon,
                                                       pn_est   => i.aostat,
                                                       pn_ufech => lc_ufpag1,
                                                       pn_rubr  => lc_dcon,
                                                       pn_resp  => lc_scon);
          exception
            when others then
              lc_dcon := '';
              lc_scon := '';
          end;
        
          -- Obtención situación contable
          --lc_dest := i.dcon;
          --lc_lest := pq_cr_reporte_fondos_p3.fn_obtener_scond(lc_dest);                  
          lc_dest := null;
          lc_lest := null;
        
          begin
            if i.aomda = 0 then
              lx_mda := 'PEN';
            else
              lx_mda := 'USD';
            end if;
          end;
        
          -- dias atraso
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_atraso_u(pn_cod   => i.pgcod,
                                                        pn_mod   => i.aomod,
                                                        pn_suc   => i.aosuc,
                                                        pn_mda   => i.aomda,
                                                        pn_pap   => i.aopap,
                                                        pn_cta   => i.aocta,
                                                        pn_ope   => i.aooper,
                                                        pn_sbo   => i.aosbop,
                                                        pn_top   => i.aotope,
                                                        pn_fecha => pn_ffin,
                                                        pn_diat  => lx_diat);
          exception
            when others then
              lx_diat := 0;
          end;
        
          -- Distribución de pago
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_distribuc_pago(pn_cod   => i.pgcod,
                                                      pn_mod   => i.aomod,
                                                      pn_suc   => i.aosuc,
                                                      pn_mda   => i.aomda,
                                                      pn_pap   => i.aopap,
                                                      pn_cta   => i.aocta,
                                                      pn_ope   => i.aooper,
                                                      pn_sbo   => i.aosbop,
                                                      pn_top   => i.aotope,
                                                      pn_fecha => pn_ffin,
                                                      pn_tsum  => lc_tsum,
                                                      pn_gas   => lc_gas,
                                                      pn_mor   => lc_mor,
                                                      pn_int   => lc_int,
                                                      pn_cuo   => lc_cuo,
                                                      pn_icv   => lc_icv,
                                                      pn_pen   => lc_pen);
          exception
            when others then
            
              lc_tsum := 0;
              lc_gas  := 0;
              lc_mor  := 0;
              lc_int  := 0;
              lc_cuo  := 0;
              lc_icv  := 0;
              lc_pen  := 0;
          end;
        
          -- Distribución de pago
          /*
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_distribuc_pago_acum(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tsum  => lc_tsum,
                                                           pn_gas   => lc_gas,
                                                           pn_mor   => lc_mor,
                                                           pn_int   => lc_int,
                                                           pn_cuo   => lc_cuo,
                                                           pn_icv   => lc_icv,
                                                           pn_pen   => lc_pen);
          
          exception
            when others then
            
              lc_tsum := 0;
              lc_gas  := 0;
              lc_mor  := 0;
              lc_int  := 0;
              lc_cuo  := 0;
              lc_icv  := 0;
              lc_pen  := 0;
          end; 
          */
        
          -- '53. Flag de re reprogramación';
          -- '54. Número de reprogramaciones';
          -- '55. Fecha de re reprogramación';
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_repro_dato_jaqa400(pn_cod   => i.pgcod,
                                                   pn_cta   => i.aocta,
                                                   pn_ope   => i.aooper,
                                                   pn_fecha => pn_ffin,
                                                   pn_flag  => lc_lrep,
                                                   pn_nrep  => lc_nrep,
                                                   pn_fech  => lc_frep,
                                                   pn_tabla => lc_tabla,
                                                   
                                                   pn_peri => lc_peri2,
                                                   pn_ncuo => lc_ncuo2,
                                                   pn_fpri => lc_fpri,
                                                   pn_fult => lc_fult);
          exception
            when others then
            
              lc_lrep  := 'NO';
              lc_nrep  := 0;
              lc_frep  := null;
              lc_tabla := '';
              lc_peri2 := 0;
              lc_ncuo2 := 0;
              lc_fpri  := null;
              lc_fult  := null;
          end;
        
          --if i.aostat = 99 then
          --  lc_sdoi := 0;
          --end if;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_rubr   => 9300082010000,
                                                           pd_fecha => pn_ffin,
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr  => ln_mhonr,
                                                           pd_fhonr  => ld_fhonr,
                                                           pn_sdohon => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon := 0;
              
          end; 
          --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,                                                           
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_actual(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tea);
          exception
            when others then
              lc_tea := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes repro
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_repro(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_trep);
          exception
            when others then
              lc_trep := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes moratorio
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tmor);
          exception
            when others then
              lc_tmor := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
        
          begin
            insert into aqpb067
              (aqpb067usur, -- Usuario
               aqpb067pgcod,
               aqpb067aomod,
               aqpb067aosuc, -- 15. Agencia (Sucursal)
               aqpb067aomda,
               aqpb067aopap,
               aqpb067aocta, -- 17. Nro. de cuenta
               aqpb067aooper, -- 18. Nro. de operación
               aqpb067aosbop,
               aqpb067aotope,
               aqpb067esf, -- 3. ESF
               aqpb067csap, -- 4. Número contrato SAP
               aqpb067nrop, -- 5.  Número Préstamo
               aqpb067fval, -- 6.  Fecha de Desembolso 
               
               aqpb067mda, -- 7.  Moneda
               aqpb067sdo, -- 8.  Saldo capital 
               aqpb067mpre, -- 9.  Monto Prepago 
               --aqpb067dcla, -- 10. Distribución clasificación de riesgo (Reportado por Caja al cierre de mes)
               --aqpb067ncla, -- 10.1. Concepto
               aqpb067cnoma, -- 10.a Calificación Normal (en números de 100 a 0), reportado por caja al cierre de mes
               aqpb067ccppa, -- 10.b Calificación CPP (en números de 100 a 0), reportado por caja al cierre de mes
               aqpb067cdefa, -- 10.c Calificación Deficiente (en números de 100 a 0), reportado por caja al cierre de mes
               aqpb067cduda, -- 10.d Calificación Dudoso (en números de 100 a 0), reportado por caja al cierre de mes
               aqpb067cpera, -- 10.e Calificación Perdida (en números de 100 a 0), reportado por caja al cierre de mes
               
               aqpb067dcon, -- 11. Situación contable 
               aqpb067ncon, -- 11.1. Concepto
               aqpb067diatc, -- 12. Días de atraso pago cuota 
               
               aqpb067reg, -- 13. Región
               aqpb067nreg, -- 13.1 Región - Nombre
               aqpb067zon, -- 14. Zona
               aqpb067nzon, -- 14.1 Zona - Nombre
               aqpb067nsuc, -- 15.1 Agencia(Sucursal) - Nombre
               aqpb067ase, -- 16. Analista
               aqpb067tdoc, -- 19. Tipo documento
               aqpb067ndoc, -- 20. Nro. de documento
               aqpb067razn, -- 21. Razón social
               aqpb067rnom, -- 22. Apellidos y nombres del cliente
               aqpb067estn, -- 23. Estado del crédito (vigente, cancelado)
               aqpb067lest, -- 24. Estado contable
               aqpb067cest, -- Concepto
               aqpb067dest, -- 25. Fecha de cambio de estado contable
               aqpb067mdes, -- 26. Monto desembolsado
               aqpb067mcof, -- 27. Monto ingresado a COFIDE (BI)
               aqpb067pper, -- 28. Nro. de cuotas ingresado a COFIDE (BI)
               aqpb067pgra, -- 29. Periodo de gracia ingresado a COFIDE (BI)
               aqpb067pcob, -- 30. % cobertura
               aqpb067mcob, -- 31. Monto de cobertura
               aqpb067fini, -- 32. Fecha inicio de crédito original
               aqpb067ffin, -- 33. Fecha fin de crédito original
               
               aqpb067fvenuc, -- 34. Fecha de vencimiento de la próxima cuota impaga
               aqpb067fvenup, -- 35. Fecha de vencimiento de última cuota pagada
               aqpb067ncuo, -- 36. Nro. cuotas pendientes de pago
               --aqpb067fcuo,    -- 37. Fecha de última cuota pagado
               aqpb067fupag, -- 38. Fecha de pago de última cuota pagada
               aqpb067ncupa, -- 39. NÚMERO DE CUOTAS PAGADAS
               aqpb067mcuop, -- 40. MONTO DE CUOTAS PAGADAS
               --aqpb067dpag,    -- 41. DISTRIBUCION PAGO REALIZADO
               
               aqpb067diat, -- 42. Días de atraso
               aqpb067fcla, -- 43. Fecha clasificación SBS
               aqpb067cnom, -- 44. Calificación Normal (en números de 100 a 0)
               aqpb067ccpp, -- 45. Calificación CPP (en números de 100 a 0)  
               aqpb067cdef, -- 46. Calificación Deficiente (en números de 100 a 0)
               aqpb067cdud, -- 47. Calificación Dudoso (en números de 100 a 0)
               aqpb067cper, -- 48. Calificación Perdida (en números de 100 a 0       
               aqpb067tasa, -- 49. Tasa de interés
               aqpb067ciuu, -- 50. CIUU
               aqpb067actn, -- 51. Actividad económica
               aqpb067tcre, -- 52. Tipo crédito SBS
               aqpb067ncre, -- 52.1 Tipo crédito SBS - Concepto
               aqpb067lrep, -- 53. Flag de re reprogramación
               aqpb067nrep, -- 54. Número de reprogramaciones
               aqpb067frep, -- 55. Fecha de re reprogramación
               aqpb067pfec, -- 56. Fecha de primera cuota de re reprogramación
               aqpb067ncuop, -- 57. Nro. de cuotas posterior a re reprogramación
               aqpb067pgrap, -- 58. Periodo de gracia posterior a re reprogramación
               aqpb067pfinp, -- 59. Fecha de fin de crédito posterior a re reprogramación
               
               aqpb067gas, -- 60. Seguros
               aqpb067mor, -- 61. Interés Moratorio
               aqpb067int, -- 62. Intereses
               aqpb067cuo, -- 63. Capital
               aqpb067icv, -- 64. Interés compensatorio
               aqpb067pen, -- 65. Penalidad
               
               aqpb067sdoins, -- 66. Saldo Insoluto 2
               aqpb067feccaj, -- Fecha de clasicifación caja
               
               aqpb067stat, --- FSD010 estado del crédito
               aqpb067fe99, ----FSD010 fecha de pago
               
               aqpb067ciiuori,
               aqpb067actnomori,
               
               aqpb067fcr,
               aqpb067hcr,
               aqpb067fproc,
               aqpb067mhonr,
               aqpb067fhonr,
               aqpb067chonr,
               aqpb067sdocap,
               aqpb067sdohon,
               aqpb067crehon,
               aqpb067tmor,
               aqpb067tcrepro,  
               aqpb067fcest,
               Aqpb067ncer,
               Aqpb067ccob,
               Aqpb067cren,
               Aqpb067cobr,
               Aqpb067chon,
               Aqpb067codi,
               Aqpb067crec)
            values
              (pn_usuario,
               i.pgcod,
               i.aomod,
               i.aosuc,
               i.aomda,
               i.aopap,
               i.aocta,
               i.aooper,
               i.aosbop,
               i.aotope,
               
               lx_esf, -- 3. ESF
               lc_csap, -- 4. Número contrato SAP
               i.prestamo, -- 5.  Número Préstamo
               lc_fdes, -- 6.  Fecha de Desembolso 
               lx_mda, -- 7.  Moneda
               lc_sdoi, -- 8.  Saldo capital cancelado 
               lc_mpre, -- 9.  Monto Prepago 
               
               --lc_dcla, -- 10. Distribución clasificación de riesgo 
               --lc_ncla, -- 10.1. Concepto
               lc_calif0a, -- 10.a Calificación Normal (en números de 100 a 0), reportado por caja al cierre de mes
               lc_calif1a, -- 10.b Calificación CPP (en números de 100 a 0), reportado por caja al cierre de mes
               lc_calif2a, -- 10.c Calificación Deficiente (en números de 100 a 0), reportado por caja al cierre de mes
               lc_calif3a, -- 10.d Calificación Dudoso (en números de 100 a 0), reportado por caja al cierre de mes
               lc_calif4a, -- 10.e Calificación Perdida (en números de 100 a 0), reportado por caja al cierre de mes
               
               substr(trim(lc_dcon), 1, 4), -- 11. Situación contable 
               
               substr(trim(lc_scon), 1, 20), -- 11.1. Concepto
               lx_diat, -- 12. Días de atraso pago cuota 
               
               lc_regi, -- 13. Región
               substr(trim(lc_nreg), 1, 30), -- 13.1 Región - Nombre
               lc_zona, -- 14. Zona
               substr(trim(lc_nzon), 1, 40), -- 14.1 Zona - Nombre
               substr(trim(lc_nsuc), 1, 30), -- 15.1 Agencia(Sucursal) - Nombre
               substr(trim(lc_ases), 1, 10), -- 16. Analista
               i.petdoc, -- 19. Tipo documento
               substr(trim(i.pendoc), 1, 12), -- 20. Nro. de documento
               substr(trim(lc_perjur), 1, 70), -- 21. Razón social
               substr(trim(lc_pernat), 1, 70), -- 22. Apellidos y nombres del cliente
               substr(trim(lc_statd), 1, 30), -- 23. Estado del crédito (vigente, cancelado)
               substr(trim(lc_dest), 1, 4), -- 24. Estado contable
               substr(trim(lc_lest), 1, 20), -- Concepto
               case when ld_fcest > nvl(i.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 (case when ld_fcest > nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) then ld_fcest else lc_frep end )
                 else (case when nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) > nvl(i.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then lc_frep else i.aofe99 end )end, --fecha de cambio de estado, --  25. Fecha de cambio de estado contable
               i.aoimp, -- 26. Monto desembolsado
               lc_mon, -- 27. Monto ingresado a COFIDE (BI)
               lc_ncuo, -- 28. Nro. de cuotas ingresado a COFIDE (BI)
               lc_peri, -- 29. Periodo de gracia ingresado a COFIDE (BI)
               lc_pcob, -- 30. % cobertura
               lc_mcob, -- 31. Monto de cobertura
               lc_fini_cof, --i.aofval, -- 32. Fecha inicio de crédito original
               lc_ffin_cof, --i.aofvto, -- 33. Fecha fin de crédito original
               lc_fvenuc, -- 34. Fecha de vencimiento de la próxima cuota impaga
               lc_fvenup, -- 35. Fecha de vencimiento de última cuota pagada
               lc_ncuop, -- 36. Nro. cuotas pendientes de pago
               --lc_fupag,    -- 37. Fecha de última cuota pagado
               lc_ufpag1, --lc_fupag, -- 38. Fecha de cancelación de última cuota pagada
               lc_ncuopg, -- 39. NÚMERO DE CUOTAS PAGADAS
               lc_tsum, -- 40. MONTO DE CUOTAS PAGADAS
               --null,          -- 41. DISTRIBUCION PAGO REALIZADO
               
               lc_diat, -- 42. Días de atraso
               lc_fecha_rcc, -- 43. Fecha clasificación SBS         
               lc_calif0, -- 44. Calificación Normal (en números de 100 a 0)
               lc_calif1, -- 45. Calificación CPP (en números de 100 a 0)  
               lc_calif2, -- 46. Calificación Deficiente (en números de 100 a 0)
               lc_calif3, -- 47. Calificación Dudoso (en números de 100 a 0)
               lc_calif4, -- 48. Calificación Perdida (en números de 100 a 0       
               i.aotasa, -- 49. Tasa de interés
               lc_ciiu4, -- 50. CIUU
               substr(trim(lc_acti), 1, 60), -- 51. Actividad económica
               lc_pcre, -- 52. Tipo crédito SBS
               substr(trim(lc_ncre), 1, 25), -- 52.1 Tipo crédito SBS - Concepto
               lc_lrep, -- 53. Flag de re reprogramación
               lc_nrep, -- 54. Número de reprogramaciones
               lc_frep, -- 55. Fecha de re reprogramación
               lc_fpri, -- 56. Fecha de primera cuota de re reprogramación
               lc_ncuo2, --lc_ncuopg, --Borrar! -- 57. Nro. de cuotas posterior a re reprogramación
               lc_peri2, -- 58. Periodo de gracia posterior a re reprogramación
               lc_fult, -- 59. Fecha de fin de crédito posterior a re reprogramación     
               
               lc_gas, -- 60. Seguros
               lc_mor, -- 61. Interés Moratorio
               lc_int, -- 62. Intereses
               lc_cuo, -- 63. Capital
               lc_icv, -- 64. Interés compensatorio
               lc_pen, -- 65. Penalidad    
               
               case when i.aostat = 90 then 0 else lc_sdoins end, -- 66. Saldo Insoluto 2
               lc_fecha_caj, -- 67. Fecha de clasificación caja
               
               i.aostat, --- FSD010 estado del crédito
               i.aofe99, ----FSD010 fecha de pago
               
               lc_ciuu1, --ciuu
               lc_dciu1,
               
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               pn_ffin,
               ln_mhonr,
               ld_fhonr,
               lc_eshonr,
               lc_sdoi,
               nvl(ln_sdohon,0),
               lc_sdoi+nvl(ln_sdohon,0),
               lc_tmor,
               lc_trep,
               case when ld_fcest > nvl(i.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 (case when ld_fcest > nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) then ld_fcest else lc_frep end )
                 else (case when nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) > nvl(i.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then lc_frep else i.aofe99 end )end, --fecha de cambio de estado, -- 44. Fecha del cambio de estado del crédito.
               lc_ncer,
               lc_ccob, 
               lc_cren,  
               lc_cobr,
               lc_chon,
               lc_codi,
               lc_crec
               );
            commit;
          exception
            when others then
            
              lc_coderr := substr(trim(sqlcode), 1, 100);
              lc_msgerr := substr(trim(sqlerrm), 1, 1000);
            
              begin
                insert into AQPB070E
                  (aqpb070etab,
                   aqpb070efec,
                   aqpb070esuc,
                   aqpb070eusr,
                   aqpb070ecoe,
                   aqpb070emsge,
                   aqpb070efcr,
                   aqpb070ehcr,
                   aqpb070ecta,
                   aqpb070eope)
                values
                  ('AQPB067',
                   pn_ffin,
                   pc_sucurs,
                   substr(trim(pn_usuario), 1, 10),
                   lc_coderr,
                   lc_msgerr,
                   to_char(sysdate, 'DD/MM/YYYY'),
                   to_char(sysdate, 'HH24:MI:SS'),
                   ln_cta,
                   ln_ope);
                commit;
              exception
                when others then
                  null;
              end;
            
          end;
        
        end loop;
      
      end;
    
    else
    
      
      begin
      
        -- Inserción de datos para el reporte por usuario: históricos
        for i in reporte_fae_mype1_his() loop
        
          ln_cta := i.aocta;
          ln_ope := i.aooper;
        
          -- 2. Número de Contrato SAP (código proporcionado por Cofide)
          begin
            -- Call the procedure                                                              
          
            pq_cr_reporte_fondos.sp_plantilla_faemype_v2(pn_cod   => i.pgcod,
                                                         pn_mod   => i.aomod,
                                                         pn_suc   => i.aosuc,
                                                         pn_mda   => i.aomda,
                                                         pn_pap   => i.aopap,
                                                         pn_cta   => i.aocta,
                                                         pn_ope   => i.aooper,
                                                         pn_sbo   => i.aosbop,
                                                         pn_top   => i.aotope,
                                                         pn_fecha => pn_ffin,
                                                         
                                                         pn_csap => lc_csap,
                                                         pn_fdes => lc_fdes,
                                                         pn_mon  => lc_mon,
                                                         pn_ncuo => lc_ncuo,
                                                         pn_peri => lc_peri,
                                                         pn_pcob => lc_pcob,
                                                         pn_fini => lc_fini_cof,
                                                         pn_ffin => lc_ffin_cof,
                                                         pn_ciuu => lc_ciuu1,
                                                         pn_dciu => lc_dciu1,
                                                         pn_ncer  => lc_ncer,
                                                         pn_ccob  => lc_ccob,  
                                                         pn_cren  => lc_cren,  
                                                         pn_cobr  => lc_cobr,  
                                                         pn_chon  => lc_chon,  
                                                         pn_codi  => lc_codi,  
                                                         pn_crec  => lc_crec );
          exception
            when others then
              lc_csap     := null;
              lc_fdes     := null;
              lc_mon      := null;
              lc_ncuo     := null;
              lc_peri     := null;
              lc_pcob     := null;
              lc_fini_cof := null;
              lc_ffin_cof := null;
              lc_ncer  := null;
              lc_ccob  := null; 
              lc_cren  := null;  
              lc_cobr  := null;
              lc_chon  := null;
              lc_codi  := null;
              lc_crec  := null;
            
          end;
        
          -- 8. Saldo Insoluto/Capital
          begin
            lc_sdoi := pq_cr_reporte_fondos_p3.fn_obtener_saldo_actual(i.pgcod,
                                                                       i.aomod,
                                                                       i.aosuc,
                                                                       i.aomda,
                                                                       i.aopap,
                                                                       i.aocta,
                                                                       i.aooper,
                                                                       i.aosbop,
                                                                       i.aotope,
                                                                       pn_ffin,
                                                                       pn_usuario);
          exception
            when others then
              lc_sdoi := 0;
          end;
        
          -- 8.1 Saldo Insoluto Real     
          -- Saldo Insoluto Real
          begin
            --- jrodriguej 03.03.2021                                           
          
            pq_cr_reporte_fondos.sp_obtener_sald_insol2_h(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_indi  => 2, -- FAE
                                                           pn_stat  => i.estado,
                                                           pn_sald  => lc_sdoins);
          
          exception
            when others then
              lc_sdoins := 0;
          end;
          
          -- Saldo Insoluto Real
          begin
            --- jrodriguej 03.03.2021                                           
          
            pq_cr_reporte_fondos.sp_obtener_sald_insol2_h99(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_fecha => lc_fmant,
                                                           pn_indi  => 2, -- FAE
                                                           pn_stat  => i.estado,
                                                           pn_sald  => lc_sdoins_mesant);
          
          exception
            when others then
              lc_sdoins_mesant := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
        
          -- 9. Monto prepago
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_mprepago(pn_cod   => i.pgcod,
                                                        pn_mod   => i.aomod,
                                                        pn_suc   => i.aosuc,
                                                        pn_mda   => i.aomda,
                                                        pn_pap   => i.aopap,
                                                        pn_cta   => i.aocta,
                                                        pn_ope   => i.aooper,
                                                        pn_sbo   => i.aosbop,
                                                        pn_top   => i.aotope,
                                                        pn_fecha => pn_ffin,
                                                        pn_monto => lc_mpre);
          exception
            when others then
              lc_mpre := 0;
          end;
          
          
        
          -- 9. Monto prepago
          /* 2021.10.01 dcastro se comento
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p200.sp_obtener_mprepago(pn_cod   => i.pgcod,
                                                            pn_mod   => i.aomod,
                                                            pn_suc   => i.aosuc,
                                                            pn_mda   => i.aomda,
                                                            pn_pap   => i.aopap,
                                                            pn_cta   => i.aocta,
                                                            pn_ope   => i.aooper,
                                                            pn_sbo   => i.aosbop,
                                                            pn_top   => i.aotope,
                                                            pn_fecha => pn_ffin,
                                                            pn_monto => lc_mpre);
            exception
              when others then
                lc_mpre := 0;
            end;
          */
          --se cambio 2021.10.01
          
            begin
            pq_cr_reporte_fondos_p200.sp_distribuc_pago_mes(pn_cod => i.pgcod,
                                                            pn_mod => i.aomod,
                                                            pn_suc => i.aosuc,
                                                            pn_mda => i.aomda,
                                                            pn_pap => i.aopap,
                                                            pn_cta => i.aocta,
                                                            pn_ope => i.aooper,
                                                            pn_sbo => i.aosbop,
                                                            pn_top => i.aotope,
                                                            pn_fecha => pn_ffin,
                                                            pn_tsum => lc_mpre,
                                                            pn_gas => lc_gas1,
                                                            pn_mor => lc_mor1,
                                                            pn_int => lc_int1,
                                                            pn_cuo => lc_mpre,
                                                            pn_icv => lc_icv1,
                                                            pn_pen => lc_icv1);

            exception
              when others then
                lc_mpre := 0;
          end;
          
          if lc_mpre > lc_sdoins_mesant then
            lc_mpre := lc_sdoins_mesant;
          end if;
          
  /*                if lc_mpre = 0 then
          
          ld_feci1 :=  to_date(to_char(pn_ffin, 'yyyymm') || '01', 'yyyymmdd');
         
          begin

            pq_cr_reporte_fondos.sp_cr_fsh016_550(pn_emp => i.pgcod,
                                                  pn_mod => i.aomod,
                                                  pn_suc => i.aosuc,
                                                  pn_mda => i.aomda,
                                                  pn_pap => i.aopap,
                                                  pn_cta => i.aocta,
                                                  pn_ope => i.aooper,
                                                  pn_sbo => i.aosbop,
                                                  pn_top => i.aotope,
                                                  pd_fpp => pn_ffin,
                                                  pd_fec => pn_ffin,
                                                  pd_fei => ld_feci1,
                                                  pc_ind => null,
                                                  pv_cap => lc_mpre,
                                                  pv_int => lc_int1, 
                                                  pv_icv => lc_icv1,
                                                  pv_mor => lc_mor1,
                                                  pv_seg => lc_gas1,
                                                  pv_rub => lc_icv1,
                                                  pv_gas => lc_gas1);
          end;

        
        end if;
*/
          -- 2021.10.01 dcastro
        
          -- 10. Distribución clasificación de riesgo enviado por caja
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_calf_caja(pn_cod     => i.pgcod,
                                                         pn_mod     => i.aomod,
                                                         pn_suc     => i.aosuc,
                                                         pn_mda     => i.aomda,
                                                         pn_pap     => i.aopap,
                                                         pn_cta     => i.aocta,
                                                         pn_ope     => i.aooper,
                                                         pn_sbo     => i.aosbop,
                                                         pn_top     => i.aotope,
                                                         pn_est     => i.aostat,
                                                         pn_fecha   => pn_ffin,
                                                         pn_calif0a => lc_calif0a,
                                                         pn_calif1a => lc_calif1a,
                                                         pn_calif2a => lc_calif2a,
                                                         pn_calif3a => lc_calif3a,
                                                         pn_calif4a => lc_calif4a,
                                                         pn_deccaj  => lc_fecha_caj);
          exception
            when others then
              lc_calif0a   := 100;
              lc_calif1a   := 0;
              lc_calif2a   := 0;
              lc_calif3a   := 0;
              lc_calif4a   := 0;
              lc_fecha_caj := null;
            
          end;
        
          -- 13. Región
          -- 13.1 Región - Nombre
          -- 14. Zona
          -- 14.1 Zona - Nombre
          -- 15. Agencia (Sucursal)
          -- 15.1 Agencia(Sucursal) - Nombre
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => i.aosuc,
                                                    pn_regi => lc_regi,
                                                    pn_zona => lc_zona,
                                                    pn_nsuc => lc_nsuc,
                                                    pn_nzon => lc_nzon,
                                                    pn_nreg => lc_nreg);
          exception
            when others then
              lc_regi := 0;
              lc_zona := 0;
              lc_nsuc := '';
              lc_nzon := '';
              lc_nreg := '';
            
          end;
        
          -- 16. Analista
        
          begin
            lc_ases := fn_analista_credito(i.aomod,
                                           i.aosuc,
                                           i.aomda,
                                           i.aopap,
                                           i.aocta,
                                           i.aooper,
                                           i.aosbop,
                                           i.aotope);
          exception
            when others then
              lc_ases := '';
          end;
        
          -- 21. Razón social
        
          begin
            lc_perjur := pq_cr_reporte_fondos_p3.fn_obtener_perjur(i.pepais,
                                                                   i.petdoc,
                                                                   i.pendoc);
          exception
            when others then
              lc_perjur := '';
          end;
        
          -- 22. Apellidos y nombres del cliente
        
          begin
            lc_pernat := pq_cr_reporte_fondos_p3.fn_obtener_pernat(i.pepais,
                                                                   i.petdoc,
                                                                   i.pendoc);
          exception
            when others then
              lc_pernat := '';
          end;
        
          -- 23. ESTADO DEL CREDITO
        
          begin
            lc_statd := pq_cr_reporte_fondos_p3.fn_estado_desc(i.aostat);
          exception
            when others then
              lc_statd := '';
          end;
        
          -- 31. Monto de cobertura
        
          begin
            --lc_mcob := (lc_pcob / 100 * lc_sdoi);
            lc_mcob := (lc_pcob / 100 * lc_sdoins);
          exception
            when others then
              lc_mcob := 0;
          end;
        
          -- 36. Fecha de último pago    
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_datos_ufecha(pn_cod   => i.pgcod,
                                                            pn_mod   => i.aomod,
                                                            pn_suc   => i.aosuc,
                                                            pn_mda   => i.aomda,
                                                            pn_pap   => i.aopap,
                                                            pn_cta   => i.aocta,
                                                            pn_ope   => i.aooper,
                                                            pn_sbo   => i.aosbop,
                                                            pn_top   => i.aotope,
                                                            pn_fecha => pn_ffin,
                                                            pn_fpagu => lc_fupag, -- Fecha de la última cuota pagada
                                                            pn_fvenu => lc_fvenup); -- Fecha de vencimiento de la última cuota pagada
          exception
            when others then
              lc_fupag  := null;
              lc_fvenup := null;
          end;
        
          -- 34. Nro. cuotas pendientes de pago
        
          begin
            pq_cr_reporte_fondos_p3.sp_fecha_ncuop(i.pgcod,
                                                   i.aomod,
                                                   i.aosuc,
                                                   i.aomda,
                                                   i.aopap,
                                                   i.aocta,
                                                   i.aooper,
                                                   i.aosbop,
                                                   i.aotope,
                                                   lc_fupag,
                                                   lc_ncuop, -- Nro de cuotas pendientes de pago
                                                   lc_ncuopg); -- Nro de cuotas ya pagadas
          exception
            when others then
              lc_ncuop  := 0;
              lc_ncuopg := 0;
          end;
        
          -- Fecha de vencimiento de la próxima cuota impaga
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_impaga(pn_cod    => i.pgcod,
                                                      pn_mod    => i.aomod,
                                                      pn_suc    => i.aosuc,
                                                      pn_mda    => i.aomda,
                                                      pn_pap    => i.aopap,
                                                      pn_cta    => i.aocta,
                                                      pn_ope    => i.aooper,
                                                      pn_sbo    => i.aosbop,
                                                      pn_top    => i.aotope,
                                                      pn_fecha  => pn_ffin,
                                                      pn_fvenuc => lc_fvenuc);
          exception
            when others then
              lc_fvenuc := null;
          end;
        
          -- 37. Días de atraso 
        
          begin
            lc_diat := fn_dias_atraso(pn_ffin, --fecha de proceso
                                      i.pgcod,
                                      i.aomod,
                                      i.aosuc,
                                      i.aomda,
                                      i.aopap,
                                      i.aocta,
                                      i.aooper,
                                      i.aosbop,
                                      i.aotope,
                                      i.aostat,
                                      i.aofvto);
          exception
            when others then
              lc_diat := 0;
          end;
        
          --dcastro 27092021          
          if i.aostat = 99 then  -- si el credito esta cancelados , dias atraso deben ser 0
            lc_diat := 0;
          end if;
          --dcastro 25092021
            

          -- 39. Calificación Normal (en números de 100 a 0)
          -- 40. Calificación CPP (en números de 100 a 0)  
          -- 41. Calificación Deficiente (en números de 100 a 0)
          -- 42. Calificación Dudoso (en números de 100 a 0)
          -- 43. Calificación Perdida (en números de 100 a 0  
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_calf(pn_tdoc   => i.petdoc,
                                                    pn_ndoc   => i.pendoc,
                                                    pn_fech   => pn_ffin,
                                                    pn_calif0 => lc_calif0,
                                                    pn_calif1 => lc_calif1,
                                                    pn_calif2 => lc_calif2,
                                                    pn_calif3 => lc_calif3,
                                                    pn_calif4 => lc_calif4,
                                                    pn_csbs   => lc_csbs);
          exception
            when others then
              lc_calif0 := 100;
              lc_calif1 := 0;
              lc_calif2 := 0;
              lc_calif3 := 0;
              lc_calif4 := 0;
              lc_csbs   := 0;
          end;
        
          -- 45. CIUU
          -- 46. Actividad económica
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_ciiu_codigo4(p_pais   => i.pepais,
                                                    p_petdoc => i.petdoc,
                                                    p_pendoc => i.pendoc,
                                                    p_ciuu4  => lc_ciiu4,
                                                    p_ciuu6  => lc_ciiu6);
          exception
            when others then
              lc_ciiu4 := 0;
              lc_ciiu6 := 0;
          end;
        
          -- 10.2 Descripción de CIUU 
        
          begin
            -- Call the procedure
            if lc_ciiu4 <> 0 then
              pq_cr_reporte_fondos_p3.sp_obtener_ciuu(pn_cciu => lc_ciiu6,
                                                      pn_dciu => lc_acti);
            else
              if lc_ciiu6 <> 0 then
                lc_ciiu4 := to_number(substr(to_char(lc_ciiu6), 1, 4));
              else
                lc_ciiu4 := 0;
              end if;
              lc_acti := '';
            end if;
          
          exception
            when others then
              lc_acti := '';
          end;
        
          -- 35. Fecha de pago de última cuota pagada
        
          begin
            lc_ufpag1 := pq_cr_reporte_fondos_p3.fn_fecha_upago(i.pgcod,
                                                                i.aomod,
                                                                i.aosuc,
                                                                i.aomda,
                                                                i.aopap,
                                                                i.aocta,
                                                                i.aooper,
                                                                i.aosbop,
                                                                i.aotope,
                                                                pn_ffin);
          exception
            when others then
              lc_ufpag1 := null;
          end;
        
          -- 47. Tipo crédito SBS
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_tipo_credito_sbs_vig(pn_cod     => i.pgcod,
                                                            pn_mod     => i.aomod,
                                                            pn_suc     => i.aosuc,
                                                            pn_mda     => i.aomda,
                                                            pn_pap     => i.aopap,
                                                            pn_cta     => i.aocta,
                                                            pn_ope     => i.aooper,
                                                            pn_sbo     => i.aosbop,
                                                            pn_top     => i.aotope,
                                                            pn_fecha   => pn_ffin,
                                                            pn_usuario => pn_usuario,
                                                            pn_ntipo   => lc_pcre,
                                                            pn_nconc   => lc_ncre);
          exception
            when others then
              lc_pcre := 0;
              lc_ncre := '';
          end;
        
          -- Obtención situación contable
          -- 24. Estado contable
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_scond_c(pn_cod   => i.pgcod,
                                                       pn_mod   => i.aomod,
                                                       pn_suc   => i.aosuc,
                                                       pn_mda   => i.aomda,
                                                       pn_pap   => i.aopap,
                                                       pn_cta   => i.aocta,
                                                       pn_ope   => i.aooper,
                                                       pn_sbo   => i.aosbop,
                                                       pn_top   => i.aotope,
                                                       pn_dcon  => i.dcon,
                                                       pn_est   => i.aostat,
                                                       pn_ufech => lc_ufpag1,
                                                       pn_rubr  => lc_dcon,
                                                       pn_resp  => lc_scon);
          exception
            when others then
              lc_dcon := '';
              lc_scon := '';
          end;
        
          lc_dest := null;
          lc_lest := null;
        
          begin
            if i.aomda = 0 then
              lx_mda := 'PEN';
            else
              lx_mda := 'USD';
            end if;
          end;
        
          -- dias atraso
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_atraso_u(pn_cod   => i.pgcod,
                                                        pn_mod   => i.aomod,
                                                        pn_suc   => i.aosuc,
                                                        pn_mda   => i.aomda,
                                                        pn_pap   => i.aopap,
                                                        pn_cta   => i.aocta,
                                                        pn_ope   => i.aooper,
                                                        pn_sbo   => i.aosbop,
                                                        pn_top   => i.aotope,
                                                        pn_fecha => pn_ffin,
                                                        pn_diat  => lx_diat);
          exception
            when others then
              lx_diat := 0;
          end;
        
          -- Distribución de pago
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_distribuc_pago(pn_cod   => i.pgcod,
                                                      pn_mod   => i.aomod,
                                                      pn_suc   => i.aosuc,
                                                      pn_mda   => i.aomda,
                                                      pn_pap   => i.aopap,
                                                      pn_cta   => i.aocta,
                                                      pn_ope   => i.aooper,
                                                      pn_sbo   => i.aosbop,
                                                      pn_top   => i.aotope,
                                                      pn_fecha => pn_ffin,
                                                      pn_tsum  => lc_tsum,
                                                      pn_gas   => lc_gas,
                                                      pn_mor   => lc_mor,
                                                      pn_int   => lc_int,
                                                      pn_cuo   => lc_cuo,
                                                      pn_icv   => lc_icv,
                                                      pn_pen   => lc_pen);
          exception
            when others then
            
              lc_tsum := 0;
              lc_gas  := 0;
              lc_mor  := 0;
              lc_int  := 0;
              lc_cuo  := 0;
              lc_icv  := 0;
              lc_pen  := 0;
            
          end;
      
          -- '53. Flag de re reprogramación';
          -- '54. Número de reprogramaciones';
          -- '55. Fecha de re reprogramación';
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_repro_dato_jaqa400(pn_cod   => i.pgcod,
                                                   pn_cta   => i.aocta,
                                                   pn_ope   => i.aooper,
                                                   pn_fecha => pn_ffin,
                                                   pn_flag  => lc_lrep,
                                                   pn_nrep  => lc_nrep,
                                                   pn_fech  => lc_frep,
                                                   pn_tabla => lc_tabla,
                                                   
                                                   pn_peri => lc_peri2,
                                                   pn_ncuo => lc_ncuo2,
                                                   pn_fpri => lc_fpri,
                                                   pn_fult => lc_fult);
          exception
            when others then
            
              lc_lrep  := 'NO';
              lc_nrep  := 0;
              lc_frep  := null;
              lc_tabla := '';
              lc_peri2 := 0;
              lc_ncuo2 := 0;
              lc_fpri  := null;
              lc_fult  := null;
            
          end;
          -- -- -- -- -- -- --   -- -- -- -- -- -- -- 
          
          lc_aostat := i.aostat;
        
          --if i.aocta = 645747 then
          --  null;
          --  end if;
        
          --if i.aostat = 99 then
          --  lc_sdoi := 0;
          --end if;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_rubr   => 9300082010000,                                                           
                                                           pd_fecha => pn_ffin,                                                           
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr  => ln_mhonr,
                                                           pd_fhonr  => ld_fhonr,
                                                           pn_sdohon => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon := 0;
          end; 
          --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,                                                           
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_actual(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tea);
          exception
            when others then
              lc_tea := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes repro
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_repro(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_trep);
          exception
            when others then
              lc_trep := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes moratotia
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tmor);
          exception
            when others then
              lc_tmor := 0;
          end;
          -- -- -- -- -- -- --   -- -- -- -- -- -- --
        
          begin
            insert into aqpb067
              (aqpb067usur, -- Usuario
               aqpb067pgcod,
               aqpb067aomod,
               aqpb067aosuc, -- 15. Agencia (Sucursal)
               aqpb067aomda,
               aqpb067aopap,
               aqpb067aocta, -- 17. Nro. de cuenta
               aqpb067aooper, -- 18. Nro. de operación
               aqpb067aosbop,
               aqpb067aotope,
               aqpb067esf, -- 3. ESF
               aqpb067csap, -- 4. Número contrato SAP
               aqpb067nrop, -- 5.  Número Préstamo
               aqpb067fval, -- 6.  Fecha de Desembolso 
               
               aqpb067mda, -- 7.  Moneda
               aqpb067sdo, -- 8.  Saldo Insoluto 
               aqpb067mpre, -- 9.  Monto Prepago 
               --aqpb067dcla, -- 10. Distribución clasificación de riesgo (Reportado por Caja al cierre de mes)
               --aqpb067ncla, -- 10.1. Concepto
               
               aqpb067cnoma, -- 10.a Calificación Normal (en números de 100 a 0), reportado por caja al cierre de mes
               aqpb067ccppa, -- 10.b Calificación CPP (en números de 100 a 0), reportado por caja al cierre de mes
               aqpb067cdefa, -- 10.c Calificación Deficiente (en números de 100 a 0), reportado por caja al cierre de mes
               aqpb067cduda, -- 10.d Calificación Dudoso (en números de 100 a 0), reportado por caja al cierre de mes
               aqpb067cpera, -- 10.e Calificación Perdida (en números de 100 a 0), reportado por caja al cierre de mes             
               
               aqpb067dcon, -- 11. Situación contable 
               aqpb067ncon, -- 11.1. Concepto
               aqpb067diatc, -- 12. Días de atraso pago cuota 
               
               aqpb067reg, -- 13. Región
               aqpb067nreg, -- 13.1 Región - Nombre
               aqpb067zon, -- 14. Zona
               aqpb067nzon, -- 14.1 Zona - Nombre
               aqpb067nsuc, -- 15.1 Agencia(Sucursal) - Nombre
               aqpb067ase, -- 16. Analista
               aqpb067tdoc, -- 19. Tipo documento
               aqpb067ndoc, -- 20. Nro. de documento
               aqpb067razn, -- 21. Razón social
               aqpb067rnom, -- 22. Apellidos y nombres del cliente
               aqpb067estn, -- 23. Estado del crédito (vigente, cancelado)
               aqpb067lest, -- 24. Estado contable
               aqpb067cest, -- Concepto
               aqpb067dest, -- 25. Fecha de cambio de estado contable
               aqpb067mdes, -- 26. Monto desembolsado
               aqpb067mcof, -- 27. Monto ingresado a COFIDE (BI)
               aqpb067pper, -- 28. Nro. de cuotas ingresado a COFIDE (BI)
               aqpb067pgra, -- 29. Periodo de gracia ingresado a COFIDE (BI)
               aqpb067pcob, -- 30. % cobertura
               aqpb067mcob, -- 31. Monto de cobertura
               aqpb067fini, -- 32. Fecha inicio de crédito original
               aqpb067ffin, -- 33. Fecha fin de crédito original
               
               aqpb067fvenuc, -- 34. Fecha de vencimiento de la próxima cuota impaga
               aqpb067fvenup, -- 35. Fecha de vencimiento de última cuota pagada
               aqpb067ncuo, -- 36. Nro. cuotas pendientes de pago
               --aqpb067fcuo,    -- 37. Fecha de última cuota pagado
               aqpb067fupag, -- 38. Fecha de pago de última cuota pagada
               aqpb067ncupa, -- 39. NÚMERO DE CUOTAS PAGADAS
               aqpb067mcuop, -- 40. MONTO DE CUOTAS PAGADAS
               --aqpb067dpag,    -- 41. DISTRIBUCION PAGO REALIZADO
               
               aqpb067diat, -- 42. Días de atraso
               aqpb067fcla, -- 43. Fecha clasificación SBS
               aqpb067cnom, -- 44. Calificación Normal (en números de 100 a 0)
               aqpb067ccpp, -- 45. Calificación CPP (en números de 100 a 0)  
               aqpb067cdef, -- 46. Calificación Deficiente (en números de 100 a 0)
               aqpb067cdud, -- 47. Calificación Dudoso (en números de 100 a 0)
               aqpb067cper, -- 48. Calificación Perdida (en números de 100 a 0       
               aqpb067tasa, -- 49. Tasa de interés
               aqpb067ciuu, -- 50. CIUU
               aqpb067actn, -- 51. Actividad económica
               aqpb067tcre, -- 52. Tipo crédito SBS
               aqpb067ncre, -- 52.1 Tipo crédito SBS - Concepto
               aqpb067lrep, -- 53. Flag de re reprogramación
               aqpb067nrep, -- 54. Número de reprogramaciones
               aqpb067frep, -- 55. Fecha de re reprogramación
               aqpb067pfec, -- 56. Fecha de primera cuota de re reprogramación
               aqpb067ncuop, -- 57. Nro. de cuotas posterior a re reprogramación
               aqpb067pgrap, -- 58. Periodo de gracia posterior a re reprogramación
               aqpb067pfinp, -- 59. Fecha de fin de crédito posterior a re reprogramación
               
               aqpb067gas, -- 60. Seguros
               aqpb067mor, -- 61. Interés Moratorio
               aqpb067int, -- 62. Intereses
               aqpb067cuo, -- 63. Capital
               aqpb067icv, -- 64. Interés compensatorio
               aqpb067pen, -- 65. Penalidad
               
               aqpb067sdoins,
               aqpb067feccaj,
               
               aqpb067stat, --- FSD010 estado del crédito
               aqpb067fe99, ----FSD010 fecha de pago
               
               aqpb067ciiuori,
               aqpb067actnomori,
               
               aqpb067fcr,
               aqpb067hcr,
               aqpb067fproc,
               aqpb067mhonr,
               aqpb067fhonr,
               aqpb067chonr,
               aqpb067sdocap,
               aqpb067sdohon,
               aqpb067crehon,
               aqpb067tmor,
               aqpb067tcrepro,  
               aqpb067fcest,
               Aqpb067ncer,
               Aqpb067ccob,
               Aqpb067cren,
               Aqpb067cobr,
               Aqpb067chon,
               Aqpb067codi,
               Aqpb067crec)
            values
              (pn_usuario,
               i.pgcod,
               i.aomod,
               i.aosuc,
               i.aomda,
               i.aopap,
               i.aocta,
               i.aooper,
               i.aosbop,
               i.aotope,
               
               lx_esf, -- 3. ESF
               lc_csap, -- 4. Número contrato SAP
               i.prestamo, -- 5.  Número Préstamo
               lc_fdes, -- 6.  Fecha de Desembolso 
               lx_mda, -- 7.  Moneda
               lc_sdoi, -- 8.  Saldo Capital Cancelado 
               lc_mpre, -- 9.  Monto Prepago 
               --lc_dcla, -- 10. Distribución clasificación de riesgo 
               --lc_ncla, -- 10.1. Concepto
               lc_calif0a, -- 10.a Calificación Normal (en números de 100 a 0), reportado por caja al cierre de mes
               lc_calif1a, -- 10.b Calificación CPP (en números de 100 a 0), reportado por caja al cierre de mes
               lc_calif2a, -- 10.c Calificación Deficiente (en números de 100 a 0), reportado por caja al cierre de mes
               lc_calif3a, -- 10.d Calificación Dudoso (en números de 100 a 0), reportado por caja al cierre de mes
               lc_calif4a, -- 10.e Calificación Perdida (en números de 100 a 0), reportado por caja al cierre de mes                          
               
               substr(trim(lc_dcon), 1, 4), -- 11. Situación contable 
               substr(trim(lc_scon), 1, 20), -- 11.1. Concepto
               lx_diat, -- 12. Días de atraso pago cuota 
               
               lc_regi, -- 13. Región
               substr(trim(lc_nreg), 1, 30), -- 13.1 Región - Nombre
               lc_zona, -- 14. Zona
               substr(trim(lc_nzon), 1, 40), -- 14.1 Zona - Nombre
               substr(trim(lc_nsuc), 1, 30), -- 15.1 Agencia(Sucursal) - Nombre
               substr(trim(lc_ases), 1, 10), -- 16. Analista
               i.petdoc, -- 19. Tipo documento
               substr(trim(i.pendoc), 1, 12), -- 20. Nro. de documento
               substr(trim(lc_perjur), 1, 70), -- 21. Razón social
               substr(trim(lc_pernat), 1, 70), -- 22. Apellidos y nombres del cliente
               substr(trim(lc_statd), 1, 30), -- 23. Estado del crédito (vigente, cancelado)
               substr(trim(lc_dest), 1, 4), -- 24. Estado contable
               substr(trim(lc_lest), 1, 20), -- Concepto
               case when ld_fcest > nvl(i.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 (case when ld_fcest > nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) then ld_fcest else lc_frep end )
                 else (case when nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) > nvl(i.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then lc_frep else i.aofe99 end )end, --fecha de cambio de estado, --  25. Fecha de cambio de estado contable
               i.aoimp, -- 26. Monto desembolsado
               lc_mon, -- 27. Monto ingresado a COFIDE (BI)
               lc_ncuo, -- 28. Nro. de cuotas ingresado a COFIDE (BI)
               lc_peri, -- 29. Periodo de gracia ingresado a COFIDE (BI)
               lc_pcob, -- 30. % cobertura
               lc_mcob, -- 31. Monto de cobertura
               lc_fini_cof, --i.aofval, -- 32. Fecha inicio de crédito original
               lc_ffin_cof, --i.aofvto, -- 33. Fecha fin de crédito original
               --i.aofval, -- 32. Fecha inicio de crédito original
               --i.aofvto, -- 33. Fecha fin de crédito original
               
               lc_fvenuc, -- 34. Fecha de vencimiento de la próxima cuota impaga
               lc_fvenup, -- 35. Fecha de vencimiento de última cuota pagada
               lc_ncuop, -- 36. Nro. cuotas pendientes de pago
               lc_ufpag1, --lc_fupag, -- 38. Fecha de cancelación de última cuota pagada
               lc_ncuopg, -- 39. NÚMERO DE CUOTAS PAGADAS
               lc_tsum, -- 40. MONTO DE CUOTAS PAGADAS
               --null,          -- 41. DISTRIBUCION PAGO REALIZADO
               
               lc_diat, -- 42. Días de atraso
               lc_fecha_rcc, -- 43. Fecha clasificación SBS         
               lc_calif0, -- 44. Calificación Normal (en números de 100 a 0)
               lc_calif1, -- 45. Calificación CPP (en números de 100 a 0)  
               lc_calif2, -- 46. Calificación Deficiente (en números de 100 a 0)
               lc_calif3, -- 47. Calificación Dudoso (en números de 100 a 0)
               lc_calif4, -- 48. Calificación Perdida (en números de 100 a 0       
               i.aotasa, -- 49. Tasa de interés
               lc_ciiu4, -- 50. CIUU
               substr(trim(lc_acti), 1, 60), -- 51. Actividad económica
               lc_pcre, -- 52. Tipo crédito SBS
               substr(trim(lc_ncre), 1, 25), -- 52.1 Tipo crédito SBS - Concepto
               lc_lrep, -- 53. Flag de re reprogramación
               lc_nrep, -- 54. Número de reprogramaciones
               lc_frep, -- 55. Fecha de re reprogramación
               lc_fpri, -- 56. Fecha de primera cuota de re reprogramación
               lc_ncuo2, --lc_ncuopg, --Borrar! -- 57. Nro. de cuotas posterior a re reprogramación
               lc_peri2, -- 58. Periodo de gracia posterior a re reprogramación
               lc_fult, -- 59. Fecha de fin de crédito posterior a re reprogramación     
               
               lc_gas, -- 60. Seguros
               lc_mor, -- 61. Interés Moratorio
               lc_int, -- 62. Intereses
               lc_cuo, -- 63. Capital
               lc_icv, -- 64. Interés compensatorio
               lc_pen, -- 65. Penalidad  
               
               case when i.aostat = 90 then 0 else lc_sdoins end, -- 66. Saldo Insoluto 2  
               lc_fecha_caj, -- 67. Fecha de clasificación caja
               
               i.aostat, --- FSD010 estado del crédito
               i.aofe99, ----FSD010 fecha de pago
               
               lc_ciuu1, --ciuu
               lc_dciu1,
               
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               pn_ffin,
               ln_mhonr,
               ld_fhonr,
               lc_eshonr,
               lc_sdoi,
               nvl(ln_sdohon,0),
               lc_sdoi+nvl(ln_sdohon,0),
               lc_tmor,
               lc_trep,
               case when ld_fcest > nvl(i.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 (case when ld_fcest > nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) then ld_fcest else lc_frep end )
                 else (case when nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) > nvl(i.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then lc_frep else i.aofe99 end )end, --fecha de cambio de estado, --  25. Fecha de cambio de estado contable
               lc_ncer,
               lc_ccob, 
               lc_cren,  
               lc_cobr,
               lc_chon,
               lc_codi,
               lc_crec    
               );
            commit;
          exception
            when others then
            
              lc_coderr := substr(trim(sqlcode), 1, 100);
              lc_msgerr := substr(trim(sqlerrm), 1, 1000);
            
              begin
                insert into AQPB070E
                  (aqpb070etab,
                   aqpb070efec,
                   aqpb070esuc,
                   aqpb070eusr,
                   aqpb070ecoe,
                   aqpb070emsge,
                   aqpb070efcr,
                   aqpb070ehcr,
                   aqpb070ecta,
                   aqpb070eope)
                values
                  ('AQPB067',
                   pn_ffin,
                   pc_sucurs,
                   substr(trim(pn_usuario), 1, 10),
                   lc_coderr,
                   lc_msgerr,
                   to_char(sysdate, 'DD/MM/YYYY'),
                   to_char(sysdate, 'HH24:MI:SS'),
                   ln_cta,
                   ln_ope);
                commit;
              exception
                when others then
                  null;
              end;
            
          end;
        
        end loop;
      
      end;
      
    
    end if;
  
    --- Créditos con módulo 200     -- jrodriguej  19.07.2021
    for i in reporte_fae_mype1_200() loop
    
      ln_cta := i.aocta;
      ln_ope := i.aooper;
    /*
      begin
        select f.pgcod,
               f.aomod,
               f.aosuc,
               f.aomda,
               f.aopap,
               f.aocta,
               f.aooper,
               f.aosbop,
               f.aotope
          into lr_cod,
               lr_mod,
               lr_suc,
               lr_mda,
               lr_pap,
               lr_cta,
               lr_oper,
               lr_sbop,
               lr_tope
          from (select x.pgcod,
                       x.aomod,
                       x.aosuc,
                       x.aomda,
                       x.aopap,
                       x.aocta,
                       x.aooper,
                       x.aosbop,
                       x.aotope
                  from fsd010 x
                 where x.pgcod = i.pgcod
                   and x.aomda = i.aomda
                   and x.aopap = i.aopap
                   and x.aocta = i.aocta
                   and x.aooper = i.aooper
                   and x.aomod in
                       (select modulo
                          from fst111
                         where dscod = 50
                           and modulo not in (29, 120, 144, 200))
                 order by x.aosbop desc) f
         where rownum = 1;
      exception
        when others then
          lr_cod  := null;
          lr_mod  := null;
          lr_suc  := null;
          lr_mda  := null;
          lr_pap  := null;
          lr_cta  := null;
          lr_oper := null;
          lr_sbop := null;
          lr_tope := null;
      end;
    */
      -- 2. Número de Contrato SAP (código proporcionado por Cofide)
      begin
        -- Call the procedure                                                              
      
        pq_cr_reporte_fondos.sp_plantilla_faemype_v2(pn_cod   => i.pgcod,
                                                          pn_mod   => i.aomod,
                                                          pn_suc   => i.aosuc,
                                                          pn_mda   => i.aomda,
                                                          pn_pap   => i.aopap,
                                                          pn_cta   => i.aocta,
                                                          pn_ope   => i.aooper,
                                                          pn_sbo   => i.aosbop,
                                                          pn_top   => i.aotope,
                                                          pn_fecha => pn_ffin,
                                                          
                                                          pn_csap => lc_csap,
                                                          pn_fdes => lc_fdes,
                                                          pn_mon  => lc_mon,
                                                          pn_ncuo => lc_ncuo,
                                                          pn_peri => lc_peri,
                                                          pn_pcob => lc_pcob,
                                                          pn_fini => lc_fini_cof,
                                                          pn_ffin => lc_ffin_cof,
                                                          pn_ciuu => lc_ciuu1,
                                                          pn_dciu => lc_dciu1,
                                                          pn_ncer  => lc_ncer,
                                                          pn_ccob  => lc_ccob,  
                                                          pn_cren  => lc_cren,  
                                                          pn_cobr  => lc_cobr,  
                                                          pn_chon  => lc_chon,  
                                                          pn_codi  => lc_codi,  
                                                          pn_crec  => lc_crec );
      exception
        when others then
          lc_csap     := null;
          lc_fdes     := null;
          lc_mon      := null;
          lc_ncuo     := null;
          lc_peri     := null;
          lc_pcob     := null;
          lc_fini_cof := null;
          lc_ffin_cof := null;
          lc_ncer  := null;
          lc_ccob  := null; 
              lc_cren  := null;  
              lc_cobr  := null;
              lc_chon  := null;
              lc_codi  := null;
              lc_crec  := null;
      end;
    
      -- 8. Saldo Insoluto/Capital
      begin
        lc_sdoi := pq_cr_reporte_fondos_p200.fn_obtener_saldo_actual(i.pgcod,
                                                                     i.aomod,
                                                                     i.aosuc,
                                                                     i.aomda,
                                                                     i.aopap,
                                                                     i.aocta,
                                                                     i.aooper,
                                                                     i.aosbop,
                                                                     i.aotope,
                                                                     pn_ffin,
                                                                     pn_usuario);
      exception
        when others then
          lc_sdoi := 0;
      end;
    
      -- 8.1 Saldo Insoluto Real
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
      -- Saldo Insoluto Real
      begin
        --- jrodriguej 03.03.2021                                           
        --- agregar procedimiento de obtención de capital de mod 200
        pq_cr_reporte_fondos.sp_obtener_sald_insol200_h(pn_cod   => i.pgcod,
                                                         pn_mod   => i.aomod,
                                                         pn_suc   => i.aosuc,
                                                         pn_mda   => i.aomda,
                                                         pn_pap   => i.aopap,
                                                         pn_cta   => i.aocta,
                                                         pn_ope   => i.aooper,
                                                         pn_sbo   => i.aosbop,
                                                         pn_top   => i.aotope,
                                                         pn_fecha => pn_ffin,
                                                         pn_indi  => 2, -- FAE
                                                         pn_stat  => i.estado,
                                                         pn_sald  => lc_sdoins);
      
      exception
        when others then
          lc_sdoins := 0;
      end;
      
      -- Saldo Insoluto Real mes anterior
      begin
        
        pq_cr_reporte_fondos.sp_obtener_sald_insol200_h99(pn_cod   => i.pgcod,
                                                         pn_mod   => i.aomod,
                                                         pn_suc   => i.aosuc,
                                                         pn_mda   => i.aomda,
                                                         pn_pap   => i.aopap,
                                                         pn_cta   => i.aocta,
                                                         pn_ope   => i.aooper,
                                                         pn_sbo   => i.aosbop,
                                                         pn_top   => i.aotope,
                                                         pn_fecha => lc_fmant,
                                                         pn_indi  => 2, -- FAE
                                                         pn_stat  => i.estado,
                                                         pn_sald  => lc_sdoins_mesant);
      
      exception
        when others then
          lc_sdoins_mesant := 0;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
    
      -- 9. Monto prepago
    /* 2021.10.01 dcastro se comento
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_mprepago(pn_cod   => i.pgcod,
                                                      pn_mod   => i.aomod,
                                                      pn_suc   => i.aosuc,
                                                      pn_mda   => i.aomda,
                                                      pn_pap   => i.aopap,
                                                      pn_cta   => i.aocta,
                                                      pn_ope   => i.aooper,
                                                      pn_sbo   => i.aosbop,
                                                      pn_top   => i.aotope,
                                                      pn_fecha => pn_ffin,
                                                      pn_monto => lc_mpre);
      exception
        when others then
          lc_mpre := 0;
      end;
    */
    --se cambio 2021.10.01
    
      begin
      pq_cr_reporte_fondos_p200.sp_distribuc_pago_mes(pn_cod => i.pgcod,
                                                      pn_mod => i.aomod,
                                                      pn_suc => i.aosuc,
                                                      pn_mda => i.aomda,
                                                      pn_pap => i.aopap,
                                                      pn_cta => i.aocta,
                                                      pn_ope => i.aooper,
                                                      pn_sbo => i.aosbop,
                                                      pn_top => i.aotope,
                                                      pn_fecha => pn_ffin,
                                                      pn_tsum => lc_mpre,
                                                      pn_gas => lc_gas1,
                                                      pn_mor => lc_mor1,
                                                      pn_int => lc_int1,
                                                      pn_cuo => lc_mpre,
                                                      pn_icv => lc_icv1,
                                                      pn_pen => lc_icv1);

      exception
        when others then
          lc_mpre := 0;
    end;
    
    if lc_mpre > lc_sdoins_mesant then
            lc_mpre := lc_sdoins_mesant;
    end if;
    -- 2021.10.01 dcastro
    
      -- 10. Distribución clasificación de riesgo enviado por caja
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_obtener_calf_caja(pn_cod     => i.pgcod,
                                                     pn_mod     => i.aomod,
                                                     pn_suc     => i.aosuc,
                                                     pn_mda     => i.aomda,
                                                     pn_pap     => i.aopap,
                                                     pn_cta     => i.aocta,
                                                     pn_ope     => i.aooper,
                                                     pn_sbo     => i.aosbop,
                                                     pn_top     => i.aotope,
                                                     pn_est     => i.aostat,
                                                     pn_fecha   => pn_ffin,
                                                     pn_calif0a => lc_calif0a,
                                                     pn_calif1a => lc_calif1a,
                                                     pn_calif2a => lc_calif2a,
                                                     pn_calif3a => lc_calif3a,
                                                     pn_calif4a => lc_calif4a,
                                                     pn_deccaj  => lc_fecha_caj);
      exception
        when others then
          lc_calif0a   := 100;
          lc_calif1a   := 0;
          lc_calif2a   := 0;
          lc_calif3a   := 0;
          lc_calif4a   := 0;
          lc_fecha_caj := null;
        
      end;
    
      -- 13. Región
      -- 13.1 Región - Nombre
      -- 14. Zona
      -- 14.1 Zona - Nombre
      -- 15. Agencia (Sucursal)
      -- 15.1 Agencia(Sucursal) - Nombre
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => i.aosuc,
                                                pn_regi => lc_regi,
                                                pn_zona => lc_zona,
                                                pn_nsuc => lc_nsuc,
                                                pn_nzon => lc_nzon,
                                                pn_nreg => lc_nreg);
      exception
        when others then
          lc_regi := 0;
          lc_zona := 0;
          lc_nsuc := '';
          lc_nzon := '';
          lc_nreg := '';
        
      end;
    
      -- 16. Analista
    
      begin
        lc_ases := fn_analista_credito(i.aomod,
                                       i.aosuc,
                                       i.aomda,
                                       i.aopap,
                                       i.aocta,
                                       i.aooper,
                                       i.aosbop,
                                       i.aotope);
      exception
        when others then
          lc_ases := '';
      end;
    
      -- 21. Razón social
    
      begin
        lc_perjur := pq_cr_reporte_fondos_p3.fn_obtener_perjur(i.pepais,
                                                               i.petdoc,
                                                               i.pendoc);
      exception
        when others then
          lc_perjur := '';
      end;
    
      -- 22. Apellidos y nombres del cliente
    
      begin
        lc_pernat := pq_cr_reporte_fondos_p3.fn_obtener_pernat(i.pepais,
                                                               i.petdoc,
                                                               i.pendoc);
      exception
        when others then
          lc_pernat := '';
      end;
    
      -- 23. ESTADO DEL CREDITO
    
      begin
        lc_statd := pq_cr_reporte_fondos_p3.fn_estado_desc(i.aostat);
      exception
        when others then
          lc_statd := '';
      end;
    
      -- 31. Monto de cobertura
    
      begin
        --lc_mcob := (lc_pcob / 100 * lc_sdoi);
        lc_mcob := (lc_pcob / 100 * lc_sdoins);
      exception
        when others then
          lc_mcob := 0;
      end;
    
      -- 36. Fecha de último pago    
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_datos_ufecha(pn_cod   => i.pgcod,
                                                          pn_mod   => i.aomod,
                                                          pn_suc   => i.aosuc,
                                                          pn_mda   => i.aomda,
                                                          pn_pap   => i.aopap,
                                                          pn_cta   => i.aocta,
                                                          pn_ope   => i.aooper,
                                                          pn_sbo   => i.aosbop,
                                                          pn_top   => i.aotope,
                                                          pn_fecha => pn_ffin,
                                                          pn_fpagu => lc_fupag, -- Fecha de la última cuota pagada
                                                          pn_fvenu => lc_fvenup); -- Fecha de vencimiento de la última cuota pagada
      exception
        when others then
          lc_fupag  := null;
          lc_fvenup := null;
      end;
    
      -- 34. Nro. cuotas pendientes de pago
    
      begin
        pq_cr_reporte_fondos_p200.sp_fecha_ncuop(i.pgcod,
                                                 i.aomod,
                                                 i.aosuc,
                                                 i.aomda,
                                                 i.aopap,
                                                 i.aocta,
                                                 i.aooper,
                                                 i.aosbop,
                                                 i.aotope,
                                                 lc_fupag,
                                                 lc_ncuop, -- Nro de cuotas pendientes de pago
                                                 lc_ncuopg); -- Nro de cuotas ya pagadas
      exception
        when others then
          lc_ncuop  := 0;
          lc_ncuopg := 0;
      end;
    
      -- Fecha de vencimiento de la próxima cuota impaga
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_impaga(pn_cod    => i.pgcod,
                                                    pn_mod    => i.aomod,
                                                    pn_suc    => i.aosuc,
                                                    pn_mda    => i.aomda,
                                                    pn_pap    => i.aopap,
                                                    pn_cta    => i.aocta,
                                                    pn_ope    => i.aooper,
                                                    pn_sbo    => i.aosbop,
                                                    pn_top    => i.aotope,
                                                    pn_fecha  => pn_ffin,
                                                    pn_fvenuc => lc_fvenuc);
      exception
        when others then
          lc_fvenuc := null;
      end;
    
      -- 37. Días de atraso 
    
      begin
        lc_diat := fn_dias_atraso(pn_ffin, --fecha de proceso
                                  i.pgcod,
                                  i.aomod,
                                  i.aosuc,
                                  i.aomda,
                                  i.aopap,
                                  i.aocta,
                                  i.aooper,
                                  i.aosbop,
                                  i.aotope,
                                  i.aostat,
                                  i.aofvto);
      exception
        when others then
          lc_diat := 0;
      end;
    
      -- 39. Calificación Normal (en números de 100 a 0)
      -- 40. Calificación CPP (en números de 100 a 0)  
      -- 41. Calificación Deficiente (en números de 100 a 0)
      -- 42. Calificación Dudoso (en números de 100 a 0)
      -- 43. Calificación Perdida (en números de 100 a 0  
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_obtener_calf(pn_tdoc   => i.petdoc,
                                                pn_ndoc   => i.pendoc,
                                                pn_fech   => pn_ffin,
                                                pn_calif0 => lc_calif0,
                                                pn_calif1 => lc_calif1,
                                                pn_calif2 => lc_calif2,
                                                pn_calif3 => lc_calif3,
                                                pn_calif4 => lc_calif4,
                                                pn_csbs   => lc_csbs);
      exception
        when others then
          lc_calif0 := 100;
          lc_calif1 := 0;
          lc_calif2 := 0;
          lc_calif3 := 0;
          lc_calif4 := 0;
          lc_csbs   := 0;
      end;
    
      -- 45. CIUU
      -- 46. Actividad económica
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_ciiu_codigo4(p_pais   => i.pepais,
                                                p_petdoc => i.petdoc,
                                                p_pendoc => i.pendoc,
                                                p_ciuu4  => lc_ciiu4,
                                                p_ciuu6  => lc_ciiu6);
      exception
        when others then
          lc_ciiu4 := 0;
          lc_ciiu6 := 0;
      end;
    
      -- 10.2 Descripción de CIUU 
    
      begin
        -- Call the procedure
        if lc_ciiu4 <> 0 then
          pq_cr_reporte_fondos_p3.sp_obtener_ciuu(pn_cciu => lc_ciiu6,
                                                  pn_dciu => lc_acti);
        else
          if lc_ciiu6 <> 0 then
            lc_ciiu4 := to_number(substr(to_char(lc_ciiu6), 1, 4));
          else
            lc_ciiu4 := 0;
          end if;
          lc_acti := '';
        end if;
      
      exception
        when others then
          lc_acti := '';
      end;
    
      -- 35. Fecha de pago de última cuota pagada
    
      begin
        lc_ufpag1 := pq_cr_reporte_fondos_p200.fn_fecha_upago(i.pgcod,
                                                              i.aomod,
                                                              i.aosuc,
                                                              i.aomda,
                                                              i.aopap,
                                                              i.aocta,
                                                              i.aooper,
                                                              i.aosbop,
                                                              i.aotope,
                                                              pn_ffin);
      exception
        when others then
          lc_ufpag1 := null;
      end;
    
      -- 47. Tipo crédito SBS
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_tipo_credito_sbs_vig(pn_cod     => i.pgcod,
                                                          pn_mod     => i.aomod,
                                                          pn_suc     => i.aosuc,
                                                          pn_mda     => i.aomda,
                                                          pn_pap     => i.aopap,
                                                          pn_cta     => i.aocta,
                                                          pn_ope     => i.aooper,
                                                          pn_sbo     => i.aosbop,
                                                          pn_top     => i.aotope,
                                                          pn_fecha   => pn_ffin,
                                                          pn_usuario => pn_usuario,
                                                          pn_ntipo   => lc_pcre,
                                                          pn_nconc   => lc_ncre);
      exception
        when others then
          lc_pcre := 0;
          lc_ncre := '';
      end;
    
      -- Obtención situación contable
      -- 24. Estado contable  -- jrodriguej 30.07.2021
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_scond_c(pn_cod     => i.pgcod,
                                                     pn_mod     => i.aomod,
                                                     pn_suc     => i.aosuc,
                                                     pn_mda     => i.aomda,
                                                     pn_pap     => i.aopap,
                                                     pn_cta     => i.aocta,
                                                     pn_ope     => i.aooper,
                                                     pn_sbo     => i.aosbop,
                                                     pn_top     => i.aotope,
                                                     pn_fecha   => pn_ffin,
                                                     pn_usuario => pn_usuario,
                                                     pn_est     => i.aostat,
                                                     pn_ufech   => lc_ufpag1,
                                                     pn_rubr    => lc_dcon,
                                                     pn_resp    => lc_scon);
      exception
        when others then
          lc_dcon := '';
          lc_scon := '';
      end;
    
      lc_dest := null;
      lc_lest := null;
    
      begin
        if i.aomda = 0 then
          lx_mda := 'PEN';
        else
          lx_mda := 'USD';
        end if;
      end;
    
      -- dias atraso
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_atraso_u(pn_cod   => i.pgcod,
                                                      pn_mod   => i.aomod,
                                                      pn_suc   => i.aosuc,
                                                      pn_mda   => i.aomda,
                                                      pn_pap   => i.aopap,
                                                      pn_cta   => i.aocta,
                                                      pn_ope   => i.aooper,
                                                      pn_sbo   => i.aosbop,
                                                      pn_top   => i.aotope,
                                                      pn_fecha => pn_ffin,
                                                      pn_diat  => lx_diat);
      exception
        when others then
          lx_diat := 0;
      end;
    
      -- Distribución de pago
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_distribuc_pago(pn_cod   => i.pgcod,
                                                    pn_mod   => i.aomod,
                                                    pn_suc   => i.aosuc,
                                                    pn_mda   => i.aomda,
                                                    pn_pap   => i.aopap,
                                                    pn_cta   => i.aocta,
                                                    pn_ope   => i.aooper,
                                                    pn_sbo   => i.aosbop,
                                                    pn_top   => i.aotope,
                                                    pn_fecha => pn_ffin,
                                                    pn_tsum  => lc_tsum,
                                                    pn_gas   => lc_gas,
                                                    pn_mor   => lc_mor,
                                                    pn_int   => lc_int,
                                                    pn_cuo   => lc_cuo,
                                                    pn_icv   => lc_icv,
                                                    pn_pen   => lc_pen);
      exception
        when others then
        
          lc_tsum := 0;
          lc_gas  := 0;
          lc_mor  := 0;
          lc_int  := 0;
          lc_cuo  := 0;
          lc_icv  := 0;
          lc_pen  := 0;
        
      end;
    
      -- '53. Flag de re reprogramación';
      -- '54. Número de reprogramaciones';
      -- '55. Fecha de re reprogramación';
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_repro_dato_jaqa400(pn_cod   => i.pgcod,
                                                 pn_cta   => i.aocta,
                                                 pn_ope   => i.aooper,
                                                 pn_fecha => pn_ffin,
                                                 pn_flag  => lc_lrep,
                                                 pn_nrep  => lc_nrep,
                                                 pn_fech  => lc_frep,
                                                 pn_tabla => lc_tabla,
                                                 
                                                 pn_peri => lc_peri2,
                                                 pn_ncuo => lc_ncuo2,
                                                 pn_fpri => lc_fpri,
                                                 pn_fult => lc_fult);
      exception
        when others then
        
          lc_lrep  := 'NO';
          lc_nrep  := 0;
          lc_frep  := null;
          lc_tabla := '';
          lc_peri2 := 0;
          lc_ncuo2 := 0;
          lc_fpri  := null;
          lc_fult  := null;
        
      end;
      -- -- -- -- -- -- --   -- -- -- -- -- -- -- 
      lc_aostat := i.aostat;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_rubr   => 9300082010000,
                                                           pd_fecha => pn_ffin,
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr  => ln_mhonr,
                                                           pd_fhonr  => ld_fhonr,
                                                           pn_sdohon => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon := 0;
          end; 
          --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,                                                           
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_actual(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tea);
          exception
            when others then
              lc_tea := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes repro
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_repro(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_trep);
          exception
            when others then
              lc_trep := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes moratoria
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => i.pgcod,
                                                           pn_mod   => i.aomod,
                                                           pn_suc   => i.aosuc,
                                                           pn_mda   => i.aomda,
                                                           pn_pap   => i.aopap,
                                                           pn_cta   => i.aocta,
                                                           pn_ope   => i.aooper,
                                                           pn_sbo   => i.aosbop,
                                                           pn_top   => i.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tmor);
          exception
            when others then
              lc_tmor := 0;
          end;
      -- -- -- -- -- -- --   -- -- -- -- -- -- --
    
      begin
        insert into aqpb067
          (aqpb067usur, -- Usuario
           aqpb067pgcod,
           aqpb067aomod,
           aqpb067aosuc, -- 15. Agencia (Sucursal)
           aqpb067aomda,
           aqpb067aopap,
           aqpb067aocta, -- 17. Nro. de cuenta
           aqpb067aooper, -- 18. Nro. de operación
           aqpb067aosbop,
           aqpb067aotope,
           aqpb067esf, -- 3. ESF
           aqpb067csap, -- 4. Número contrato SAP
           aqpb067nrop, -- 5.  Número Préstamo
           aqpb067fval, -- 6.  Fecha de Desembolso 
           
           aqpb067mda, -- 7.  Moneda
           aqpb067sdo, -- 8.  Saldo Insoluto 
           aqpb067mpre, -- 9.  Monto Prepago 
           --aqpb067dcla, -- 10. Distribución clasificación de riesgo (Reportado por Caja al cierre de mes)
           --aqpb067ncla, -- 10.1. Concepto
           
           aqpb067cnoma, -- 10.a Calificación Normal (en números de 100 a 0), reportado por caja al cierre de mes
           aqpb067ccppa, -- 10.b Calificación CPP (en números de 100 a 0), reportado por caja al cierre de mes
           aqpb067cdefa, -- 10.c Calificación Deficiente (en números de 100 a 0), reportado por caja al cierre de mes
           aqpb067cduda, -- 10.d Calificación Dudoso (en números de 100 a 0), reportado por caja al cierre de mes
           aqpb067cpera, -- 10.e Calificación Perdida (en números de 100 a 0), reportado por caja al cierre de mes             
           
           aqpb067dcon, -- 11. Situación contable 
           aqpb067ncon, -- 11.1. Concepto
           aqpb067diatc, -- 12. Días de atraso pago cuota 
           
           aqpb067reg, -- 13. Región
           aqpb067nreg, -- 13.1 Región - Nombre
           aqpb067zon, -- 14. Zona
           aqpb067nzon, -- 14.1 Zona - Nombre
           aqpb067nsuc, -- 15.1 Agencia(Sucursal) - Nombre
           aqpb067ase, -- 16. Analista
           aqpb067tdoc, -- 19. Tipo documento
           aqpb067ndoc, -- 20. Nro. de documento
           aqpb067razn, -- 21. Razón social
           aqpb067rnom, -- 22. Apellidos y nombres del cliente
           aqpb067estn, -- 23. Estado del crédito (vigente, cancelado)
           aqpb067lest, -- 24. Estado contable
           aqpb067cest, -- Concepto
           aqpb067dest, -- 25. Fecha de cambio de estado contable
           aqpb067mdes, -- 26. Monto desembolsado
           aqpb067mcof, -- 27. Monto ingresado a COFIDE (BI)
           aqpb067pper, -- 28. Nro. de cuotas ingresado a COFIDE (BI)
           aqpb067pgra, -- 29. Periodo de gracia ingresado a COFIDE (BI)
           aqpb067pcob, -- 30. % cobertura
           aqpb067mcob, -- 31. Monto de cobertura
           aqpb067fini, -- 32. Fecha inicio de crédito original
           aqpb067ffin, -- 33. Fecha fin de crédito original
           
           aqpb067fvenuc, -- 34. Fecha de vencimiento de la próxima cuota impaga
           aqpb067fvenup, -- 35. Fecha de vencimiento de última cuota pagada
           aqpb067ncuo, -- 36. Nro. cuotas pendientes de pago
           --aqpb067fcuo,    -- 37. Fecha de última cuota pagado
           aqpb067fupag, -- 38. Fecha de pago de última cuota pagada
           aqpb067ncupa, -- 39. NÚMERO DE CUOTAS PAGADAS
           aqpb067mcuop, -- 40. MONTO DE CUOTAS PAGADAS
           --aqpb067dpag,    -- 41. DISTRIBUCION PAGO REALIZADO
           
           aqpb067diat, -- 42. Días de atraso
           aqpb067fcla, -- 43. Fecha clasificación SBS
           aqpb067cnom, -- 44. Calificación Normal (en números de 100 a 0)
           aqpb067ccpp, -- 45. Calificación CPP (en números de 100 a 0)  
           aqpb067cdef, -- 46. Calificación Deficiente (en números de 100 a 0)
           aqpb067cdud, -- 47. Calificación Dudoso (en números de 100 a 0)
           aqpb067cper, -- 48. Calificación Perdida (en números de 100 a 0       
           aqpb067tasa, -- 49. Tasa de interés
           aqpb067ciuu, -- 50. CIUU
           aqpb067actn, -- 51. Actividad económica
           aqpb067tcre, -- 52. Tipo crédito SBS
           aqpb067ncre, -- 52.1 Tipo crédito SBS - Concepto
           aqpb067lrep, -- 53. Flag de re reprogramación
           aqpb067nrep, -- 54. Número de reprogramaciones
           aqpb067frep, -- 55. Fecha de re reprogramación
           aqpb067pfec, -- 56. Fecha de primera cuota de re reprogramación
           aqpb067ncuop, -- 57. Nro. de cuotas posterior a re reprogramación
           aqpb067pgrap, -- 58. Periodo de gracia posterior a re reprogramación
           aqpb067pfinp, -- 59. Fecha de fin de crédito posterior a re reprogramación
           
           aqpb067gas, -- 60. Seguros
           aqpb067mor, -- 61. Interés Moratorio
           aqpb067int, -- 62. Intereses
           aqpb067cuo, -- 63. Capital
           aqpb067icv, -- 64. Interés compensatorio
           aqpb067pen, -- 65. Penalidad
           
           aqpb067sdoins,
           aqpb067feccaj,
           
           aqpb067stat, --- FSD010 estado del crédito
           aqpb067fe99, ----FSD010 fecha de pago
           
           aqpb067ciiuori,
           aqpb067actnomori,
           
           aqpb067fcr,
           aqpb067hcr,
           aqpb067fproc,
           aqpb067mhonr,
           aqpb067fhonr,
           aqpb067chonr,
           aqpb067sdocap,
           aqpb067sdohon,
           aqpb067crehon,
           aqpb067tmor,
           aqpb067tcrepro,
           aqpb067fcest,
           Aqpb067ncer,
          Aqpb067ccob,
          Aqpb067cren,
          Aqpb067cobr,
          Aqpb067chon,
          Aqpb067codi,
          Aqpb067crec)
        values
          (pn_usuario,
           i.pgcod,
           i.aomod,
           i.aosuc,
           i.aomda,
           i.aopap,
           i.aocta,
           i.aooper,
           i.aosbop,
           i.aotope,
           
           lx_esf, -- 3. ESF
           lc_csap, -- 4. Número contrato SAP
           i.prestamo, -- 5.  Número Préstamo
           lc_fdes, -- 6.  Fecha de Desembolso 
           lx_mda, -- 7.  Moneda
           lc_sdoi, -- 8.  Saldo Capital Cancelado 
           lc_mpre, -- 9.  Monto Prepago 
           --lc_dcla, -- 10. Distribución clasificación de riesgo 
           --lc_ncla, -- 10.1. Concepto
           lc_calif0a, -- 10.a Calificación Normal (en números de 100 a 0), reportado por caja al cierre de mes
           lc_calif1a, -- 10.b Calificación CPP (en números de 100 a 0), reportado por caja al cierre de mes
           lc_calif2a, -- 10.c Calificación Deficiente (en números de 100 a 0), reportado por caja al cierre de mes
           lc_calif3a, -- 10.d Calificación Dudoso (en números de 100 a 0), reportado por caja al cierre de mes
           lc_calif4a, -- 10.e Calificación Perdida (en números de 100 a 0), reportado por caja al cierre de mes                          
           
           substr(trim(lc_dcon), 1, 4), -- 11. Situación contable 
           substr(trim(lc_scon), 1, 20), -- 11.1. Concepto
           lx_diat, -- 12. Días de atraso pago cuota 
           
           lc_regi, -- 13. Región
           substr(trim(lc_nreg), 1, 30), -- 13.1 Región - Nombre
           lc_zona, -- 14. Zona
           substr(trim(lc_nzon), 1, 40), -- 14.1 Zona - Nombre
           substr(trim(lc_nsuc), 1, 30), -- 15.1 Agencia(Sucursal) - Nombre
           substr(trim(lc_ases), 1, 10), -- 16. Analista
           i.petdoc, -- 19. Tipo documento
           substr(trim(i.pendoc), 1, 12), -- 20. Nro. de documento
           substr(trim(lc_perjur), 1, 70), -- 21. Razón social
           substr(trim(lc_pernat), 1, 70), -- 22. Apellidos y nombres del cliente
           substr(trim(lc_statd), 1, 30), -- 23. Estado del crédito (vigente, cancelado)
           substr(trim(lc_dest), 1, 4), -- 24. Estado contable
           substr(trim(lc_lest), 1, 20), -- Concepto
           case when ld_fcest > nvl(i.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 (case when ld_fcest > nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) then ld_fcest else lc_frep end )
                 else (case when nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) > nvl(i.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then lc_frep else i.aofe99 end )end, --fecha de cambio de estado, --  25. Fecha de cambio de estado contable
           i.aoimp, -- 26. Monto desembolsado
           lc_mon, -- 27. Monto ingresado a COFIDE (BI)
           lc_ncuo, -- 28. Nro. de cuotas ingresado a COFIDE (BI)
           lc_peri, -- 29. Periodo de gracia ingresado a COFIDE (BI)
           lc_pcob, -- 30. % cobertura
           lc_mcob, -- 31. Monto de cobertura
           lc_fini_cof, --i.aofval, -- 32. Fecha inicio de crédito original
           lc_ffin_cof, --i.aofvto, -- 33. Fecha fin de crédito original
           --i.aofval, -- 32. Fecha inicio de crédito original
           --i.aofvto, -- 33. Fecha fin de crédito original
           
           lc_fvenuc, -- 34. Fecha de vencimiento de la próxima cuota impaga
           lc_fvenup, -- 35. Fecha de vencimiento de última cuota pagada
           lc_ncuop, -- 36. Nro. cuotas pendientes de pago
           lc_ufpag1, --lc_fupag, -- 38. Fecha de cancelación de última cuota pagada
           lc_ncuopg, -- 39. NÚMERO DE CUOTAS PAGADAS
           lc_tsum, -- 40. MONTO DE CUOTAS PAGADAS
           --null,          -- 41. DISTRIBUCION PAGO REALIZADO
           
           lc_diat, -- 42. Días de atraso
           lc_fecha_rcc, -- 43. Fecha clasificación SBS         
           lc_calif0, -- 44. Calificación Normal (en números de 100 a 0)
           lc_calif1, -- 45. Calificación CPP (en números de 100 a 0)  
           lc_calif2, -- 46. Calificación Deficiente (en números de 100 a 0)
           lc_calif3, -- 47. Calificación Dudoso (en números de 100 a 0)
           lc_calif4, -- 48. Calificación Perdida (en números de 100 a 0       
           i.aotasa, -- 49. Tasa de interés
           lc_ciiu4, -- 50. CIUU
           substr(trim(lc_acti), 1, 60), -- 51. Actividad económica
           lc_pcre, -- 52. Tipo crédito SBS
           substr(trim(lc_ncre), 1, 25), -- 52.1 Tipo crédito SBS - Concepto
           lc_lrep, -- 53. Flag de re reprogramación
           lc_nrep, -- 54. Número de reprogramaciones
           lc_frep, -- 55. Fecha de re reprogramación
           lc_fpri, -- 56. Fecha de primera cuota de re reprogramación
           lc_ncuo2, --lc_ncuopg, --Borrar! -- 57. Nro. de cuotas posterior a re reprogramación
           lc_peri2, -- 58. Periodo de gracia posterior a re reprogramación
           lc_fult, -- 59. Fecha de fin de crédito posterior a re reprogramación     
           
           lc_gas, -- 60. Seguros
           lc_mor, -- 61. Interés Moratorio
           lc_int, -- 62. Intereses
           lc_cuo, -- 63. Capital
           lc_icv, -- 64. Interés compensatorio
           lc_pen, -- 65. Penalidad  
           
           case when i.aostat = 90 then 0 else lc_sdoins end, -- 66. Saldo Insoluto 2  
           lc_fecha_caj, -- 67. Fecha de clasificación caja
           
           i.aostat, --- FSD010 estado del crédito
           i.aofe99, ----FSD010 fecha de pago
           
           lc_ciuu1, --ciuu
           lc_dciu1,
           
           to_char(sysdate, 'DD/MM/YYYY'),
           to_char(sysdate, 'HH24:MI:SS'),
           pn_ffin,
           ln_mhonr,
           ld_fhonr,
           lc_eshonr,
           lc_sdoi,
           nvl(ln_sdohon,0),
           lc_sdoi+nvl(ln_sdohon,0),
           lc_tmor,
           lc_trep,
           case when ld_fcest > nvl(i.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 (case when ld_fcest > nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) then ld_fcest else lc_frep end )
                 else (case when nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) > nvl(i.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then lc_frep else i.aofe99 end )end, --fecha de cambio de estado, --  25. Fecha de cambio de estado contable
            lc_ncer,
               lc_ccob, 
               lc_cren,  
               lc_cobr,
               lc_chon,
               lc_codi,
               lc_crec
               );
        commit;
      exception
        when others then
        
          lc_coderr := substr(trim(sqlcode), 1, 100);
          lc_msgerr := substr(trim(sqlerrm), 1, 1000);
        
          begin
            insert into AQPB070E
              (aqpb070etab,
               aqpb070efec,
               aqpb070esuc,
               aqpb070eusr,
               aqpb070ecoe,
               aqpb070emsge,
               aqpb070efcr,
               aqpb070ehcr,
               aqpb070ecta,
               aqpb070eope)
            values
              ('AQPB067',
               pn_ffin,
               pc_sucurs,
               substr(trim(pn_usuario), 1, 10),
               lc_coderr,
               lc_msgerr,
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               ln_cta,
               ln_ope);
            commit;
          exception
            when others then
              null;
          end;
        
      end;
    
    end loop;
  
    for z in verificar_fae_mype() loop
    
      ln_cta := z.cta;
      ln_ope := z.oper;
    
      -- Verificar si hay una cuenta con tipo de operación 550
      begin
        select count(*)
          into lb_550
          from aqpb067 x
         where x.aqpb067usur = pn_usuario
           and x.aqpb067aosuc = pc_sucurs
           and x.aqpb067aocta = z.cta
           and x.aqpb067aooper = z.oper
           and x.aqpb067aotope = 550;
      exception
        when others then
          lb_550 := 0;
      end;
    
      if lb_550 <> 0 then
      
        begin
        
          begin
            select distinct x.aqpb067aomda
              into lb_mda
              from aqpb067 x
             where x.aqpb067usur = pn_usuario
               and x.aqpb067aosuc = pc_sucurs
               and x.aqpb067aocta = z.cta
               and x.aqpb067aooper = z.oper
               and x.aqpb067aotope = 550;
          exception
            when others then
              lb_mda := null;
          end;
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos.sp_verificar_550(pc_mon  => lb_mda,
                                                  pc_suc  => pc_sucurs,
                                                  pn_cta  => z.cta,
                                                  pn_oper => z.oper,
                                                  pc_fech => lb_fec_550);
          exception
            when others then
              lb_fec_550 := null;
          end;
        
          if pn_ffin >= lb_fec_550 then
          
            delete from aqpb067 x
             where x.aqpb067usur = pn_usuario
               and x.aqpb067aosuc = pc_sucurs
               and x.aqpb067aocta = z.cta
               and x.aqpb067aooper = z.oper
               and x.aqpb067aotope <> 550;
            commit;
          
          else
          
            delete from aqpb067 x
             where x.aqpb067usur = pn_usuario
               and x.aqpb067aosuc = pc_sucurs
               and x.aqpb067aocta = z.cta
               and x.aqpb067aooper = z.oper
               and x.aqpb067aotope = 550;
            commit;
          
          end if;
        end;
      
      end if;
    
      --- Verificar si hay una cuenta con estado vigente
      begin
        select 'S'
          into lb_flag_vig
          from aqpb067 x
         where x.aqpb067usur = pn_usuario
           and x.aqpb067aosuc = pc_sucurs
           and x.aqpb067aocta = z.cta
           and x.aqpb067aooper = z.oper
           and x.aqpb067stat <> 99;
      exception
        when others then
          lb_flag_vig := 'N';
      end;
    
      begin
        if lb_flag_vig = 'S' then
          --- Hay vigente, borrar los no vigentes
        
          delete from aqpb067 x
           where x.aqpb067usur = pn_usuario
             and x.aqpb067aosuc = pc_sucurs
             and x.aqpb067aocta = z.cta
             and x.aqpb067aooper = z.oper
             and x.aqpb067stat = 99;
          commit;
        
        else
          --- Solo hay cancelados, dejar el crédito con máxima fecha de cancelación
          select max(x.aqpb067fe99)
            into lb_fmax_anu
            from aqpb067 x
           where x.aqpb067usur = pn_usuario
             and x.aqpb067aosuc = pc_sucurs
             and x.aqpb067aocta = z.cta
             and x.aqpb067aooper = z.oper
             and x.aqpb067stat = 99;
        
          select max(x.aqpb067aosbop)
            into lb_max_sbop
            from aqpb067 x
           where x.aqpb067usur = pn_usuario
             and x.aqpb067aosuc = pc_sucurs
             and x.aqpb067aocta = z.cta
             and x.aqpb067aooper = z.oper
             and x.aqpb067stat = 99
             and x.aqpb067fe99 = lb_fmax_anu;
        
          -- Verificación
          begin
            select count(*)
              into lb_cont_del
              from aqpb067 x
             where x.aqpb067usur = pn_usuario
               and x.aqpb067aosuc = pc_sucurs
               and x.aqpb067aocta = z.cta
               and x.aqpb067aooper = z.oper
               and x.aqpb067stat = 99
               and x.aqpb067fe99 <> lb_fmax_anu;
          exception
            when others then
              lb_cont_del := 0;
          end;
        
          --lb_cont_del = 0; significa que las cancelaciones tienen las mismas fechas
          if lb_cont_del = 0 then
          
            delete from aqpb067 x
             where x.aqpb067usur = pn_usuario
               and x.aqpb067aosuc = pc_sucurs
               and x.aqpb067aocta = z.cta
               and x.aqpb067aooper = z.oper
               and x.aqpb067stat = 99
               and x.aqpb067fe99 <> lb_fmax_anu;
            commit;
          
            delete from aqpb067 x
             where x.aqpb067usur = pn_usuario
               and x.aqpb067aosuc = pc_sucurs
               and x.aqpb067aocta = z.cta
               and x.aqpb067aooper = z.oper
               and x.aqpb067aosbop <> lb_max_sbop
               and x.aqpb067stat = 99
               and x.aqpb067fe99 = lb_fmax_anu;
            commit;
          
          else
            --lb_cont_del = 1; significa que las cancelaciones tienen fechas diferentes a las maximas
            delete from aqpb067 x
             where x.aqpb067usur = pn_usuario
               and x.aqpb067aosuc = pc_sucurs
               and x.aqpb067aocta = z.cta
               and x.aqpb067aooper = z.oper
               and x.aqpb067stat = 99
               and x.aqpb067fe99 <> lb_fmax_anu;
            commit;
          
          end if;
        
        end if;
      
      exception
        when others then
        
          lc_coderr := substr(trim(sqlcode), 1, 100);
          lc_msgerr := substr(trim(sqlerrm), 1, 1000);
        
          begin
            insert into AQPB070E
              (aqpb070etab,
               aqpb070efec,
               aqpb070esuc,
               aqpb070eusr,
               aqpb070ecoe,
               aqpb070emsge,
               aqpb070efcr,
               aqpb070ehcr,
               aqpb070ecta,
               aqpb070eope)
            values
              ('AQPB067',
               pn_ffin,
               pc_sucurs,
               substr(trim(pn_usuario), 1, 10),
               lc_coderr,
               lc_msgerr,
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               ln_cta,
               ln_ope);
            commit;
          exception
            when others then
              null;
          end;
        
      end;
    
    end loop;
  
  exception
    when others then
    
      lc_coderr := substr(trim(sqlcode), 1, 100);
      lc_msgerr := substr(trim(sqlerrm), 1, 1000);
    
      begin
        insert into AQPB070E
          (aqpb070etab,
           aqpb070efec,
           aqpb070esuc,
           aqpb070eusr,
           aqpb070ecoe,
           aqpb070emsge,
           aqpb070efcr,
           aqpb070ehcr,
           aqpb070ecta,
           aqpb070eope)
        values
          ('AQPB067',
           pn_ffin,
           pc_sucurs,
           substr(trim(pn_usuario), 1, 10),
           lc_coderr,
           lc_msgerr,
           to_char(sysdate, 'DD/MM/YYYY'),
           to_char(sysdate, 'HH24:MI:SS'),
           ln_cta,
           ln_ope);
        commit;
      exception
        when others then
          null;
      end;
    
  end sp_reporte_faemype_r1;

  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
  --TABLA AQPB068
  procedure sp_reporte_faemype_r2(pn_ffin    in date,
                                  pc_sucurs  in number,
                                  pn_usuario in char) is
  
    lc_razon  char(100);
    lc_mda    char(10);
    lc_lcan   char(2);
    lc_sdoi   number(17, 2);
    lc_regi   number(9);
    lc_zona   number(9);
    lc_nsuc   char(30);
    lc_nzon   char(40);
    lc_nreg   char(30);
    lc_ases   char(10);
    lc_fecha  date;
    lc_coderr char(100);
    lc_msgerr char(1000);
  
    lc_csap aqpb067b.aqpb067bcsap%type;
    lc_fdes aqpb067b.aqpb067bfdes%type;
    lc_mon  aqpb067b.aqpb067bmon%type;
    lc_ncuo aqpb067b.aqpb067bncuo%type;
    lc_peri aqpb067b.aqpb067bperi%type;
    lc_pcob aqpb067b.aqpb067bpcob%type;
  
    lc_ciuu1 aqpb067b.aqpb067bciiuori%type;
    lc_dciu1 aqpb067b.aqpb067bactnomori%type;
    
    lc_eshonr char(1);
    ln_mhonr number(17,2);
    ld_fhonr date;
    ln_sdohon number(17,2);
           
    lc_lfext char(2);
    lc_fext  date;
  
    ln_cta number(9);
    ln_ope number(9);
  
    lb_flag_vig   char(1);
    lb_fmax_anu   date;
    lc_saldo_ccan number(17, 2);
    lc_upago_ccan number(17, 2);
    lc_sdoins     number(17, 2);
    --lb_flag_back  number(3);
    --lc_nro_mes    number(3);
    lc_fini_cof   date;
    lc_ffin_cof   date;
  
    lc_gas  number(16, 2);
    lc_mor  number(16, 2);
    lc_int  number(16, 2);
    lc_cuo  number(16, 2);
    lc_icv  number(16, 2);
    lc_pen  number(16, 2);
    lc_tsum number(16, 2);
  
    lc_fecha_can date;
    lb_550       number(3);
    lb_fec_550   date;
    lb_mda       number(4);
    lb_max_sbop  number(3);
    lb_cont_del  number(3);
    lc_sdoi_act  number(17, 2);
    
    lc_tea number;
    ld_fcest date;
    lc_tmor number;
    lc_trep number;
  
    cursor reporte_fae_mype2 is
    
    -- FAE 1: Vigentes MYPE 2
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             r.scsdo,
             0 estado
        from fsd010 t,
             fsd011 r,
             fsr008 x,
             --fsr011 f,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where r.pgcod = t.pgcod
         and r.scmod = t.aomod
            --and r.scsuc = t.aosuc -- jrodriguej 28.06.2021
         and r.scmda = t.aomda
         and r.scpap = t.aopap
         and r.sccta = t.aocta
         and r.scoper = t.aooper
            --and r.scsbop = t.aosbop
            --and r.sctope = t.aotope
            
            --and t.aomod <> 419
         and t.aomod in (select modulo
                           from fst111
                          where dscod = 50
                            and modulo not in (29, 120, 144))
         and t.aofval <= pn_ffin
         and t.aostat <> 99
            
         and t.pgcod = x.pgcod
         and t.aocta = x.ctnro
         and x.ttcod = 1
         and x.cttfir = 'T'
           
         and g.aqpb067bcod = t.pgcod
         and g.aqpb067bmod = t.aomod
            --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
         and g.aqpb067bmda = t.aomda
         and g.aqpb067bpap = t.aopap
         and g.aqpb067bcta = t.aocta
         and g.aqpb067bope = t.aooper
            --and g.aqpb067bsbo = t.aosbop
            --and g.aqpb067btop = t.aotope
            
           
         and t.aosuc = pc_sucurs
            -- and (t.aomod <> 101 or t.aotope <> 354) -- jrodriguej 29.06.2021
         and (t.aomod, t.aotope) not in (select 101, 354 from dual) -- jrodriguej 29.06.2021
      
      union
      
      -- FAE 1: CANCELADOS
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0 scsdo, --r.scsdo,
             
             99 estado
      
        from fsd010 t,
             fsr008 x,
             --fsd011 r,
             --fsr011 f,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat = 99
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
      
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      --and g.aqpb067btop = t.aotope      
      
       and t.aosuc = pc_sucurs
      -- and (t.aomod <> 101 or t.aotope <> 354) -- jrodriguej 29.06.2021
       and (t.aomod, t.aotope) not in (select 101, 354 from dual) -- jrodriguej 29.06.2021
      
      union
      
      -- FAE 2: VIGENTES
      select t.pgcod,
             
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             r.scsdo,
             0 estado
      
        from fsd010 t,
             FSD011 r, ---> a fsh012
             fsr008 x,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      -- FSD010 // FSD011
       r.pgcod = t.pgcod
       and r.scmod = t.aomod
      --and r.scsuc = t.aosuc -- jrodriguej 28.06.2021
       and r.scmda = t.aomda
       and r.scpap = t.aopap
       and r.sccta = t.aocta
       and r.scoper = t.aooper
      --and r.scsbop = t.aosbop
      --and r.sctope = t.aotope       
      
      --t.aomod <> 419
       and t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat <> 99
      
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      --and g.aqpb067btop = t.aotope
      
       and t.aosuc = pc_sucurs
       and t.aomod = 101
       and t.aotope = 354
      
      union
      -- FAE 2: CANCELADOS
      select t.pgcod,
             
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0 scsdo, --r.scsdo,
             99 estado
      
        from fsd010 t,
             --FSD011 r, ---> a fsh012
             fsr008 x,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat = 99
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      --and g.aqpb067btop = t.aotope
      
       and t.aosuc = pc_sucurs
       and t.aomod = 101
       and t.aotope = 354
      
      ;
  
    cursor reporte_fae_mype2_h is
    --- FAE 1: VIGENTES
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             --(r.bcsdmn * -1) scsdo,
             (r.aqpb070asdmn * -1) scsdo,
             r.aqpb070aprod aostat, --t.aostat,
             0 estado
      
        from fsd010   t,
             fsr008   x,
             aqpb070a r, ---fsh012 r, ---> a fsh012
             --fsr011 f,
             --fsd014 h, -- jrodriguej 28.06.2021
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      
      
      -- FSD010 // FSD011
       r.aqpb070ausur = pn_usuario
      --and r.aqpb070atabla = 'FAE2'
       and r.aqpb070aemp = t.pgcod
      --and r.aqpb070arubr = h.rubro -- jrodriguej 28.06.2021
       and r.aqpb070amod = t.aomod
      --and r.aqpb070asuc = t.aosuc -- jrodriguej 28.06.2021
       and r.aqpb070amda = t.aomda
       and r.aqpb070apap = t.aopap
       and r.aqpb070acta = t.aocta
       and r.aqpb070aoper = t.aooper
      ----and r.bcsbop = t.aosbop
      --and r.aqpb070atop = t.aotope
      --and r.bcfech = pn_ffin        
      
      --and t.aomod <> 419
       and t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and (t.aostat <> 99 or (t.aostat = 99 and t.aofe99 > pn_ffin))
      
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
     
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      
       and t.aosuc = pc_sucurs
      --and (t.aomod <> 101 or t.aotope <> 354) -- jrodriguej 29.06.2021
       and (t.aomod, t.aotope) not in (select 101, 354 from dual) -- jrodriguej 29.06.2021
      
      
      union
      
      -- FAE 1: CANCELADOS
      
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0 scsdo,
             99 aostat, --t.aostat,
             99 estado
      
        from fsd010 t,
             fsr008 x,
             --fsh012 r, ---> a fsh012
             --fsr011 f,
             --fsd014 h, -- jrodriguej 28.06.2021
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat = 99
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
      
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
           
       and t.aosuc = pc_sucurs
      --and (t.aomod <> 101 or t.aotope <> 354)  -- jrodriguej 29.06.2021
       and (t.aomod, t.aotope) not in (select 101, 354 from dual) -- jrodriguej 29.06.2021
      
      union
      
      -- FAE 2: VIGENTES
      select t.pgcod,
             
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             --(r.bcsdmn * -1) scsdo,
             (r.aqpb070asdmn * -1) scsdo,
             r.aqpb070aprod aostat, --t.aostat,
             0 estado
      
        from fsd010   t,
             aqpb070a r, --fsh012 r, ---> a fsh012
             fsr008   x,
             --fsd014 h, -- jrodriguej 28.06.2021
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
            
      -- FSD010 // FSD011
       r.aqpb070ausur = pn_usuario
      --and r.aqpb070atabla = 'FAE2'
       and r.aqpb070aemp = t.pgcod
      --and r.aqpb070arubr = h.rubro -- jrodriguej 29.06.2021
       and r.aqpb070amod = t.aomod
      --and r.aqpb070asuc = t.aosuc -- jrodriguej 28.06.2021
       and r.aqpb070amda = t.aomda
       and r.aqpb070apap = t.aopap
       and r.aqpb070acta = t.aocta
       and r.aqpb070aoper = t.aooper
      
      --and t.aomod <> 419
       and t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and (t.aostat <> 99 or (t.aostat = 99 and t.aofe99 > pn_ffin))
      
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      --and g.aqpb067btop = t.aotope
      
       and t.aosuc = pc_sucurs
       and t.aomod = 101
       and t.aotope = 354
           
      UNION
      -- FAE 2: CANCELADOS
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0 scsdo,
             99 aostat, --t.aostat,
             99 estado
      
        from fsd010 t,
             fsr008 x,
             --fsh012 r, ---> a fsh012
             --fsr011 f,
             --fsd014 h, -- jrodriguej 28.06.2021
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat = 99
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
      
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      -- AQPB067B // FSD010  
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      --and g.aqpb067btop = t.aotope
      
       and t.aosuc = pc_sucurs
       and t.aomod = 101
       and t.aotope = 354
      
      ;
  
    cursor reporte_fae_mype2_200 is
    -- FAE 1: Vigentes
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0 estado
      
        from fsd010 t,
             fsr008 x,
             --fsr011 f, ---> quita
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      -- FSD010 // FSD011
       t.pgcod = 1
       and t.aomod in (200,33)
       and t.aofval <= pn_ffin
       --and t.aostat <> 99
       and (t.aostat <> 99 or (t.aostat = 99 and t.aofe99 > pn_ffin))
       
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
      --and g.aqpb067bmod = t.aomod -- jrodriguej 30.07.2021
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      -- and g.aqpb067btop = t.aotope
      
      -- FILTRO FAE 1  
       and t.aosuc = pc_sucurs
       and (t.aomod, t.aotope) not in (select 200, 354 from dual) -- jrodriguej 29.06.2021
      
      union
      
      -- fae 1:CANCELADOS
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             99 estado
      
        from fsd010 t,
             fsr008 x,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where t.pgcod = 1
         and t.aomod in (200,33)
         and t.aofval <= pn_ffin
         and t.aostat = 99
         and not exists
       (select 'x'
                from fsd010 l
               where l.pgcod = t.pgcod
                 and l.aomda = t.aomda
                 and l.aopap = t.aopap
                 and l.aocta = t.aocta
                 and l.aooper = t.aooper
                 and l.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144))
                 and l.aostat <> 99)
         and t.aofe99 =
             (select max(h.aofe99)
                from fsd010 h
               where h.pgcod = t.pgcod
                    --and h.aomod = t.aomod
                    --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
                 and h.aomda = t.aomda
                 and h.aopap = t.aopap
                 and h.aocta = t.aocta
                 and h.aooper = t.aooper
                    --and r.scsbop = t.aosbop
                    --and h.aotope = t.aotope
                 and h.aofe99 <= pn_ffin
                    --and h.aomod <> 419
                 and h.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144)))
            -- FSD010 // FSR008
         and t.pgcod = x.pgcod
         and t.aocta = x.ctnro
         and x.ttcod = 1
         and x.cttfir = 'T'
            -- AQPB067B // FSD010 
         and g.aqpb067bcod = t.pgcod
            --and g.aqpb067bmod = t.aomod -- jrodriguej 30.07.2021
            --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
         and g.aqpb067bmda = t.aomda
         and g.aqpb067bpap = t.aopap
         and g.aqpb067bcta = t.aocta
         and g.aqpb067bope = t.aooper
            --and g.aqpb067bsbo = t.aosbop
            --and g.aqpb067btop = t.aotope
            
         and t.aosuc = pc_sucurs
         and (t.aomod, t.aotope) not in (select 200, 354 from dual) -- jrodriguej 29.06.2021
      
      union
      
      -- Vigentes del FAE 2
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0 estado
      
        from fsd010 t,
             fsr008 x,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where t.pgcod = 1
         and t.aomod in (200,33)
         and t.aofval <= pn_ffin
         --and t.aostat <> 99
         and (t.aostat <> 99 or (t.aostat = 99 and t.aofe99 > pn_ffin))
         
            -- FSD010 // FSR008
         and t.pgcod = x.pgcod
         and t.aocta = x.ctnro
         and x.ttcod = 1
         and x.cttfir = 'T'
            -- AQPB067B // FSD010 
         and g.aqpb067bcod = t.pgcod
            --and g.aqpb067bmod = t.aomod -- jrodriguej 30.07.2021
            --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
         and g.aqpb067bmda = t.aomda
         and g.aqpb067bpap = t.aopap
         and g.aqpb067bcta = t.aocta
         and g.aqpb067bope = t.aooper
            --and g.aqpb067bsbo = t.aosbop
            -- and g.aqpb067btop = t.aotope
            
         and t.aosuc = pc_sucurs
            --and t.aomod = 101
         and t.aotope = 354
      
      union
      
      -- Cancelados del FAE 2
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             99 estado
      
        from fsd010 t,
             fsr008 x,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where t.pgcod = 1
         and t.aomod in (200,33)
         and t.aofval <= pn_ffin
         and t.aostat = 99
            
         and not exists (select 'x'
                from fsd010 l
               where l.pgcod = t.pgcod
                 and l.aomda = t.aomda
                 and l.aopap = t.aopap
                 and l.aocta = t.aocta
                 and l.aooper = t.aooper
                 and l.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144))
                 and l.aostat <> 99)
         and t.aofe99 =
             (select max(h.aofe99)
                from fsd010 h
               where h.pgcod = t.pgcod
                    --and h.aomod = t.aomod
                    --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
                 and h.aomda = t.aomda
                 and h.aopap = t.aopap
                 and h.aocta = t.aocta
                 and h.aooper = t.aooper
                    --and r.scsbop = t.aosbop
                    --and h.aotope = t.aotope
                 and h.aofe99 <= pn_ffin
                    --and h.aomod <> 419
                 and h.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144)))
            
            -- FSD010 // FSR008
         and t.pgcod = x.pgcod
         and t.aocta = x.ctnro
         and x.ttcod = 1
         and x.cttfir = 'T'
            -- AQPB067B // FSD010 
         and g.aqpb067bcod = t.pgcod
            --and g.aqpb067bmod = t.aomod -- jrodriguej 30.07.2021
            --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
         and g.aqpb067bmda = t.aomda
         and g.aqpb067bpap = t.aopap
         and g.aqpb067bcta = t.aocta
         and g.aqpb067bope = t.aooper
            --and g.aqpb067bsbo = t.aosbop
            --and g.aqpb067btop = t.aotope
            
         and t.aosuc = pc_sucurs
            --and t.aomod = 101
         and t.aotope = 354
      
      ;
  
    cursor verificar_fae_mype is
      select x.aqpb068usur usur,
             x.aqpb068aosuc suc,
             x.aqpb068aocta cta,
             x.aqpb068aooper oper,
             count(*) total
        from aqpb068 x
       where x.aqpb068usur = pn_usuario
         and x.aqpb068aosuc = pc_sucurs
       group by x.aqpb068usur,
                x.aqpb068aosuc,
                x.aqpb068aocta,
                x.aqpb068aooper
      having count(*) > 1;
  
  begin
  
    -- 1. Nro meses RCC
    /*begin
      select x.tp1nro1
        into lc_nro_mes
        from fst198 x
       where x.TP1COD = 1
         and x.TP1COD1 = 11144
         and x.TP1CORR1 = 10
         and x.tp1corr2 = 2
         and x.tp1corr3 = 4;
    exception
      when others then
        lc_nro_mes := 1;
    end;*/
  
    select t.pgfape into lc_fecha from fst017 t where t.pgcod = 1;
    --1. Borrar
    --delete from aqpb068 t where trim(t.aqpb068usur) = pn_usuario;
    --commit;
  
    --2. Procesar
    if lc_fecha = pn_ffin then
      begin
      
        for k in reporte_fae_mype2() loop
        
          ln_cta := k.aocta;
          ln_ope := k.aooper;
        
          -- 1. Código SAP COFIDE
          begin
          
            pq_cr_reporte_fondos.sp_plantilla_faemype_r1(pn_cod   => k.pgcod,
                                                         pn_mod   => k.aomod,
                                                         pn_suc   => k.aosuc,
                                                         pn_mda   => k.aomda,
                                                         pn_pap   => k.aopap,
                                                         pn_cta   => k.aocta,
                                                         pn_ope   => k.aooper,
                                                         pn_sbo   => k.aosbop,
                                                         pn_top   => k.aotope,
                                                         pn_fecha => pn_ffin,
                                                         pn_csap  => lc_csap,
                                                         pn_fdes  => lc_fdes,
                                                         pn_mon   => lc_mon,
                                                         pn_ncuo  => lc_ncuo,
                                                         pn_peri  => lc_peri,
                                                         pn_pcob  => lc_pcob,
                                                         pn_fini  => lc_fini_cof,
                                                         pn_ffin  => lc_ffin_cof,
                                                         pn_ciuu  => lc_ciuu1,
                                                         pn_dciu  => lc_dciu1
                                                         
                                                         );
          
          exception
            when others then
              lc_csap     := null;
              lc_fdes     := null;
              lc_mon      := null;
              lc_ncuo     := null;
              lc_peri     := null;
              lc_pcob     := null;
              lc_fini_cof := null;
              lc_ffin_cof := null;
              lc_ciuu1    := null;
              lc_dciu1    := null;
          end;
        
          begin
            lc_razon := pq_cr_reporte_fondos_p3.fn_obtener_nombre(k.pepais,
                                                                  k.petdoc,
                                                                  k.pendoc);
          exception
            when others then
              lc_razon := '';
          end;
        
          -- 6. Moneda (PEN)
          begin
            if k.aomda = 0 then
              lc_mda := 'PEN';
            else
              lc_mda := 'USD';
            end if;
          end;
        
          -- 9.  Saldo capital cancelado
          begin
            lc_sdoi := pq_cr_reporte_fondos_p3.fn_obtener_sdocap(k.pgcod,
                                                                 k.aomod,
                                                                 k.aosuc,
                                                                 k.aomda,
                                                                 k.aopap,
                                                                 k.aocta,
                                                                 k.aooper,
                                                                 k.aosbop,
                                                                 k.aotope,
                                                                 pn_ffin,
                                                                 pn_usuario);
          exception
            when others then
              lc_sdoi := 0;
          end;
        
          -- Flag de desistimiento o extorno
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_repro_extorno(pn_cod   => k.pgcod,
                                                     pn_cta   => k.aocta,
                                                     pn_ope   => k.aooper,
                                                     pn_fecha => pn_ffin,
                                                     pn_flag  => lc_lfext,
                                                     pn_fech  => lc_fext);
          exception
            when others then
              lc_lfext := 'NO';
              lc_fext  := null;
          end;
        
          -- 12. Región
          -- 12.1 Región - Nombre
          -- 13. Zona   
          -- 13.1 Zona - Nombre
          -- 14 Agencia(Sucursal) 
          -- 14.1 Agencia(Sucursal) - Nombre
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => k.aosuc,
                                                    pn_regi => lc_regi,
                                                    pn_zona => lc_zona,
                                                    pn_nsuc => lc_nsuc,
                                                    pn_nzon => lc_nzon,
                                                    pn_nreg => lc_nreg);
          exception
            when others then
              lc_regi := 0;
              lc_zona := 0;
              lc_nsuc := '';
              lc_nzon := '';
              lc_nreg := '';
          end;
        
          -- 15. Analista
          begin
            lc_ases := fn_analista_credito(k.aomod,
                                           k.aosuc,
                                           k.aomda,
                                           k.aopap,
                                           k.aocta,
                                           k.aooper,
                                           k.aosbop,
                                           k.aotope);
          exception
            when others then
              lc_ases := '';
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
          -- *** Saldo capital cancelado
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_saldo_cap_cancel_Fae(pn_cod   => k.pgcod,
                                                            pn_mod   => k.aomod,
                                                            pn_suc   => k.aosuc,
                                                            pn_mda   => k.aomda,
                                                            pn_pap   => k.aopap,
                                                            pn_cta   => k.aocta,
                                                            pn_ope   => k.aooper,
                                                            pn_sbo   => k.aosbop,
                                                            pn_top   => k.aotope,
                                                            pn_fecha => pn_ffin,
                                                            pn_saldo => lc_saldo_ccan,
                                                            pn_upago => lc_upago_ccan);
          exception
            when others then
              lc_saldo_ccan := 0;
              lc_upago_ccan := 0;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    
          /*      
          begin
            --- jrodriguej 07.04.2021
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_sald_insoluto(pn_cod   => k.pgcod,
                                                             pn_mod   => k.aomod,
                                                             pn_suc   => k.aosuc,
                                                             pn_mda   => k.aomda,
                                                             pn_pap   => k.aopap,
                                                             pn_cta   => k.aocta,
                                                             pn_ope   => k.aooper,
                                                             pn_sbo   => k.aosbop,
                                                             pn_top   => k.aotope,
                                                             pn_fecha => pn_ffin,
                                                             pn_sald  => lc_sdoins);
          exception
            when others then
              lc_sdoins := 0;
          end;
          */
          -- Saldo Insoluto Real
          begin
            --- jrodriguej 03.03.2021                                           
          
            pq_cr_reporte_fondos.sp_obtener_sald_insol2_h(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_indi  => 2, -- FAE
                                                           pn_stat  => k.estado,
                                                           pn_sald  => lc_sdoins);
          
          exception
            when others then
              lc_sdoins := 0;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          
          -- Distribución de pago
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_distribuc_pago_mes(pn_cod   => k.pgcod,
                                                          pn_mod   => k.aomod,
                                                          pn_suc   => k.aosuc,
                                                          pn_mda   => k.aomda,
                                                          pn_pap   => k.aopap,
                                                          pn_cta   => k.aocta,
                                                          pn_ope   => k.aooper,
                                                          pn_sbo   => k.aosbop,
                                                          pn_top   => k.aotope,
                                                          pn_fecha => pn_ffin,
                                                          pn_tsum  => lc_tsum,
                                                          pn_gas   => lc_gas,
                                                          pn_mor   => lc_mor,
                                                          pn_int   => lc_int,
                                                          pn_cuo   => lc_cuo,
                                                          pn_icv   => lc_icv,
                                                          pn_pen   => lc_pen);
          
          exception
            when others then
            
              lc_tsum := 0;
              lc_gas  := 0;
              lc_mor  := 0;
              lc_int  := 0;
              lc_cuo  := 0;
              lc_icv  := 0;
              lc_pen  := 0;
          end;
        
          if k.aostat <> 99 then
            lc_lcan := 'NO';
          else
            lc_lcan := 'SI';
          end if;
        
          lc_fecha_can := k.aofe99;
          if lc_fecha_can > pn_ffin then
            lc_fecha_can := null;
            lc_lcan      := 'NO';
          end if;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,
                                                           pn_rubr   => 9300082010000,
                                                           pd_fecha => pn_ffin,
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr  => ln_mhonr,
                                                           pd_fhonr  => ld_fhonr,
                                                           pn_sdohon => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon := 0;
          end; 
          --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,                                                           
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_actual(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tea);
          exception
            when others then
              lc_tea := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes repro
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_repro(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_trep);
          exception
            when others then
              lc_trep := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes moratoria
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tmor);

          exception
            when others then
              lc_tmor := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
          begin
            insert into aqpb068
              (aqpb068usur, -- Usuario
               aqpb068pgcod,
               aqpb068aomod,
               aqpb068aosuc, -- 14. Agencia, sucursal
               aqpb068aomda,
               aqpb068aopap,
               aqpb068aocta, -- 16. Nro. de cuenta
               aqpb068aooper, -- 17. Nro. de operación
               aqpb068aosbop,
               aqpb068aotope,
               aqpb068csap, -- 1. Código SAP
               aqpb068tdoc, -- 2. Tipo De documento
               aqpb068ndoc, -- 2.1. Nro. De documento
               aqpb068razn, -- 3. Apellidos y nombres del cliente (o Razón Social)
               aqpb068mnto, -- 4. Monto de capital reprogramado enviado a COFIDE
               aqpb068sdoa, -- 5. Saldo de capital actual
               aqpb068mda, -- 6. Moneda (PEN)
               aqpb068lcan, -- 7. Flag de cancelación
               aqpb068fcan, -- 8. Fecha de cancelación 
               aqpb068sdoc, -- 9.  Saldo capital cancelado
               
               aqpb068ldes, -- 10. Flag de desistimiento o extorno
               aqpb068fdes, -- 11. Fecha de desistimiento o extorno
               aqpb068reg, -- 12. Región
               aqpb068nreg, -- 12.1 Región - Nombre
               aqpb068zon, -- 13. Zona   
               aqpb068nzon, -- 13.1 Zona - Nombre
               aqpb068nsuc, -- 14.1 Agencia(Sucursal) - Nombre
               aqpb068ase, -- 15. Analista
               
               aqpb068sdo, -- 16. Saldo Insoluto
               
               aqpb068stat,
               aqpb068fe99,
               
               aqpb068fcr,
               aqpb068hcr,
               aqpb068fproc,
               aqpb068mhonr,
               aqpb068fhonr,
               aqpb068chonr,
               aqpb068sdocap,
               aqpb068sdohon,
               aqpb068crehon,
               aqpb068tmor,
               aqpb068tcrepro,
               aqpb068fcest)
            values
              (pn_usuario, -- Usuario
               k.pgcod,
               k.aomod,
               k.aosuc, -- 14. Agencia, sucursal
               k.aomda,
               k.aopap,
               k.aocta, -- 16. Nro. de cuenta
               k.aooper, -- 17. Nro. de operación
               k.aosbop,
               k.aotope,
               lc_csap, -- 1. Código SAP
               k.petdoc, -- 2. Tipo De documento
               substr(trim(k.pendoc), 1, 12), -- 2.1. Nro. De documento
               substr(trim(lc_razon), 1, 50), -- 3. Apellidos y nombres del cliente (o Razón Social)
               lc_mon, -- 4. Monto de capital reprogramado enviado a COFIDE
               (k.scsdo * -1), -- 5. Saldo de capital actual
               trim(lc_mda), -- 6. Moneda (PEN)
               lc_lcan, -- 7. Flag de cancelación
               lc_fecha_can, --k.aofe99, -- 8. Fecha de cancelación 
               lc_cuo, --lc_saldo_ccan, --lc_sdoi, -- 9.  Saldo capital cancelado
               
               lc_lfext, -- 10. Flag de desistimiento o extorno
               lc_fext, -- 11. Fecha de desistimiento o extorno
               lc_regi, -- 12. Región
               substr(trim(lc_nreg), 1, 30), -- 12.1 Región - Nombre
               lc_zona, -- 13. Zona   
               substr(trim(lc_nzon), 1, 40), -- 13.1 Zona - Nombre
               substr(trim(lc_nsuc), 1, 30), -- 14.1 Agencia(Sucursal) - Nombre
               substr(trim(lc_ases), 1, 10), -- 15. Analista
               
               lc_sdoins, -- 16. Saldo Insoluto
               
               k.aostat,
               k.aofe99,
               
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               pn_ffin,
               ln_mhonr,
               ld_fhonr,
               lc_eshonr,
               lc_sdoi,
               ln_sdohon,
               lc_sdoi+ ln_sdohon,
               lc_tmor,
               lc_trep,
                case when ld_fcest > nvl(k.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 ld_fcest 
                 else  k.aofe99 end --fecha de cambio de estado, --  25. Fecha de cambio de estado contable
           );
            commit;
          exception
            when others then
            
              lc_coderr := substr(trim(sqlcode), 1, 100);
              lc_msgerr := substr(trim(sqlerrm), 1, 1000);
            
              begin
                insert into AQPB070E
                  (aqpb070etab,
                   aqpb070efec,
                   aqpb070esuc,
                   aqpb070eusr,
                   aqpb070ecoe,
                   aqpb070emsge,
                   aqpb070efcr,
                   aqpb070ehcr,
                   aqpb070ecta,
                   aqpb070eope)
                values
                  ('AQPB068',
                   pn_ffin,
                   pc_sucurs,
                   substr(trim(pn_usuario), 1, 10),
                   lc_coderr,
                   lc_msgerr,
                   to_char(sysdate, 'DD/MM/YYYY'),
                   to_char(sysdate, 'HH24:MI:SS'),
                   ln_cta,
                   ln_ope);
                commit;
              exception
                when others then
                  null;
              end;
          end;
        
        end loop;
      
      end;
    else
      begin
      
        for k in reporte_fae_mype2_h() loop
        
          ln_cta := k.aocta;
          ln_ope := k.aooper;
        
          -- 1. Código SAP COFIDE
          begin
          
            pq_cr_reporte_fondos.sp_plantilla_faemype_r1(pn_cod   => k.pgcod,
                                                         pn_mod   => k.aomod,
                                                         pn_suc   => k.aosuc,
                                                         pn_mda   => k.aomda,
                                                         pn_pap   => k.aopap,
                                                         pn_cta   => k.aocta,
                                                         pn_ope   => k.aooper,
                                                         pn_sbo   => k.aosbop,
                                                         pn_top   => k.aotope,
                                                         pn_fecha => pn_ffin,
                                                         pn_csap  => lc_csap,
                                                         pn_fdes  => lc_fdes,
                                                         pn_mon   => lc_mon,
                                                         pn_ncuo  => lc_ncuo,
                                                         pn_peri  => lc_peri,
                                                         pn_pcob  => lc_pcob,
                                                         pn_fini  => lc_fini_cof,
                                                         pn_ffin  => lc_ffin_cof,
                                                         pn_ciuu  => lc_ciuu1,
                                                         pn_dciu  => lc_dciu1);
          exception
            when others then
              lc_csap     := null;
              lc_fdes     := null;
              lc_mon      := null;
              lc_ncuo     := null;
              lc_peri     := null;
              lc_pcob     := null;
              lc_fini_cof := null;
              lc_ffin_cof := null;
              lc_ciuu1    := null;
              lc_dciu1    := null;
          end;
        
          begin
            lc_razon := pq_cr_reporte_fondos_p3.fn_obtener_nombre(k.pepais,
                                                                  k.petdoc,
                                                                  k.pendoc);
          exception
            when others then
              lc_razon := '';
          end;
        
          -- 6. Moneda (PEN)
          begin
            if k.aomda = 0 then
              lc_mda := 'PEN';
            else
              lc_mda := 'USD';
            end if;
          end;
        
          -- 9.  Saldo capital cancelado
          --if k.aofe99 = '01/01/0001' then
        
          -- 9.  Saldo capital cancelado
          begin
            lc_sdoi := pq_cr_reporte_fondos_p3.fn_obtener_sdocap(k.pgcod,
                                                                 k.aomod,
                                                                 k.aosuc,
                                                                 k.aomda,
                                                                 k.aopap,
                                                                 k.aocta,
                                                                 k.aooper,
                                                                 k.aosbop,
                                                                 k.aotope,
                                                                 pn_ffin,
                                                                 pn_usuario);
          exception
            when others then
              lc_sdoi := 0;
          end;
        
          -- Flag de desistimiento o extorno
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_repro_extorno(pn_cod   => k.pgcod,
                                                     pn_cta   => k.aocta,
                                                     pn_ope   => k.aooper,
                                                     pn_fecha => pn_ffin,
                                                     pn_flag  => lc_lfext,
                                                     pn_fech  => lc_fext);
          exception
            when others then
              lc_lfext := 'NO';
              lc_fext  := null;
          end;
          -- 12. Región
          -- 12.1 Región - Nombre
          -- 13. Zona   
          -- 13.1 Zona - Nombre
          -- 14 Agencia(Sucursal) 
          -- 14.1 Agencia(Sucursal) - Nombre
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => k.aosuc,
                                                    pn_regi => lc_regi,
                                                    pn_zona => lc_zona,
                                                    pn_nsuc => lc_nsuc,
                                                    pn_nzon => lc_nzon,
                                                    pn_nreg => lc_nreg);
          exception
            when others then
              lc_regi := 0;
              lc_zona := 0;
              lc_nsuc := '';
              lc_nzon := '';
              lc_nreg := '';
          end;
        
          -- 15. Analista
          begin
            lc_ases := fn_analista_credito(k.aomod,
                                           k.aosuc,
                                           k.aomda,
                                           k.aopap,
                                           k.aocta,
                                           k.aooper,
                                           k.aosbop,
                                           k.aotope);
          exception
            when others then
              lc_ases := '';
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
          -- *** Saldo capital cancelado
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_saldo_cap_cancel_Fae(pn_cod   => k.pgcod,
                                                            pn_mod   => k.aomod,
                                                            pn_suc   => k.aosuc,
                                                            pn_mda   => k.aomda,
                                                            pn_pap   => k.aopap,
                                                            pn_cta   => k.aocta,
                                                            pn_ope   => k.aooper,
                                                            pn_sbo   => k.aosbop,
                                                            pn_top   => k.aotope,
                                                            pn_fecha => pn_ffin,
                                                            pn_saldo => lc_saldo_ccan,
                                                            pn_upago => lc_upago_ccan);
          exception
            when others then
              lc_saldo_ccan := 0;
              lc_upago_ccan := 0;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          
          /*
          begin
            --- jrodriguej 07.04.2021
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_sald_insoluto(pn_cod   => k.pgcod,
                                                             pn_mod   => k.aomod,
                                                             pn_suc   => k.aosuc,
                                                             pn_mda   => k.aomda,
                                                             pn_pap   => k.aopap,
                                                             pn_cta   => k.aocta,
                                                             pn_ope   => k.aooper,
                                                             pn_sbo   => k.aosbop,
                                                             pn_top   => k.aotope,
                                                             pn_fecha => pn_ffin,
                                                             pn_sald  => lc_sdoins);
          exception
            when others then
              lc_sdoins := 0;
          end;
          */
          -- Saldo Insoluto Real
          begin
            --- jrodriguej 03.03.2021                                           
          
            pq_cr_reporte_fondos_p3.sp_obtener_sald_insol2(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_indi  => 2, -- FAE
                                                           pn_stat  => k.estado,
                                                           pn_sald  => lc_sdoins);
          
          exception
            when others then
              lc_sdoins := 0;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          
          -- Distribución de pago
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_distribuc_pago_mes(pn_cod   => k.pgcod,
                                                          pn_mod   => k.aomod,
                                                          pn_suc   => k.aosuc,
                                                          pn_mda   => k.aomda,
                                                          pn_pap   => k.aopap,
                                                          pn_cta   => k.aocta,
                                                          pn_ope   => k.aooper,
                                                          pn_sbo   => k.aosbop,
                                                          pn_top   => k.aotope,
                                                          pn_fecha => pn_ffin,
                                                          pn_tsum  => lc_tsum,
                                                          pn_gas   => lc_gas,
                                                          pn_mor   => lc_mor,
                                                          pn_int   => lc_int,
                                                          pn_cuo   => lc_cuo,
                                                          pn_icv   => lc_icv,
                                                          pn_pen   => lc_pen);
          
          exception
            when others then
            
              lc_tsum := 0;
              lc_gas  := 0;
              lc_mor  := 0;
              lc_int  := 0;
              lc_cuo  := 0;
              lc_icv  := 0;
              lc_pen  := 0;
          end;
        
          if k.aostat <> 99 then
            lc_lcan := 'NO';
          else
            lc_lcan := 'SI';
          end if;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
          lc_fecha_can := null;
          if k.aostat = 99 then
            lc_fecha_can := k.aofe99;
          
          else----------------              
            lc_cuo := 0;--27092021 dcastro si no esta cancelado, no debe tener saldo capital cancelado
          -------------------
          end if;
          /*              
          lc_fecha_can := k.aofe99;
          if lc_fecha_can > pn_ffin then
            lc_fecha_can := null;
            lc_lcan      := 'NO';
          end if;
          */
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,
                                                           pn_rubr   => 9300082010000,
                                                           pd_fecha => pn_ffin,
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr  => ln_mhonr,
                                                           pd_fhonr  => ld_fhonr,
                                                           pn_sdohon   => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon := 0;
          end; 
          --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,                                                           
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_actual(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tea);
          exception
            when others then
              lc_tea := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes repro
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_repro(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_trep);
          exception
            when others then
              lc_trep := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes moratoria
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tmor);
          exception
            when others then
              lc_tmor := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          
        
          begin
            insert into aqpb068
              (aqpb068usur, -- Usuario
               aqpb068pgcod,
               aqpb068aomod,
               aqpb068aosuc, -- 14. Agencia, sucursal
               aqpb068aomda,
               aqpb068aopap,
               aqpb068aocta, -- 16. Nro. de cuenta
               aqpb068aooper, -- 17. Nro. de operación
               aqpb068aosbop,
               aqpb068aotope,
               aqpb068csap, -- 1. Código SAP
               aqpb068tdoc, -- 2. Tipo De documento
               aqpb068ndoc, -- 2.1. Nro. De documento
               aqpb068razn, -- 3. Apellidos y nombres del cliente (o Razón Social)
               aqpb068mnto, -- 4. Monto de capital reprogramado enviado a COFIDE
               aqpb068sdoa, -- 5. Saldo de capital actual
               aqpb068mda, -- 6. Moneda (PEN)
               aqpb068lcan, -- 7. Flag de cancelación
               aqpb068fcan, -- 8. Fecha de cancelación 
               aqpb068sdoc, -- 9.  Saldo capital cancelado
               
               aqpb068ldes, -- 10. Flag de desistimiento o extorno
               aqpb068fdes, -- 11. Fecha de desistimiento o extorno
               aqpb068reg, -- 12. Región
               aqpb068nreg, -- 12.1 Región - Nombre
               aqpb068zon, -- 13. Zona   
               aqpb068nzon, -- 13.1 Zona - Nombre
               aqpb068nsuc, -- 14.1 Agencia(Sucursal) - Nombre
               aqpb068ase, -- 15. Analista
               
               aqpb068sdo, -- 16. Saldo Insoluto
               
               aqpb068stat,
               aqpb068fe99,
               
               aqpb068fcr,
               aqpb068hcr,
               aqpb068fproc,
               aqpb068mhonr,
               aqpb068fhonr,
               aqpb068chonr,
               aqpb068sdocap,
               aqpb068sdohon,
               aqpb068crehon,
               aqpb068tmor,
               aqpb068tcrepro,
               aqpb068fcest)
            values
              (pn_usuario, -- Usuario
               k.pgcod,
               k.aomod,
               k.aosuc, -- 14. Agencia, sucursal
               k.aomda,
               k.aopap,
               k.aocta, -- 16. Nro. de cuenta
               k.aooper, -- 17. Nro. de operación
               k.aosbop,
               k.aotope,
               lc_csap, -- 1. Código SAP
               k.petdoc, -- 2. Tipo De documento
               substr(trim(k.pendoc), 1, 12), -- 2.1. Nro. De documento
               substr(trim(lc_razon), 1, 50), -- 3. Apellidos y nombres del cliente (o Razón Social)
               lc_mon, -- 4. Monto de capital reprogramado enviado a COFIDE
               k.scsdo, -- 5. Saldo de capital actual
               trim(lc_mda), -- 6. Moneda (PEN)
               lc_lcan, -- 7. Flag de cancelación
               lc_fecha_can, --k.aofe99, -- 8. Fecha de cancelación 
               lc_cuo, --lc_saldo_ccan, --lc_sdoi, -- 9.  Saldo capital cancelado
               
               lc_lfext, -- 10. Flag de desistimiento o extorno
               lc_fext, -- 11. Fecha de desistimiento o extorno
               lc_regi, -- 12. Región
               substr(trim(lc_nreg), 1, 30), -- 12.1 Región - Nombre
               lc_zona, -- 13. Zona   
               substr(trim(lc_nzon), 1, 40), -- 13.1 Zona - Nombre
               substr(trim(lc_nsuc), 1, 30), -- 14.1 Agencia(Sucursal) - Nombre
               substr(trim(lc_ases), 1, 10), -- 15. Analista
               
               lc_sdoins, -- 16. Saldo Insoluto
               
               k.aostat,
               k.aofe99,
               
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               pn_ffin,
               ln_mhonr,
               ld_fhonr,
               lc_eshonr,
               lc_sdoi,
               ln_sdohon,
               lc_sdoi+ln_sdohon,
               lc_tmor,
               lc_trep,
               case when ld_fcest > nvl(k.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 ld_fcest 
                 else  k.aofe99 end --fecha de cambio de estado, --  25. Fecha de cambio de estado contable
                   );
            commit;
          exception
            when others then
            
              lc_coderr := substr(trim(sqlcode), 1, 100);
              lc_msgerr := substr(trim(sqlerrm), 1, 1000);
            
              begin
                insert into AQPB070E
                  (aqpb070etab,
                   aqpb070efec,
                   aqpb070esuc,
                   aqpb070eusr,
                   aqpb070ecoe,
                   aqpb070emsge,
                   aqpb070efcr,
                   aqpb070ehcr,
                   aqpb070ecta,
                   aqpb070eope)
                values
                  ('AQPB068',
                   pn_ffin,
                   pc_sucurs,
                   substr(trim(pn_usuario), 1, 10),
                   lc_coderr,
                   lc_msgerr,
                   to_char(sysdate, 'DD/MM/YYYY'),
                   to_char(sysdate, 'HH24:MI:SS'),
                   ln_cta,
                   ln_ope);
                commit;
              exception
                when others then
                  null;
              end;
            
          end;
        
        end loop;
      
      end;
    end if;
  
    --- Créditos con módulo 200     -- jrodriguej  30.07.2021  
    for k in reporte_fae_mype2_200() loop
    
      ln_cta := k.aocta;
      ln_ope := k.aooper;
    
      -- 1. Código SAP COFIDE
      begin
      
        pq_cr_reporte_fondos_p200.sp_plantilla_faemype_r1(pn_cod   => k.pgcod,
                                                          pn_mod   => k.aomod,
                                                          pn_suc   => k.aosuc,
                                                          pn_mda   => k.aomda,
                                                          pn_pap   => k.aopap,
                                                          pn_cta   => k.aocta,
                                                          pn_ope   => k.aooper,
                                                          pn_sbo   => k.aosbop,
                                                          pn_top   => k.aotope,
                                                          pn_fecha => pn_ffin,
                                                          pn_csap  => lc_csap,
                                                          pn_fdes  => lc_fdes,
                                                          pn_mon   => lc_mon,
                                                          pn_ncuo  => lc_ncuo,
                                                          pn_peri  => lc_peri,
                                                          pn_pcob  => lc_pcob,
                                                          pn_fini  => lc_fini_cof,
                                                          pn_ffin  => lc_ffin_cof,
                                                          pn_ciuu  => lc_ciuu1,
                                                          pn_dciu  => lc_dciu1);
      exception
        when others then
          lc_csap     := null;
          lc_fdes     := null;
          lc_mon      := null;
          lc_ncuo     := null;
          lc_peri     := null;
          lc_pcob     := null;
          lc_fini_cof := null;
          lc_ffin_cof := null;
          lc_ciuu1    := null;
          lc_dciu1    := null;
      end;
    
      begin
        lc_razon := pq_cr_reporte_fondos_p3.fn_obtener_nombre(k.pepais,
                                                              k.petdoc,
                                                              k.pendoc);
      exception
        when others then
          lc_razon := '';
      end;
    
      -- 6. Moneda (PEN)
      begin
        if k.aomda = 0 then
          lc_mda := 'PEN';
        else
          lc_mda := 'USD';
        end if;
      end;
    
      -- 9.  Saldo capital cancelado
      --if k.aofe99 = '01/01/0001' then
    
      -- 9.  Saldo capital cancelado
      begin
        lc_sdoi := pq_cr_reporte_fondos_p200.fn_obtener_sdocap(k.pgcod,
                                                               k.aomod,
                                                               k.aosuc,
                                                               k.aomda,
                                                               k.aopap,
                                                               k.aocta,
                                                               k.aooper,
                                                               k.aosbop,
                                                               k.aotope,
                                                               pn_ffin,
                                                               pn_usuario);
      exception
        when others then
          lc_sdoi := 0;
      end;
    
      -- Flag de desistimiento o extorno
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_repro_extorno(pn_cod   => k.pgcod,
                                                 pn_cta   => k.aocta,
                                                 pn_ope   => k.aooper,
                                                 pn_fecha => pn_ffin,
                                                 pn_flag  => lc_lfext,
                                                 pn_fech  => lc_fext);
      exception
        when others then
          lc_lfext := 'NO';
          lc_fext  := null;
      end;
      -- 12. Región
      -- 12.1 Región - Nombre
      -- 13. Zona   
      -- 13.1 Zona - Nombre
      -- 14 Agencia(Sucursal) 
      -- 14.1 Agencia(Sucursal) - Nombre
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => k.aosuc,
                                                pn_regi => lc_regi,
                                                pn_zona => lc_zona,
                                                pn_nsuc => lc_nsuc,
                                                pn_nzon => lc_nzon,
                                                pn_nreg => lc_nreg);
      exception
        when others then
          lc_regi := 0;
          lc_zona := 0;
          lc_nsuc := '';
          lc_nzon := '';
          lc_nreg := '';
      end;
    
      -- 15. Analista
      begin
        lc_ases := fn_analista_credito(k.aomod,
                                       k.aosuc,
                                       k.aomda,
                                       k.aopap,
                                       k.aocta,
                                       k.aooper,
                                       k.aosbop,
                                       k.aotope);
      exception
        when others then
          lc_ases := '';
      end;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      -- *** Saldo capital cancelado
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_saldo_cap_cancel_Fae(pn_cod   => k.pgcod,
                                                          pn_mod   => k.aomod,
                                                          pn_suc   => k.aosuc,
                                                          pn_mda   => k.aomda,
                                                          pn_pap   => k.aopap,
                                                          pn_cta   => k.aocta,
                                                          pn_ope   => k.aooper,
                                                          pn_sbo   => k.aosbop,
                                                          pn_top   => k.aotope,
                                                          pn_fecha => pn_ffin,
                                                          pn_saldo => lc_saldo_ccan,
                                                          pn_upago => lc_upago_ccan);
      exception
        when others then
          lc_saldo_ccan := 0;
          lc_upago_ccan := 0;
      end;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          
      -- Saldo Insoluto Real
      begin
        --- jrodriguej 03.03.2021                                           
      
        pq_cr_reporte_fondos_p200.sp_obtener_sald_insol2(pn_cod   => k.pgcod,
                                                         pn_mod   => k.aomod,
                                                         pn_suc   => k.aosuc,
                                                         pn_mda   => k.aomda,
                                                         pn_pap   => k.aopap,
                                                         pn_cta   => k.aocta,
                                                         pn_ope   => k.aooper,
                                                         pn_sbo   => k.aosbop,
                                                         pn_top   => k.aotope,
                                                         pn_fecha => pn_ffin,
                                                         pn_indi  => 2, -- FAE
                                                         pn_stat  => k.estado,
                                                         pn_sald  => lc_sdoins);
      
      exception
        when others then
          lc_sdoins := 0;
      end;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          
      -- Distribución de pago
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_distribuc_pago_mes(pn_cod   => k.pgcod,
                                                        pn_mod   => k.aomod,
                                                        pn_suc   => k.aosuc,
                                                        pn_mda   => k.aomda,
                                                        pn_pap   => k.aopap,
                                                        pn_cta   => k.aocta,
                                                        pn_ope   => k.aooper,
                                                        pn_sbo   => k.aosbop,
                                                        pn_top   => k.aotope,
                                                        pn_fecha => pn_ffin,
                                                        pn_tsum  => lc_tsum,
                                                        pn_gas   => lc_gas,
                                                        pn_mor   => lc_mor,
                                                        pn_int   => lc_int,
                                                        pn_cuo   => lc_cuo,
                                                        pn_icv   => lc_icv,
                                                        pn_pen   => lc_pen);
      
      exception
        when others then
        
          lc_tsum := 0;
          lc_gas  := 0;
          lc_mor  := 0;
          lc_int  := 0;
          lc_cuo  := 0;
          lc_icv  := 0;
          lc_pen  := 0;
      end;
    
      if k.aostat <> 99 then
        lc_lcan := 'NO';
      else
        lc_lcan := 'SI';
      end if;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      lc_fecha_can := null;
      if k.aostat = 99 then
        lc_fecha_can := k.aofe99;
      end if;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          
      -- 5. Saldo de capital actual
      begin
        -- Call the function
        lc_sdoi_act := pq_cr_reporte_fondos_p200.fn_obtener_saldo_actual(pn_cod     => k.pgcod,
                                                                         pn_mod     => k.aomod,
                                                                         pn_suc     => k.aosuc,
                                                                         pn_mda     => k.aomda,
                                                                         pn_pap     => k.aopap,
                                                                         pn_cta     => k.aocta,
                                                                         pn_ope     => k.aooper,
                                                                         pn_sbo     => k.aosbop,
                                                                         pn_top     => k.aotope,
                                                                         pn_fecha   => pn_ffin,
                                                                         pn_usuario => pn_usuario);
      exception
        when others then
          lc_sdoi_act := 0;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,
                                                           pn_rubr   => 9300082010000,
                                                           pd_fecha => pn_ffin,
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr  => ln_mhonr,
                                                           pd_fhonr  => ld_fhonr,
                                                           pn_sdohon => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon := 0;
          end; 
          --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,                                                           
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_actual(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tea);
          exception
            when others then
              lc_tea := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes repro
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_repro(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_trep);
          exception
            when others then
              lc_trep := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes moratoria
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => k.pgcod,
                                                           pn_mod   => k.aomod,
                                                           pn_suc   => k.aosuc,
                                                           pn_mda   => k.aomda,
                                                           pn_pap   => k.aopap,
                                                           pn_cta   => k.aocta,
                                                           pn_ope   => k.aooper,
                                                           pn_sbo   => k.aosbop,
                                                           pn_top   => k.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tmor);
          exception
            when others then
              lc_tmor := 0;
          end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    
    
      begin
        insert into aqpb068
          (aqpb068usur, -- Usuario
           aqpb068pgcod,
           aqpb068aomod,
           aqpb068aosuc, -- 14. Agencia, sucursal
           aqpb068aomda,
           aqpb068aopap,
           aqpb068aocta, -- 16. Nro. de cuenta
           aqpb068aooper, -- 17. Nro. de operación
           aqpb068aosbop,
           aqpb068aotope,
           aqpb068csap, -- 1. Código SAP
           aqpb068tdoc, -- 2. Tipo De documento
           aqpb068ndoc, -- 2.1. Nro. De documento
           aqpb068razn, -- 3. Apellidos y nombres del cliente (o Razón Social)
           aqpb068mnto, -- 4. Monto de capital reprogramado enviado a COFIDE
           aqpb068sdoa, -- 5. Saldo de capital actual
           aqpb068mda, -- 6. Moneda (PEN)
           aqpb068lcan, -- 7. Flag de cancelación
           aqpb068fcan, -- 8. Fecha de cancelación 
           aqpb068sdoc, -- 9.  Saldo capital cancelado
           
           aqpb068ldes, -- 10. Flag de desistimiento o extorno
           aqpb068fdes, -- 11. Fecha de desistimiento o extorno
           aqpb068reg, -- 12. Región
           aqpb068nreg, -- 12.1 Región - Nombre
           aqpb068zon, -- 13. Zona   
           aqpb068nzon, -- 13.1 Zona - Nombre
           aqpb068nsuc, -- 14.1 Agencia(Sucursal) - Nombre
           aqpb068ase, -- 15. Analista
           
           aqpb068sdo, -- 16. Saldo Insoluto
           
           aqpb068stat,
           aqpb068fe99,
           
           aqpb068fcr,
           aqpb068hcr,
           aqpb068fproc,
           aqpb068mhonr,
           aqpb068fhonr,
           aqpb068chonr,
           aqpb068sdocap,
           aqpb068sdohon,
           aqpb068crehon,
           aqpb068tmor,
           aqpb068tcrepro,
           aqpb068fcest)
        values
          (pn_usuario, -- Usuario
           k.pgcod,
           k.aomod,
           k.aosuc, -- 14. Agencia, sucursal
           k.aomda,
           k.aopap,
           k.aocta, -- 16. Nro. de cuenta
           k.aooper, -- 17. Nro. de operación
           k.aosbop,
           k.aotope,
           lc_csap, -- 1. Código SAP
           k.petdoc, -- 2. Tipo De documento
           substr(trim(k.pendoc), 1, 12), -- 2.1. Nro. De documento
           substr(trim(lc_razon), 1, 50), -- 3. Apellidos y nombres del cliente (o Razón Social)
           lc_mon, -- 4. Monto de capital reprogramado enviado a COFIDE
           lc_sdoi_act, --k.scsdo, -- 5. Saldo de capital actual
           trim(lc_mda), -- 6. Moneda (PEN)
           lc_lcan, -- 7. Flag de cancelación
           lc_fecha_can, --k.aofe99, -- 8. Fecha de cancelación 
           lc_cuo, --lc_saldo_ccan, --lc_sdoi, -- 9.  Saldo capital cancelado
           
           lc_lfext, -- 10. Flag de desistimiento o extorno
           lc_fext, -- 11. Fecha de desistimiento o extorno
           lc_regi, -- 12. Región
           substr(trim(lc_nreg), 1, 30), -- 12.1 Región - Nombre
           lc_zona, -- 13. Zona   
           substr(trim(lc_nzon), 1, 40), -- 13.1 Zona - Nombre
           substr(trim(lc_nsuc), 1, 30), -- 14.1 Agencia(Sucursal) - Nombre
           substr(trim(lc_ases), 1, 10), -- 15. Analista
           
           lc_sdoins, -- 16. Saldo Insoluto
           
           k.aostat,
           k.aofe99,
           
           to_char(sysdate, 'DD/MM/YYYY'),
           to_char(sysdate, 'HH24:MI:SS'),
           pn_ffin,
           ln_mhonr,
           ld_fhonr,
           lc_eshonr,
           lc_sdoi,
           ln_sdohon,
           lc_sdoi+ln_sdohon,
           lc_tmor,
           lc_trep,
           case when ld_fcest > nvl(k.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 ld_fcest 
                 else  k.aofe99 end
                   );
        commit;
      exception
        when others then
        
          lc_coderr := substr(trim(sqlcode), 1, 100);
          lc_msgerr := substr(trim(sqlerrm), 1, 1000);
        
          begin
            insert into AQPB070E
              (aqpb070etab,
               aqpb070efec,
               aqpb070esuc,
               aqpb070eusr,
               aqpb070ecoe,
               aqpb070emsge,
               aqpb070efcr,
               aqpb070ehcr,
               aqpb070ecta,
               aqpb070eope)
            values
              ('AQPB068',
               pn_ffin,
               pc_sucurs,
               substr(trim(pn_usuario), 1, 10),
               lc_coderr,
               lc_msgerr,
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               ln_cta,
               ln_ope);
            commit;
          exception
            when others then
              null;
          end;
        
      end;
    
    end loop;
  
    --3. Borrar duplicados
    for z in verificar_fae_mype() loop
    
      ln_cta := z.cta;
      ln_ope := z.oper;
    
      -- Verificar si hay una cuenta con tipo de operación 550
      begin
        select count(*)
          into lb_550
          from aqpb068 x
         where x.aqpb068usur = pn_usuario
           and x.aqpb068aosuc = pc_sucurs
           and x.aqpb068aocta = z.cta
           and x.aqpb068aooper = z.oper
           and x.aqpb068aotope = 550;
      exception
        when others then
          lb_550 := 0;
      end;
    
      if lb_550 <> 0 then
      
        begin
        
          begin
            select distinct x.aqpb068aomda
              into lb_mda
              from aqpb068 x
             where x.aqpb068usur = pn_usuario
               and x.aqpb068aosuc = pc_sucurs
               and x.aqpb068aocta = z.cta
               and x.aqpb068aooper = z.oper
               and x.aqpb068aotope = 550;
          exception
            when others then
              lb_mda := null;
          end;
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos.sp_verificar_550(pc_mon  => lb_mda,
                                                  pc_suc  => pc_sucurs,
                                                  pn_cta  => z.cta,
                                                  pn_oper => z.oper,
                                                  pc_fech => lb_fec_550);
          exception
            when others then
              lb_fec_550 := null;
          end;
        
          if pn_ffin >= lb_fec_550 then
          
            delete from aqpb068 x
             where x.aqpb068usur = pn_usuario
               and x.aqpb068aosuc = pc_sucurs
               and x.aqpb068aocta = z.cta
               and x.aqpb068aooper = z.oper
               and x.aqpb068aotope <> 550;
            commit;
          
          else
          
            delete from aqpb068 x
             where x.aqpb068usur = pn_usuario
               and x.aqpb068aosuc = pc_sucurs
               and x.aqpb068aocta = z.cta
               and x.aqpb068aooper = z.oper
               and x.aqpb068aotope = 550;
            commit;
          
          end if;
        end;
      
      end if;
    
      --- Verificar si hay una cuenta con estado vigente      
    
      begin
        select 'S'
          into lb_flag_vig
          from aqpb068 x
         where x.aqpb068usur = pn_usuario
           and x.aqpb068aosuc = pc_sucurs
           and x.aqpb068aocta = z.cta
           and x.aqpb068aooper = z.oper
           and x.aqpb068stat <> 99;
      exception
        when others then
          lb_flag_vig := 'N';
      end;
    
      begin
        if lb_flag_vig = 'S' then
          --- Hay vigente, borrar los no vigentes
        
          delete from aqpb068 x
           where x.aqpb068usur = pn_usuario
             and x.aqpb068aosuc = pc_sucurs
             and x.aqpb068aocta = z.cta
             and x.aqpb068aooper = z.oper
             and x.aqpb068stat = 99;
          commit;
        
        else
          --- Solo hay cancelados, dejar el crédito con máxima fecha de cancelación
          select max(x.aqpb068fe99)
            into lb_fmax_anu
            from aqpb068 x
           where x.aqpb068usur = pn_usuario
             and x.aqpb068aosuc = pc_sucurs
             and x.aqpb068aocta = z.cta
             and x.aqpb068aooper = z.oper
             and x.aqpb068stat = 99;
        
          select max(x.aqpb068aosbop)
            into lb_max_sbop
            from aqpb068 x
           where x.aqpb068usur = pn_usuario
             and x.aqpb068aosuc = pc_sucurs
             and x.aqpb068aocta = z.cta
             and x.aqpb068aooper = z.oper
             and x.aqpb068stat = 99
             and x.aqpb068fe99 = lb_fmax_anu;
        
          -- Verificación
          begin
            select count(*)
              into lb_cont_del
              from aqpb068 x
             where x.aqpb068usur = pn_usuario
               and x.aqpb068aosuc = pc_sucurs
               and x.aqpb068aocta = z.cta
               and x.aqpb068aooper = z.oper
               and x.aqpb068stat = 99
               and x.aqpb068fe99 <> lb_fmax_anu;
          exception
            when others then
              lb_cont_del := 0;
          end;
        
          if lb_cont_del = 0 then
          
            delete from aqpb068 x
             where x.aqpb068usur = pn_usuario
               and x.aqpb068aosuc = pc_sucurs
               and x.aqpb068aocta = z.cta
               and x.aqpb068aooper = z.oper
               and x.aqpb068stat = 99
               and x.aqpb068fe99 <> lb_fmax_anu;
            commit;
          
            delete from aqpb068 x
             where x.aqpb068usur = pn_usuario
               and x.aqpb068aosuc = pc_sucurs
               and x.aqpb068aocta = z.cta
               and x.aqpb068aooper = z.oper
               and x.aqpb068aosbop <> lb_max_sbop
               and x.aqpb068stat = 99
               and x.aqpb068fe99 = lb_fmax_anu;
            commit;
          
          else
            --lb_cont_del = 1; significa que las cancelaciones tienen fechas diferentes a las maximas
            delete from aqpb068 x
             where x.aqpb068usur = pn_usuario
               and x.aqpb068aosuc = pc_sucurs
               and x.aqpb068aocta = z.cta
               and x.aqpb068aooper = z.oper
               and x.aqpb068stat = 99
               and x.aqpb068fe99 <> lb_fmax_anu;
            commit;
          
          end if;
        
          /*
          delete from aqpb068 x
           where x.aqpb068usur = pn_usuario
             and x.aqpb068aosuc = pc_sucurs
             and x.aqpb068aocta = z.cta
             and x.aqpb068aooper = z.oper
             and x.aqpb068aosbop <> lb_max_sbop
             and x.aqpb068fe99 <> lb_fmax_anu
             and x.aqpb068stat = 99;
          commit;
          */
        
        end if;
      
      exception
        when others then
        
          lc_coderr := substr(trim(sqlcode), 1, 100);
          lc_msgerr := substr(trim(sqlerrm), 1, 1000);
        
          begin
            insert into AQPB070E
              (aqpb070etab,
               aqpb070efec,
               aqpb070esuc,
               aqpb070eusr,
               aqpb070ecoe,
               aqpb070emsge,
               aqpb070efcr,
               aqpb070ehcr,
               aqpb070ecta,
               aqpb070eope)
            values
              ('AQPB068',
               pn_ffin,
               pc_sucurs,
               substr(trim(pn_usuario), 1, 10),
               lc_coderr,
               lc_msgerr,
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               ln_cta,
               ln_ope);
            commit;
          exception
            when others then
              null;
          end;
        
      end;
    
    end loop;
  
  exception
    when others then
    
      lc_coderr := substr(trim(sqlcode), 1, 100);
      lc_msgerr := substr(trim(sqlerrm), 1, 1000);
    
      begin
        insert into AQPB070E
          (aqpb070etab,
           aqpb070efec,
           aqpb070esuc,
           aqpb070eusr,
           aqpb070ecoe,
           aqpb070emsge,
           aqpb070efcr,
           aqpb070ehcr,
           aqpb070ecta,
           aqpb070eope)
        values
          ('AQPB068',
           pn_ffin,
           pc_sucurs,
           substr(trim(pn_usuario), 1, 10),
           lc_coderr,
           lc_msgerr,
           to_char(sysdate, 'DD/MM/YYYY'),
           to_char(sysdate, 'HH24:MI:SS'),
           ln_cta,
           ln_ope);
        commit;
      exception
        when others then
          null;
      end;
    
  end sp_reporte_faemype_r2;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
  --TABLA AQPB069
  procedure sp_reporte_faemype_r3(pn_ffin    in date,
                                  pc_sucurs  in number,
                                  pn_usuario in char) is
  
    lc_razon char(100);
    --lc_cuo_o number;
    --lc_cuo_n number;
    --lc_sbop  number;
    lc_mpag   number(17, 2);
    lc_fpag   date;
    lc_mpri   number(17, 2);
    lc_fpri   date;
    --lc_ucuo   number(17, 2);
    --lc_pcuo   number(17, 2);
    lc_coderr char(100);
    lc_msgerr char(1000);
    
    lc_eshonr char(1);
    ln_mhonr number(17,2);
    ld_fhonr date;   
    ln_sdohon number(17,2); 
  
    lc_regi  number(9);
    lc_zona  number(9);
    lc_nsuc  char(30);
    lc_nzon  char(40);
    lc_nreg  char(30);
    lc_ases  char(10);
    --lc_fvton date;
    --lc_fpagg date;
  
    lc_csap aqpb067b.aqpb067bcsap%type;
    lc_fdes aqpb067b.aqpb067bfdes%type;
    lc_mon  aqpb067b.aqpb067bmon%type;
    lc_ncuo aqpb067b.aqpb067bncuo%type;
    lc_peri aqpb067b.aqpb067bperi%type;
    lc_pcob aqpb067b.aqpb067bpcob%type;
  
    lc_lpla char(2);
    lc_lrep aqpb067.aqpb067lrep%type;
    lc_nrep aqpb067.aqpb067nrep%type;
    lc_frep aqpb067.aqpb067frep%type;
  
    lc_ciuu1 aqpb067.aqpb067ciiuori%type;
    lc_dciu1 aqpb067.aqpb067actnomori%type;
  
    lc_tabla varchar2(50);
    lc_peri2 number;
    lc_ncuo2 number;
    lc_fpri1 date;
    lc_fult  date;
  
    lc_fecha date;
    ln_cta   number(9);
    ln_ope   number(9);
  
    lb_flag_vig   char(1);
    lb_fmax_anu   date;
    lc_saldo_ccan number(17, 2);
    lc_upago_ccan number(17, 2);
    lc_fulti_pago date;
  
    lc_gas  number(16, 2);
    lc_mor  number(16, 2);
    lc_int  number(16, 2);
    lc_cuo  number(16, 2);
    lc_icv  number(16, 2);
    lc_pen  number(16, 2);
    lc_tsum number(16, 2);
  
    lc_sdoins    number(17, 2);
    --lb_flag_back number(3);
    --lc_nro_mes   number(3);
    lc_fini_cof  date;
    lc_ffin_cof  date;
  
    lb_550      number(3);
    lb_fec_550  date;
    lb_mda      number(4);
    lb_max_sbop number(3);
    lb_cont_del number(3);
    lc_sdoi_act number(17, 2);
    
    ld_fcest date;
    lc_tea number;
    lc_tmor number;
    lc_trep number;
  
    cursor reporte_fae_mype3 is
    -- FAE 1: VIGENTES
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             r.scsdo,
             0 estado
      
        from fsd010 t,
             fsr008 x,
             fsd011 r,
             --fsr011 f,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where r.pgcod = t.pgcod
         and r.scmod = t.aomod
            --and r.scsuc = t.aosuc  -- jrodriguej 28.06.2021
         and r.scmda = t.aomda
         and r.scpap = t.aopap
         and r.sccta = t.aocta
         and r.scoper = t.aooper
            
            
         and t.aomod in (select modulo
                           from fst111
                          where dscod = 50
                            and modulo not in (29, 120, 144))
         and t.aofval <= pn_ffin
         and t.aostat <> 99
            
         and t.pgcod = x.pgcod
         and t.aocta = x.ctnro
         and x.ttcod = 1
         and x.cttfir = 'T'
            
         and g.aqpb067bcod = t.pgcod
         and g.aqpb067bmod = t.aomod
            --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
         and g.aqpb067bmda = t.aomda
         and g.aqpb067bpap = t.aopap
         and g.aqpb067bcta = t.aocta
         and g.aqpb067bope = t.aooper
            --and g.aqpb067bsbo = t.aosbop
            --and g.aqpb067btop = t.aotope
            
         and t.aosuc = pc_sucurs
            --and (t.aomod <> 101 or t.aotope <> 354)  -- jrodriguej 29.06.2021
         and (t.aomod, t.aotope) not in (select 101, 354 from dual) -- jrodriguej 29.06.2021
      
      union
      
      -- FAE 1: CANCELADOS
      
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0 scsdo, --r.scsdo
             99 estado
        from fsd010 t,
             fsr008 x,
             --fsd011 r,
             --fsr011 f,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat = 99
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and t.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      
      
      
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      --and g.aqpb067btop = t.aotope
      
       and t.aosuc = pc_sucurs
      --and (t.aomod <> 101 or t.aotope <> 354)  -- jrodriguej 29.06.2021
       and (t.aomod, t.aotope) not in (select 101, 354 from dual) -- jrodriguej 29.06.2021
      
      union
      
      -- FAE 2: VIGENTES
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             r.scsdo,
             0 estado
      
        from fsd010 t,
             fsr008 x,
             fsd011 r,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where r.pgcod = t.pgcod
         and r.scmod = t.aomod
            --and r.scsuc = t.aosuc -- jrodriguej 28.06.2021
         and r.scmda = t.aomda
         and r.scpap = t.aopap
         and r.sccta = t.aocta
         and r.scoper = t.aooper
            --and r.scsbop = t.aosbop
            -- and r.sctope = t.aotope
            
            --and t.aomod <> 419
         and t.aomod in (select modulo
                           from fst111
                          where dscod = 50
                            and modulo not in (29, 120, 144))
         and t.aofval <= pn_ffin
         and t.aostat <> 99
            
         and t.pgcod = x.pgcod
         and t.aocta = x.ctnro
         and x.ttcod = 1
         and x.cttfir = 'T'
            
         and g.aqpb067bcod = t.pgcod
         and g.aqpb067bmod = t.aomod
            --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
         and g.aqpb067bmda = t.aomda
         and g.aqpb067bpap = t.aopap
         and g.aqpb067bcta = t.aocta
         and g.aqpb067bope = t.aooper
            --and g.aqpb067bsbo = t.aosbop
            --and g.aqpb067btop = t.aotope
            
         and t.aosuc = pc_sucurs
         and t.aomod = 101
         and t.aotope = 354
      
      UNION
      
      -- FAE 2: CANCELADOS
      
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0 scsdo, --r.scsdo
             99 estado
      
        from fsd010 t,
             fsr008 x,
             --fsd011 r,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat = 99
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      --and g.aqpb067btop = t.aotope
      
       and t.aosuc = pc_sucurs
       and t.aomod = 101
       and t.aotope = 354
      
      ;
  
    cursor reporte_fae_mype3_h is
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             --(r.bcsdmn * -1) scsdo,
             (r.aqpb070asdmn * -1) scsdo,
             0 estado
      
        from fsd010   t,
             fsr008   x,
             aqpb070a r, --fsh012 r, ---> a fsh012
             --fsr011 f,
             --fsd014 h, -- jrodriguej 28.06.2021
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      
      
      -- FSD010 // FSD011
       r.aqpb070ausur = pn_usuario
      --and r.aqpb070atabla = 'FAE3'
       and r.aqpb070aemp = t.pgcod
      --and r.aqpb070arubr = h.rubro -- jrodriguej 28.06.2021
       and r.aqpb070amod = t.aomod
      --and r.aqpb070asuc = t.aosuc -- jrodriguej 28.06.2021
       and r.aqpb070amda = t.aomda
       and r.aqpb070apap = t.aopap
       and r.aqpb070acta = t.aocta
       and r.aqpb070aoper = t.aooper
      ----and r.bcsbop = t.aosbop
      --and r.aqpb070atop = t.aotope
      --and r.bcfech = pn_ffin        
      
      --and t.aomod <> 419
       and t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and (t.aostat <> 99 or (t.aostat = 99 and t.aofe99 > pn_ffin))
      
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      
       and t.aosuc = pc_sucurs
      --and (t.aomod <> 101 or t.aotope <> 354)  -- jrodriguej 29.06.2021
       and (t.aomod, t.aotope) not in (select 101, 354 from dual) -- jrodriguej 29.06.2021      
      
      -- FAE 1: CANCELADOS
      union
      
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0 scsdo,
             99 estado
      
        from fsd010 t,
             fsr008 x,
             --fsh012 r, ---> a fsh012
             --fsr011 f,
             --fsd014 h, -- jrodriguej 28.06.2021
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat = 99
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
      
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      
      
       and t.aosuc = pc_sucurs
      --and (t.aomod <> 101 or t.aotope <> 354)  -- jrodriguej 29.06.2021
       and (t.aomod, t.aotope) not in (select 101, 354 from dual) -- jrodriguej 29.06.2021
      
      union
      -- FAE 2: VIGENTES
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             --(r.bcsdmn * -1) scsdo,
             (r.aqpb070asdmn * -1) scsdo,
             0 estado
      
        from fsd010   t,
             aqpb070a r, --fsh012 r,
             fsr008   x,
             --fsd014 h, -- jrodriguej 28.06.2021
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
            
      -- FSD010 // FSD011
       r.aqpb070ausur = pn_usuario
      --and r.aqpb070atabla = 'FAE3'
       and r.aqpb070aemp = t.pgcod
      --and r.aqpb070arubr = h.rubro -- jrodriguej 28.06.2021
       and r.aqpb070amod = t.aomod
      --and r.aqpb070asuc = t.aosuc -- jrodriguej 28.06.2021
       and r.aqpb070amda = t.aomda
       and r.aqpb070apap = t.aopap
       and r.aqpb070acta = t.aocta
       and r.aqpb070aoper = t.aooper
      ----and r.bcsbop = t.aosbop
      --and r.aqpb070atop = t.aotope
      --and r.bcfech = pn_ffin        
      
      --and t.aomod <> 419
       and t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and (t.aostat <> 99 or (t.aostat = 99 and t.aofe99 > pn_ffin))
      
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      --and g.aqpb067btop = t.aotope
      
       and t.aosuc = pc_sucurs
       and t.aomod = 101
       and t.aotope = 354
      
      union
      
      -- FAE 2:CANCELADOS
      
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0 scsdo,
             99 estado
      
        from fsd010 t,
             fsr008 x,
             --fsh012 r, ---> a fsh012
             --fsr011 f,
             --fsd014 h, -- jrodriguej 28.06.2021
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat = 99
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
      
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      -- AQPB067B // FSD010  
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      --and g.aqpb067btop = t.aotope
      
       and t.aosuc = pc_sucurs
       and t.aomod = 101
       and t.aotope = 354
      
      ;
  
    cursor reporte_fae_mype3_200 is
    -- FAE 1: Vigentes
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0 estado
      
        from fsd010 t,
             fsr008 x,
             --fsr011 f, ---> quita
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      -- FSD010 // FSD011
       t.pgcod = 1
       and t.aomod in (200,33)
       and t.aofval <= pn_ffin
       and t.aostat <> 99
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
      --and g.aqpb067bmod = t.aomod -- jrodriguej 30.07.2021
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      -- and g.aqpb067btop = t.aotope
      
      -- FILTRO FAE 1  
       and t.aosuc = pc_sucurs
       and (t.aomod, t.aotope) not in (select 200, 354 from dual) -- jrodriguej 29.06.2021
      
      union
      
      -- fae 1:CANCELADOS
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             99 estado
      
        from fsd010 t,
             fsr008 x,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where t.pgcod = 1
         and t.aomod in (200,33)
         and t.aofval <= pn_ffin
         and t.aostat = 99
         and not exists
       (select 'x'
                from fsd010 l
               where l.pgcod = t.pgcod
                 and l.aomda = t.aomda
                 and l.aopap = t.aopap
                 and l.aocta = t.aocta
                 and l.aooper = t.aooper
                 and l.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144))
                 and l.aostat <> 99)
         and t.aofe99 =
             (select max(h.aofe99)
                from fsd010 h
               where h.pgcod = t.pgcod
                    --and h.aomod = t.aomod
                    --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
                 and h.aomda = t.aomda
                 and h.aopap = t.aopap
                 and h.aocta = t.aocta
                 and h.aooper = t.aooper
                    --and r.scsbop = t.aosbop
                    --and h.aotope = t.aotope
                 and h.aofe99 <= pn_ffin
                    --and h.aomod <> 419
                 and h.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144)))
            -- FSD010 // FSR008
         and t.pgcod = x.pgcod
         and t.aocta = x.ctnro
         and x.ttcod = 1
         and x.cttfir = 'T'
            -- AQPB067B // FSD010 
         and g.aqpb067bcod = t.pgcod
            --and g.aqpb067bmod = t.aomod -- jrodriguej 30.07.2021
            --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
         and g.aqpb067bmda = t.aomda
         and g.aqpb067bpap = t.aopap
         and g.aqpb067bcta = t.aocta
         and g.aqpb067bope = t.aooper
            --and g.aqpb067bsbo = t.aosbop
            --and g.aqpb067btop = t.aotope
            
         and t.aosuc = pc_sucurs
         and (t.aomod, t.aotope) not in (select 200, 354 from dual) -- jrodriguej 29.06.2021
      
      union
      
      -- Vigentes del FAE 2
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             0 estado
      
        from fsd010 t,
             fsr008 x,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where t.pgcod = 1
         and t.aomod in (200,33)
         and t.aofval <= pn_ffin
         and t.aostat <> 99
            -- FSD010 // FSR008
         and t.pgcod = x.pgcod
         and t.aocta = x.ctnro
         and x.ttcod = 1
         and x.cttfir = 'T'
            -- AQPB067B // FSD010 
         and g.aqpb067bcod = t.pgcod
            --and g.aqpb067bmod = t.aomod -- jrodriguej 30.07.2021
            --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
         and g.aqpb067bmda = t.aomda
         and g.aqpb067bpap = t.aopap
         and g.aqpb067bcta = t.aocta
         and g.aqpb067bope = t.aooper
            --and g.aqpb067bsbo = t.aosbop
            -- and g.aqpb067btop = t.aotope
            
         and t.aosuc = pc_sucurs
            --and t.aomod = 101
         and t.aotope = 354
      
      union
      
      -- Cancelados del FAE 2
      select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             99 estado
      
        from fsd010 t,
             fsr008 x,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where t.pgcod = 1
         and t.aomod in (200,33)
         and t.aofval <= pn_ffin
         and t.aostat = 99
            
         and not exists (select 'x'
                from fsd010 l
               where l.pgcod = t.pgcod
                 and l.aomda = t.aomda
                 and l.aopap = t.aopap
                 and l.aocta = t.aocta
                 and l.aooper = t.aooper
                 and l.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144))
                 and l.aostat <> 99)
         and t.aofe99 =
             (select max(h.aofe99)
                from fsd010 h
               where h.pgcod = t.pgcod
                    --and h.aomod = t.aomod
                    --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
                 and h.aomda = t.aomda
                 and h.aopap = t.aopap
                 and h.aocta = t.aocta
                 and h.aooper = t.aooper
                    --and r.scsbop = t.aosbop
                    --and h.aotope = t.aotope
                 and h.aofe99 <= pn_ffin
                    --and h.aomod <> 419
                 and h.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144)))
            
            -- FSD010 // FSR008
         and t.pgcod = x.pgcod
         and t.aocta = x.ctnro
         and x.ttcod = 1
         and x.cttfir = 'T'
            -- AQPB067B // FSD010 
         and g.aqpb067bcod = t.pgcod
            --and g.aqpb067bmod = t.aomod -- jrodriguej 30.07.2021
            --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
         and g.aqpb067bmda = t.aomda
         and g.aqpb067bpap = t.aopap
         and g.aqpb067bcta = t.aocta
         and g.aqpb067bope = t.aooper
            --and g.aqpb067bsbo = t.aosbop
            --and g.aqpb067btop = t.aotope
            
         and t.aosuc = pc_sucurs
            --and t.aomod = 101
         and t.aotope = 354
      
      ;
  
    cursor verificar_fae_mype is
      select x.aqpb069usur usur,
             x.aqpb069aosuc suc,
             x.aqpb069aocta cta,
             x.aqpb069aooper oper,
             count(*) total
        from aqpb069 x
       where x.aqpb069usur = pn_usuario
         and x.aqpb069aosuc = pc_sucurs
       group by x.aqpb069usur,
                x.aqpb069aosuc,
                x.aqpb069aocta,
                x.aqpb069aooper
      having count(*) > 1;
  
  begin
  
    -- 1. Nro meses RCC
    /*begin
      select x.tp1nro1
        into lc_nro_mes
        from fst198 x
       where x.TP1COD = 1
         and x.TP1COD1 = 11144
         and x.TP1CORR1 = 10
         and x.tp1corr2 = 2
         and x.tp1corr3 = 4;
    exception
      when others then
        lc_nro_mes := 1;
    end;*/
  
    --1. Borrar
    --delete from aqpb069 t where trim(t.aqpb069usur) = pn_usuario;
    --commit;
    select t.pgfape into lc_fecha from fst017 t where t.pgcod = 1;
  
    --2. Procesar
    if lc_fecha = pn_ffin then
    
      begin
      
        for m in reporte_fae_mype3() loop
        
          ln_cta := m.aocta;
          ln_ope := m.aooper;
        
          -- 1. Código SAP COFIDE
          begin
          
            pq_cr_reporte_fondos.sp_plantilla_faemype_r1(pn_cod   => m.pgcod,
                                                         pn_mod   => m.aomod,
                                                         pn_suc   => m.aosuc,
                                                         pn_mda   => m.aomda,
                                                         pn_pap   => m.aopap,
                                                         pn_cta   => m.aocta,
                                                         pn_ope   => m.aooper,
                                                         pn_sbo   => m.aosbop,
                                                         pn_top   => m.aotope,
                                                         pn_fecha => pn_ffin,
                                                         pn_csap  => lc_csap,
                                                         pn_fdes  => lc_fdes,
                                                         pn_mon   => lc_mon,
                                                         pn_ncuo  => lc_ncuo,
                                                         pn_peri  => lc_peri,
                                                         pn_pcob  => lc_pcob,
                                                         pn_fini  => lc_fini_cof,
                                                         pn_ffin  => lc_ffin_cof,
                                                         pn_ciuu  => lc_ciuu1,
                                                         pn_dciu  => lc_dciu1);
          exception
            when others then
              lc_csap     := null;
              lc_fdes     := null;
              lc_mon      := null;
              lc_ncuo     := null;
              lc_peri     := null;
              lc_pcob     := null;
              lc_fini_cof := null;
              lc_ffin_cof := null;
              lc_ciuu1    := null;
              lc_dciu1    := null;
          end;
        
          -- 3. Apellidos y nombres del cliente
          begin
            lc_razon := pq_cr_reporte_fondos_p3.fn_obtener_nombre(m.pepais,
                                                                  m.petdoc,
                                                                  m.pendoc);
          exception
            when others then
              lc_razon := '';
          end;
        
          -- 6. Monto Principal Amortizado
          begin
            pq_cr_reporte_fondos_p3.sp_obtener_pagoi(pn_cod    => m.pgcod,
                                                     pn_mod    => m.aomod,
                                                     pn_suc    => m.aosuc,
                                                     pn_mda    => m.aomda,
                                                     pn_pap    => m.aopap,
                                                     pn_cta    => m.aocta,
                                                     pn_ope    => m.aooper,
                                                     pn_sbo    => m.aosbop,
                                                     pn_top    => m.aotope,
                                                     pn_ord    => 83,
                                                     pn_fcorte => pn_ffin,
                                                     pn_impl   => lc_mpag,
                                                     pn_fech   => lc_fpag);
          exception
            when others then
              lc_mpag := 0;
              lc_fpag := null;
          end;
        
          -- 7. Saldo de capital (posterior a amortización)
          begin
            pq_cr_reporte_fondos_p3.sp_obtener_pagoi(pn_cod    => m.pgcod,
                                                     pn_mod    => m.aomod,
                                                     pn_suc    => m.aosuc,
                                                     pn_mda    => m.aomda,
                                                     pn_pap    => m.aopap,
                                                     pn_cta    => m.aocta,
                                                     pn_ope    => m.aooper,
                                                     pn_sbo    => m.aosbop,
                                                     pn_top    => m.aotope,
                                                     pn_ord    => 10,
                                                     pn_fcorte => pn_ffin,
                                                     pn_impl   => lc_mpri, -- Monto principal amortiazado
                                                     pn_fech   => lc_fpri); -- Fecha de prepago realizado
          exception
            when others then
              lc_mpri := 0;
              lc_fpri := null;
          end;
        
          -- 18. Región
          -- 18.1 Región - Nombre
          -- 19. Zona  
          -- 19.1 Zona - Nombre
          -- 20 Agencia(Sucursal)    
          -- 20.1 Agencia(Sucursal) - Nombre   
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => m.aosuc,
                                                    pn_regi => lc_regi,
                                                    pn_zona => lc_zona,
                                                    pn_nsuc => lc_nsuc,
                                                    pn_nzon => lc_nzon,
                                                    pn_nreg => lc_nreg);
          exception
            when others then
              lc_regi := 0;
              lc_zona := 0;
              lc_nsuc := '';
              lc_nzon := '';
              lc_nreg := '';
          end;
        
          -- 21. Analista
          begin
            lc_ases := fn_analista_credito(m.aomod,
                                           m.aosuc,
                                           m.aomda,
                                           m.aopap,
                                           m.aocta,
                                           m.aooper,
                                           m.aosbop,
                                           m.aotope);
          exception
            when others then
              lc_ases := '';
          end;
        
          -- Flag de reducción
          if lc_mpag <> 0 then
            lc_lpla := 'SI';
          else
            lc_lpla := 'NO';
          end if;
        
          -- '53. Flag de re reprogramación';
          -- '54. Número de reprogramaciones';
          -- '55. Fecha de re reprogramación';
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_repro_dato1(pn_cod   => m.pgcod,
                                                   pn_cta   => m.aocta,
                                                   pn_ope   => m.aooper,
                                                   pn_fecha => pn_ffin,
                                                   pn_flag  => lc_lrep,
                                                   pn_nrep  => lc_nrep,
                                                   pn_fech  => lc_frep,
                                                   
                                                   pn_tabla => lc_tabla,
                                                   
                                                   pn_peri => lc_peri2,
                                                   pn_ncuo => lc_ncuo2,
                                                   pn_fpri => lc_fpri1,
                                                   pn_fult => lc_fult);
          exception
            when others then
            
              lc_lrep  := 'NO';
              lc_nrep  := 0;
              lc_frep  := null;
              lc_tabla := '';
              lc_peri2 := 0;
              lc_ncuo2 := 0;
              lc_fpri1 := null;
              lc_fult  := null;
            
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
          -- *** Saldo capital cancelado
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_saldo_cap_cancel_Fae(pn_cod   => m.pgcod,
                                                            pn_mod   => m.aomod,
                                                            pn_suc   => m.aosuc,
                                                            pn_mda   => m.aomda,
                                                            pn_pap   => m.aopap,
                                                            pn_cta   => m.aocta,
                                                            pn_ope   => m.aooper,
                                                            pn_sbo   => m.aosbop,
                                                            pn_top   => m.aotope,
                                                            pn_fecha => pn_ffin,
                                                            pn_saldo => lc_saldo_ccan,
                                                            pn_upago => lc_upago_ccan);
          exception
            when others then
              lc_saldo_ccan := 0;
              lc_upago_ccan := 0;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
          ---- *** Fecha de último pago
          begin
            -- Call the function
            lc_fulti_pago := pq_cr_reporte_fondos_p3.fn_fecha_upago(pn_cod   => m.pgcod,
                                                                    pn_mod   => m.aomod,
                                                                    pn_suc   => m.aosuc,
                                                                    pn_mda   => m.aomda,
                                                                    pn_pap   => m.aopap,
                                                                    pn_cta   => m.aocta,
                                                                    pn_ope   => m.aooper,
                                                                    pn_sbo   => m.aosbop,
                                                                    pn_top   => m.aotope,
                                                                    pn_fecha => pn_ffin);
          exception
            when others then
              lc_fulti_pago := null;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          
          -- 8. Saldo Insoluto Real
          /*
          begin
            --- jrodriguej 07.04.2021
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_sald_insoluto(pn_cod   => m.pgcod,
                                                             pn_mod   => m.aomod,
                                                             pn_suc   => m.aosuc,
                                                             pn_mda   => m.aomda,
                                                             pn_pap   => m.aopap,
                                                             pn_cta   => m.aocta,
                                                             pn_ope   => m.aooper,
                                                             pn_sbo   => m.aosbop,
                                                             pn_top   => m.aotope,
                                                             pn_fecha => pn_ffin,
                                                             pn_sald  => lc_sdoins);
          exception
            when others then
              lc_sdoins := 0;
          end;
          */
          begin
            --- jrodriguej 03.03.2021                                           
          
            pq_cr_reporte_fondos_p3.sp_obtener_sald_insol2(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_indi  => 2, -- FAE
                                                           pn_stat  => m.estado,
                                                           pn_sald  => lc_sdoins);
          
          exception
            when others then
              lc_sdoins := 0;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   
          -- Distribución de pago
        
          begin
            -- Call the procedure
            --pq_cr_reporte_fondos_p3.sp_distribuc_pago(pn_cod   => m.pgcod,
            pq_cr_reporte_fondos_p3.sp_distribuc_pago_mes(pn_cod   => m.pgcod,
                                                          pn_mod   => m.aomod,
                                                          pn_suc   => m.aosuc,
                                                          pn_mda   => m.aomda,
                                                          pn_pap   => m.aopap,
                                                          pn_cta   => m.aocta,
                                                          pn_ope   => m.aooper,
                                                          pn_sbo   => m.aosbop,
                                                          pn_top   => m.aotope,
                                                          pn_fecha => pn_ffin,
                                                          pn_tsum  => lc_tsum,
                                                          pn_gas   => lc_gas,
                                                          pn_mor   => lc_mor,
                                                          pn_int   => lc_int,
                                                          pn_cuo   => lc_cuo,
                                                          pn_icv   => lc_icv,
                                                          pn_pen   => lc_pen);
          
          exception
            when others then
            
              lc_tsum := 0;
              lc_gas  := 0;
              lc_mor  := 0;
              lc_int  := 0;
              lc_cuo  := 0;
              lc_icv  := 0;
              lc_pen  := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,
                                                           pn_rubr   => 9300082010000,
                                                           pd_fecha => pn_ffin,
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr  => ln_mhonr,
                                                           pd_fhonr  => ld_fhonr,
                                                           pn_sdohon   => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon := 0;
          end; 
          --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,                                                           
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_actual(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tea);
          exception
            when others then
              lc_tea := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes repro
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_repro(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_trep);
          exception
            when others then
              lc_trep := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes moratoria
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tmor);
          exception
            when others then
              lc_tmor := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           
        
          begin
          
            insert into aqpb069
              (aqpb069usur, -- Usuario
               aqpb069pgcod,
               aqpb069aomod,
               aqpb069aosuc,
               aqpb069aomda,
               aqpb069aopap,
               aqpb069aocta,
               aqpb069aooper,
               aqpb069aosbop,
               aqpb069aotope,
               aqpb069csap, -- 1. Código SAP 
               aqpb069tdoc, -- 2. Tipo de Documento
               aqpb069ndoc, -- 2.1. Número de documento
               aqpb069razn, -- 3. Razón social o nombre del cliente
               aqpb069fpre, -- 4. Fecha del prepago realizado   
               aqpb069mpag, -- 5. Pago realizado 
               aqpb069mpri, -- 6. Monto Principal Amortizado
               
               aqpb069sdop, -- 7. Saldo de capital (posterior a amortización)
               aqpb069ffin, -- 8. Fecha de fin del crédito
               
               --aqpb069ncro, -- 9. Número de cuotas del cronograma original
               --aqpb069ncac, -- 10. Número de cuotas del cronograma actual 
               
               --aqpb069cval, -- 11. Valor de la última cuota pagada
               --aqpb069cvto, -- 12. Valor de cuota próximo vencimiento
               aqpb069lpla, -- Flag de reducción de plazo, reducción de cuotas o adelanto de cuotas
               aqpb069lrep, -- 13. Flag de re reprogramación
               --aqpb069nrep, -- 14. Número de reprogramaciones
               --aqpb069frep, -- 15. Fecha de re reprogramación
               --aqpb069frepp, -- 16. Fecha de primera cuota de re reprogramación
               --aqpb069frepu, -- 17. Fecha de última cuota de re reprogramación
               aqpb069reg, -- 18. Región
               aqpb069nreg, -- 18.1 Región - Nombre
               aqpb069zon, -- 19. Zona  
               aqpb069nzon, -- 19.1 Zona - Nombre
               aqpb069nsuc, -- 20.1 Agencia(Sucursal) - Nombre               
               aqpb069ase, -- 21. Analista
               
               aqpb069sdo,
               
               aqpb069stat,
               aqpb069fe99,
               
               aqpb069fcr,
               aqpb069hcr,
               aqpb069fproc,
               aqpb069mhonr,
               aqpb069fhonr,
               aqpb069chonr,
               aqpb069sdocap,
               aqpb069sdohon,
               aqpb069crehon,
               aqpb069tmor,
               aqpb069tcrepro,
               aqpb069fcest)
            values
              (pn_usuario,
               m.pgcod,
               m.aomod,
               m.aosuc,
               m.aomda,
               m.aopap,
               m.aocta,
               m.aooper,
               m.aosbop,
               m.aotope,
               lc_csap, -- 1. Código SAP
               m.petdoc, -- 2. Tipo de Documento
               substr(trim(m.pendoc), 1, 12), -- 2.1. Número de documento
               substr(trim(lc_razon), 1, 70), -- 3. Apellidos y nombres del cliente
               lc_fulti_pago, --lc_fpri, -- 4. Fecha del prepago realizado   
               lc_tsum, --lc_upago_ccan, --lc_mpag, -- 5. Pago realizado 
               lc_cuo, --lc_saldo_ccan, --lc_mpri, -- 6. Monto Principal Amortizado
               (m.scsdo * -1), -- 7. Saldo de capital (posterior a amortización)
               m.aofvto, -- 8. Fecha de fin del crédito
               --null, --lc_cuo_o, -- 9. Número de cuotas del cronograma original
               --null, --lc_cuo_n, -- 10. Número de cuotas del cronograma actual 
               
               --null, --lc_ucuo, -- 11. Valor de la última cuota pagada
               --null, --lc_pcuo, -- 12. Valor de cuota próximo vencimiento
               lc_lpla, -- Flag de reducción de plazo, reducción de cuotas o adelanto de cuotas
               lc_lrep, -- 13. Flag de re reprogramación
               --null, -- 14. Número de reprogramaciones
               --null, -- 15. Fecha de re reprogramación
               --null, -- 16. Fecha de primera cuota de re reprogramación
               --null, -- 17. Fecha de última cuota de re reprogramación
               
               lc_regi, -- 18. Región
               substr(trim(lc_nreg), 1, 30), -- 18.1 Región - Nombre
               lc_zona, -- 19. Zona  
               substr(trim(lc_nzon), 1, 40), -- 19.1 Zona - Nombre
               substr(trim(lc_nsuc), 1, 30), -- 20.1 Agencia(Sucursal) - Nombre               
               substr(trim(lc_ases), 1, 10), -- 21. Analista
               
               lc_sdoins, -- 22. Saldo Insoluto
               
               m.aostat,
               m.aofe99,
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               pn_ffin,
               ln_mhonr,
               ld_fhonr,
               lc_eshonr,
               (m.scsdo * -1),
               ln_sdohon,
               (m.scsdo * -1)+ln_sdohon,
               lc_tmor,
               lc_trep,
               case when ld_fcest > nvl(m.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 ld_fcest 
                 else  m.aofe99 end);
            commit;
          exception
            when others then
            
              lc_coderr := substr(trim(sqlcode), 1, 100);
              lc_msgerr := substr(trim(sqlerrm), 1, 1000);
            
              begin
                insert into AQPB070E
                  (aqpb070etab,
                   aqpb070efec,
                   aqpb070esuc,
                   aqpb070eusr,
                   aqpb070ecoe,
                   aqpb070emsge,
                   aqpb070efcr,
                   aqpb070ehcr,
                   aqpb070ecta,
                   aqpb070eope)
                values
                  ('AQPB069',
                   pn_ffin,
                   pc_sucurs,
                   substr(trim(pn_usuario), 1, 10),
                   lc_coderr,
                   lc_msgerr,
                   to_char(sysdate, 'DD/MM/YYYY'),
                   to_char(sysdate, 'HH24:MI:SS'),
                   ln_cta,
                   ln_ope);
                commit;
              exception
                when others then
                  null;
              end;
            
          end;
        
        end loop;
      
      end;
    
    else
      begin
      
        for m in reporte_fae_mype3_h() loop
        
          ln_cta := m.aocta;
          ln_ope := m.aooper;
        
          -- 1. Código SAP COFIDE
          begin
          
            pq_cr_reporte_fondos.sp_plantilla_faemype_r1(pn_cod   => m.pgcod,
                                                         pn_mod   => m.aomod,
                                                         pn_suc   => m.aosuc,
                                                         pn_mda   => m.aomda,
                                                         pn_pap   => m.aopap,
                                                         pn_cta   => m.aocta,
                                                         pn_ope   => m.aooper,
                                                         pn_sbo   => m.aosbop,
                                                         pn_top   => m.aotope,
                                                         pn_fecha => pn_ffin,
                                                         pn_csap  => lc_csap,
                                                         pn_fdes  => lc_fdes,
                                                         pn_mon   => lc_mon,
                                                         pn_ncuo  => lc_ncuo,
                                                         pn_peri  => lc_peri,
                                                         pn_pcob  => lc_pcob,
                                                         pn_fini  => lc_fini_cof,
                                                         pn_ffin  => lc_ffin_cof,
                                                         pn_ciuu  => lc_ciuu1,
                                                         pn_dciu  => lc_dciu1);
          exception
            when others then
              lc_csap     := null;
              lc_fdes     := null;
              lc_mon      := null;
              lc_ncuo     := null;
              lc_peri     := null;
              lc_pcob     := null;
              lc_fini_cof := null;
              lc_ffin_cof := null;
              lc_ciuu1    := null;
              lc_dciu1    := null;
          end;
        
          -- 3. Apellidos y nombres del cliente
          begin
            lc_razon := pq_cr_reporte_fondos_p3.fn_obtener_nombre(m.pepais,
                                                                  m.petdoc,
                                                                  m.pendoc);
          exception
            when others then
              lc_razon := '';
          end;
        
          -- 6. Monto Principal Amortizado
          begin
            pq_cr_reporte_fondos_p3.sp_obtener_pagoi(pn_cod    => m.pgcod,
                                                     pn_mod    => m.aomod,
                                                     pn_suc    => m.aosuc,
                                                     pn_mda    => m.aomda,
                                                     pn_pap    => m.aopap,
                                                     pn_cta    => m.aocta,
                                                     pn_ope    => m.aooper,
                                                     pn_sbo    => m.aosbop,
                                                     pn_top    => m.aotope,
                                                     pn_ord    => 83,
                                                     pn_fcorte => pn_ffin,
                                                     pn_impl   => lc_mpag,
                                                     pn_fech   => lc_fpag);
          exception
            when others then
              lc_mpag := 0;
              lc_fpag := null;
          end;
        
          -- 7. Saldo de capital (posterior a amortización)
          begin
            pq_cr_reporte_fondos_p3.sp_obtener_pagoi(pn_cod    => m.pgcod,
                                                     pn_mod    => m.aomod,
                                                     pn_suc    => m.aosuc,
                                                     pn_mda    => m.aomda,
                                                     pn_pap    => m.aopap,
                                                     pn_cta    => m.aocta,
                                                     pn_ope    => m.aooper,
                                                     pn_sbo    => m.aosbop,
                                                     pn_top    => m.aotope,
                                                     pn_ord    => 10,
                                                     pn_fcorte => pn_ffin,
                                                     pn_impl   => lc_mpri,
                                                     pn_fech   => lc_fpri);
          exception
            when others then
              lc_mpri := 0;
              lc_fpri := null;
          end;
        
          -- 18. Región
          -- 18.1 Región - Nombre
          -- 19. Zona  
          -- 19.1 Zona - Nombre
          -- 20 Agencia(Sucursal)    
          -- 20.1 Agencia(Sucursal) - Nombre   
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => m.aosuc,
                                                    pn_regi => lc_regi,
                                                    pn_zona => lc_zona,
                                                    pn_nsuc => lc_nsuc,
                                                    pn_nzon => lc_nzon,
                                                    pn_nreg => lc_nreg);
          exception
            when others then
              lc_regi := 0;
              lc_zona := 0;
              lc_nsuc := '';
              lc_nzon := '';
              lc_nreg := '';
          end;
        
          -- 21. Analista
          begin
            lc_ases := fn_analista_credito(m.aomod,
                                           m.aosuc,
                                           m.aomda,
                                           m.aopap,
                                           m.aocta,
                                           m.aooper,
                                           m.aosbop,
                                           m.aotope);
          exception
            when others then
              lc_ases := '';
          end;
        
          -- Flag de reducción
          if lc_mpag <> 0 then
            lc_lpla := 'SI';
          else
            lc_lpla := 'NO';
          end if;
        
          -- '53. Flag de re reprogramación';
          -- '54. Número de reprogramaciones';
          -- '55. Fecha de re reprogramación';
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_repro_dato1(pn_cod   => m.pgcod,
                                                   pn_cta   => m.aocta,
                                                   pn_ope   => m.aooper,
                                                   pn_fecha => pn_ffin,
                                                   pn_flag  => lc_lrep,
                                                   pn_nrep  => lc_nrep,
                                                   pn_fech  => lc_frep,
                                                   
                                                   pn_tabla => lc_tabla,
                                                   
                                                   pn_peri => lc_peri2,
                                                   pn_ncuo => lc_ncuo2,
                                                   pn_fpri => lc_fpri1,
                                                   pn_fult => lc_fult);
          exception
            when others then
            
              lc_lrep  := 'NO';
              lc_nrep  := 0;
              lc_frep  := null;
              lc_tabla := '';
              lc_peri2 := 0;
              lc_ncuo2 := 0;
              lc_fpri1 := null;
              lc_fult  := null;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
          -- *** Saldo capital cancelado
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_saldo_cap_cancel_Fae(pn_cod   => m.pgcod,
                                                            pn_mod   => m.aomod,
                                                            pn_suc   => m.aosuc,
                                                            pn_mda   => m.aomda,
                                                            pn_pap   => m.aopap,
                                                            pn_cta   => m.aocta,
                                                            pn_ope   => m.aooper,
                                                            pn_sbo   => m.aosbop,
                                                            pn_top   => m.aotope,
                                                            pn_fecha => pn_ffin,
                                                            pn_saldo => lc_saldo_ccan,
                                                            pn_upago => lc_upago_ccan);
          exception
            when others then
              lc_saldo_ccan := 0;
              lc_upago_ccan := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
        
          ---- *** Fecha de último pago
          begin
            -- Call the function
            lc_fulti_pago := pq_cr_reporte_fondos_p3.fn_fecha_upago(pn_cod   => m.pgcod,
                                                                    pn_mod   => m.aomod,
                                                                    pn_suc   => m.aosuc,
                                                                    pn_mda   => m.aomda,
                                                                    pn_pap   => m.aopap,
                                                                    pn_cta   => m.aocta,
                                                                    pn_ope   => m.aooper,
                                                                    pn_sbo   => m.aosbop,
                                                                    pn_top   => m.aotope,
                                                                    pn_fecha => pn_ffin);
          exception
            when others then
              lc_fulti_pago := null;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  
        
          -- *. Saldo Insoluto Real
          /*
          begin
            --- jrodriguej 07.04.2021
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_sald_insoluto(pn_cod   => m.pgcod,
                                                             pn_mod   => m.aomod,
                                                             pn_suc   => m.aosuc,
                                                             pn_mda   => m.aomda,
                                                             pn_pap   => m.aopap,
                                                             pn_cta   => m.aocta,
                                                             pn_ope   => m.aooper,
                                                             pn_sbo   => m.aosbop,
                                                             pn_top   => m.aotope,
                                                             pn_fecha => pn_ffin,
                                                             pn_sald  => lc_sdoins);
          exception
            when others then
              lc_sdoins := 0;
          end;
          */
          begin
            --- jrodriguej 03.03.2021                                           
          
            pq_cr_reporte_fondos_p3.sp_obtener_sald_insol2(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_indi  => 2, -- FAE
                                                           pn_stat  => m.estado,
                                                           pn_sald  => lc_sdoins);
          
          exception
            when others then
              lc_sdoins := 0;
          end;
        
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   
          -- Distribución de pago
        
          begin
            -- Call the procedure
            --pq_cr_reporte_fondos_p3.sp_distribuc_pago(pn_cod   => m.pgcod,
            pq_cr_reporte_fondos_p3.sp_distribuc_pago_mes(pn_cod   => m.pgcod,
                                                          pn_mod   => m.aomod,
                                                          pn_suc   => m.aosuc,
                                                          pn_mda   => m.aomda,
                                                          pn_pap   => m.aopap,
                                                          pn_cta   => m.aocta,
                                                          pn_ope   => m.aooper,
                                                          pn_sbo   => m.aosbop,
                                                          pn_top   => m.aotope,
                                                          pn_fecha => pn_ffin,
                                                          pn_tsum  => lc_tsum,
                                                          pn_gas   => lc_gas,
                                                          pn_mor   => lc_mor,
                                                          pn_int   => lc_int,
                                                          pn_cuo   => lc_cuo,
                                                          pn_icv   => lc_icv,
                                                          pn_pen   => lc_pen);
          
          exception
            when others then
            
              lc_tsum := 0;
              lc_gas  := 0;
              lc_mor  := 0;
              lc_int  := 0;
              lc_cuo  := 0;
              lc_icv  := 0;
              lc_pen  := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,
                                                           pn_rubr   => 9300082010000,
                                                           pd_fecha => pn_ffin,
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr  => ln_mhonr,
                                                           pd_fhonr  => ld_fhonr,
                                                           pn_sdohon => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon := 0;
          end; 
          --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,                                                           
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_actual(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tea);
          exception
            when others then
              lc_tea := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes repro
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_repro(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_trep);
          exception
            when others then
              lc_trep := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes moratoria
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tmor);
          exception
            when others then
              lc_tmor := 0;
          end;
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                             
        
          begin
            insert into aqpb069
              (aqpb069usur, -- Usuario
               aqpb069pgcod,
               aqpb069aomod,
               aqpb069aosuc,
               aqpb069aomda,
               aqpb069aopap,
               aqpb069aocta,
               aqpb069aooper,
               aqpb069aosbop,
               aqpb069aotope,
               aqpb069csap, -- 1. Código SAP 
               aqpb069tdoc, -- 2. Tipo de Documento
               aqpb069ndoc, -- 2.1. Número de documento
               aqpb069razn, -- 3. Razón social o nombre del cliente
               aqpb069fpre, -- 4. Fecha del prepago realizado   
               aqpb069mpag, -- 5. Pago realizado 
               aqpb069mpri, -- 6. Monto Principal Amortizado
               
               aqpb069sdop, -- 7. Saldo de capital (posterior a amortización)
               aqpb069ffin, -- 8. Fecha de fin del crédito
               
               --aqpb069ncro, -- 9. Número de cuotas del cronograma original
               --aqpb069ncac, -- 10. Número de cuotas del cronograma actual 
               
               --aqpb069cval, -- 11. Valor de la última cuota pagada
               --aqpb069cvto, -- 12. Valor de cuota próximo vencimiento
               aqpb069lpla, -- Flag de reducción de plazo, reducción de cuotas o adelanto de cuotas
               aqpb069lrep, -- 13. Flag de re reprogramación
               --aqpb069nrep, -- 14. Número de reprogramaciones
               --aqpb069frep, -- 15. Fecha de re reprogramación
               --aqpb069frepp, -- 16. Fecha de primera cuota de re reprogramación
               --aqpb069frepu, -- 17. Fecha de última cuota de re reprogramación
               aqpb069reg, -- 18. Región
               aqpb069nreg, -- 18.1 Región - Nombre
               aqpb069zon, -- 19. Zona  
               aqpb069nzon, -- 19.1 Zona - Nombre
               aqpb069nsuc, -- 20.1 Agencia(Sucursal) - Nombre               
               aqpb069ase, -- 21. Analista
               
               aqpb069sdo, -- 22. Saldo Insoluto
               
               aqpb069stat,
               aqpb069fe99,
               
               aqpb069fcr,
               aqpb069hcr,
               aqpb069fproc,
               aqpb069mhonr,
               aqpb069fhonr,
               aqpb069chonr,
               aqpb069sdocap,
               aqpb069sdohon,
               aqpb069crehon,
               aqpb069tmor,
               aqpb069tcrepro,
               aqpb069fcest)
            values
              (pn_usuario,
               m.pgcod,
               m.aomod,
               m.aosuc,
               m.aomda,
               m.aopap,
               m.aocta,
               m.aooper,
               m.aosbop,
               m.aotope,
               lc_csap, -- 1. Código SAP
               m.petdoc, -- 2. Tipo de Documento
               substr(trim(m.pendoc), 1, 12), -- 2.1. Número de documento
               substr(trim(lc_razon), 1, 70), -- 3. Apellidos y nombres del cliente
               lc_fulti_pago, --lc_fpri, -- 4. Fecha del prepago realizado   
               lc_tsum, --lc_upago_ccan, --lc_mpag, -- 5. Pago realizado 
               lc_cuo, --lc_saldo_ccan, --lc_mpri, -- 6. Monto Principal Amortizado
               m.scsdo, -- 7. Saldo de capital (posterior a amortización)
               m.aofvto, -- 8. Fecha de fin del crédito
               --null, --lc_cuo_o, -- 9. Número de cuotas del cronograma original
               --null, --lc_cuo_n, -- 10. Número de cuotas del cronograma actual 
               
               --null, --lc_ucuo, -- 11. Valor de la última cuota pagada
               --null, --lc_pcuo, -- 12. Valor de cuota próximo vencimiento
               lc_lpla, -- Flag de reducción de plazo, reducción de cuotas o adelanto de cuotas
               lc_lrep, -- 13. Flag de re reprogramación
               --null, -- 14. Número de reprogramaciones
               --null, -- 15. Fecha de re reprogramación
               --null, -- 16. Fecha de primera cuota de re reprogramación
               --null, -- 17. Fecha de última cuota de re reprogramación
               
               lc_regi, -- 18. Región
               substr(trim(lc_nreg), 1, 30), -- 18.1 Región - Nombre
               lc_zona, -- 19. Zona  
               substr(trim(lc_nzon), 1, 40), -- 19.1 Zona - Nombre
               substr(trim(lc_nsuc), 1, 30), -- 20.1 Agencia(Sucursal) - Nombre               
               substr(trim(lc_ases), 1, 10), -- 21. Analista
               
               lc_sdoins,
               
               m.aostat,
               m.aofe99,
               
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               pn_ffin,
               ln_mhonr,
               ld_fhonr,
               lc_eshonr,
               m.scsdo,
               ln_sdohon,
               m.scsdo+ln_sdohon,
               lc_tmor,
               lc_trep,
               case when ld_fcest > nvl(m.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 ld_fcest 
                 else  m.aofe99 end);
            commit;
          exception
            when others then
            
              lc_coderr := substr(trim(sqlcode), 1, 100);
              lc_msgerr := substr(trim(sqlerrm), 1, 1000);
            
              begin
                insert into AQPB070E
                  (aqpb070etab,
                   aqpb070efec,
                   aqpb070esuc,
                   aqpb070eusr,
                   aqpb070ecoe,
                   aqpb070emsge,
                   aqpb070efcr,
                   aqpb070ehcr,
                   aqpb070ecta,
                   aqpb070eope)
                values
                  ('AQPB069',
                   pn_ffin,
                   pc_sucurs,
                   substr(trim(pn_usuario), 1, 10),
                   lc_coderr,
                   lc_msgerr,
                   to_char(sysdate, 'DD/MM/YYYY'),
                   to_char(sysdate, 'HH24:MI:SS'),
                   ln_cta,
                   ln_ope);
                commit;
              exception
                when others then
                  null;
              end;
            
          end;
        end loop;
      
      end;
    end if;
  
    --- Créditos con módulo 200     -- jrodriguej  30.07.2021    
    for m in reporte_fae_mype3_200() loop
    
      ln_cta := m.aocta;
      ln_ope := m.aooper;
    
      -- 1. Código SAP COFIDE
      begin
      
        pq_cr_reporte_fondos_p200.sp_plantilla_faemype_r1(pn_cod   => m.pgcod,
                                                          pn_mod   => m.aomod,
                                                          pn_suc   => m.aosuc,
                                                          pn_mda   => m.aomda,
                                                          pn_pap   => m.aopap,
                                                          pn_cta   => m.aocta,
                                                          pn_ope   => m.aooper,
                                                          pn_sbo   => m.aosbop,
                                                          pn_top   => m.aotope,
                                                          pn_fecha => pn_ffin,
                                                          pn_csap  => lc_csap,
                                                          pn_fdes  => lc_fdes,
                                                          pn_mon   => lc_mon,
                                                          pn_ncuo  => lc_ncuo,
                                                          pn_peri  => lc_peri,
                                                          pn_pcob  => lc_pcob,
                                                          pn_fini  => lc_fini_cof,
                                                          pn_ffin  => lc_ffin_cof,
                                                          pn_ciuu  => lc_ciuu1,
                                                          pn_dciu  => lc_dciu1);
      exception
        when others then
          lc_csap     := null;
          lc_fdes     := null;
          lc_mon      := null;
          lc_ncuo     := null;
          lc_peri     := null;
          lc_pcob     := null;
          lc_fini_cof := null;
          lc_ffin_cof := null;
          lc_ciuu1    := null;
          lc_dciu1    := null;
      end;
    
      -- 3. Apellidos y nombres del cliente
      begin
        lc_razon := pq_cr_reporte_fondos_p3.fn_obtener_nombre(m.pepais,
                                                              m.petdoc,
                                                              m.pendoc);
      exception
        when others then
          lc_razon := '';
      end;
    
      -- 6. Monto Principal Amortizado
      begin
        pq_cr_reporte_fondos_p200.sp_obtener_pagoi(pn_cod    => m.pgcod,
                                                   pn_mod    => m.aomod,
                                                   pn_suc    => m.aosuc,
                                                   pn_mda    => m.aomda,
                                                   pn_pap    => m.aopap,
                                                   pn_cta    => m.aocta,
                                                   pn_ope    => m.aooper,
                                                   pn_sbo    => m.aosbop,
                                                   pn_top    => m.aotope,
                                                   pn_ord    => 83,
                                                   pn_fcorte => pn_ffin,
                                                   pn_impl   => lc_mpag,
                                                   pn_fech   => lc_fpag);
      exception
        when others then
          lc_mpag := 0;
          lc_fpag := null;
      end;
    
      -- 7. Saldo de capital (posterior a amortización)
      begin
        pq_cr_reporte_fondos_p200.sp_obtener_pagoi(pn_cod    => m.pgcod,
                                                   pn_mod    => m.aomod,
                                                   pn_suc    => m.aosuc,
                                                   pn_mda    => m.aomda,
                                                   pn_pap    => m.aopap,
                                                   pn_cta    => m.aocta,
                                                   pn_ope    => m.aooper,
                                                   pn_sbo    => m.aosbop,
                                                   pn_top    => m.aotope,
                                                   pn_ord    => 10,
                                                   pn_fcorte => pn_ffin,
                                                   pn_impl   => lc_mpri,
                                                   pn_fech   => lc_fpri);
      exception
        when others then
          lc_mpri := 0;
          lc_fpri := null;
      end;
    
      -- 18. Región
      -- 18.1 Región - Nombre
      -- 19. Zona  
      -- 19.1 Zona - Nombre
      -- 20 Agencia(Sucursal)    
      -- 20.1 Agencia(Sucursal) - Nombre   
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => m.aosuc,
                                                pn_regi => lc_regi,
                                                pn_zona => lc_zona,
                                                pn_nsuc => lc_nsuc,
                                                pn_nzon => lc_nzon,
                                                pn_nreg => lc_nreg);
      exception
        when others then
          lc_regi := 0;
          lc_zona := 0;
          lc_nsuc := '';
          lc_nzon := '';
          lc_nreg := '';
      end;
    
      -- 21. Analista
      begin
        lc_ases := fn_analista_credito(m.aomod,
                                       m.aosuc,
                                       m.aomda,
                                       m.aopap,
                                       m.aocta,
                                       m.aooper,
                                       m.aosbop,
                                       m.aotope);
      exception
        when others then
          lc_ases := '';
      end;
    
      -- Flag de reducción
      if lc_mpag <> 0 then
        lc_lpla := 'SI';
      else
        lc_lpla := 'NO';
      end if;
    
      -- '53. Flag de re reprogramación';
      -- '54. Número de reprogramaciones';
      -- '55. Fecha de re reprogramación';
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_repro_dato1(pn_cod   => m.pgcod,
                                                 pn_cta   => m.aocta,
                                                 pn_ope   => m.aooper,
                                                 pn_fecha => pn_ffin,
                                                 pn_flag  => lc_lrep,
                                                 pn_nrep  => lc_nrep,
                                                 pn_fech  => lc_frep,
                                                 
                                                 pn_tabla => lc_tabla,
                                                 
                                                 pn_peri => lc_peri2,
                                                 pn_ncuo => lc_ncuo2,
                                                 pn_fpri => lc_fpri1,
                                                 pn_fult => lc_fult);
      exception
        when others then
        
          lc_lrep  := 'NO';
          lc_nrep  := 0;
          lc_frep  := null;
          lc_tabla := '';
          lc_peri2 := 0;
          lc_ncuo2 := 0;
          lc_fpri1 := null;
          lc_fult  := null;
      end;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      -- *** Saldo capital cancelado
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_saldo_cap_cancel_Fae(pn_cod   => m.pgcod,
                                                          pn_mod   => m.aomod,
                                                          pn_suc   => m.aosuc,
                                                          pn_mda   => m.aomda,
                                                          pn_pap   => m.aopap,
                                                          pn_cta   => m.aocta,
                                                          pn_ope   => m.aooper,
                                                          pn_sbo   => m.aosbop,
                                                          pn_top   => m.aotope,
                                                          pn_fecha => pn_ffin,
                                                          pn_saldo => lc_saldo_ccan,
                                                          pn_upago => lc_upago_ccan);
      exception
        when others then
          lc_saldo_ccan := 0;
          lc_upago_ccan := 0;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
    
      ---- *** Fecha de último pago
      begin
        -- Call the function
        lc_fulti_pago := pq_cr_reporte_fondos_p200.fn_fecha_upago(pn_cod   => m.pgcod,
                                                                  pn_mod   => m.aomod,
                                                                  pn_suc   => m.aosuc,
                                                                  pn_mda   => m.aomda,
                                                                  pn_pap   => m.aopap,
                                                                  pn_cta   => m.aocta,
                                                                  pn_ope   => m.aooper,
                                                                  pn_sbo   => m.aosbop,
                                                                  pn_top   => m.aotope,
                                                                  pn_fecha => pn_ffin);
      exception
        when others then
          lc_fulti_pago := null;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  
    
      -- *. Saldo Insoluto Real
      begin
        --- jrodriguej 03.03.2021                                           
      
        pq_cr_reporte_fondos_p200.sp_obtener_sald_insol2(pn_cod   => m.pgcod,
                                                         pn_mod   => m.aomod,
                                                         pn_suc   => m.aosuc,
                                                         pn_mda   => m.aomda,
                                                         pn_pap   => m.aopap,
                                                         pn_cta   => m.aocta,
                                                         pn_ope   => m.aooper,
                                                         pn_sbo   => m.aosbop,
                                                         pn_top   => m.aotope,
                                                         pn_fecha => pn_ffin,
                                                         pn_indi  => 2, -- FAE
                                                         pn_stat  => m.estado,
                                                         pn_sald  => lc_sdoins);
      
      exception
        when others then
          lc_sdoins := 0;
      end;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   
      -- Distribución de pago
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_distribuc_pago_mes(pn_cod   => m.pgcod,
                                                        pn_mod   => m.aomod,
                                                        pn_suc   => m.aosuc,
                                                        pn_mda   => m.aomda,
                                                        pn_pap   => m.aopap,
                                                        pn_cta   => m.aocta,
                                                        pn_ope   => m.aooper,
                                                        pn_sbo   => m.aosbop,
                                                        pn_top   => m.aotope,
                                                        pn_fecha => pn_ffin,
                                                        pn_tsum  => lc_tsum,
                                                        pn_gas   => lc_gas,
                                                        pn_mor   => lc_mor,
                                                        pn_int   => lc_int,
                                                        pn_cuo   => lc_cuo,
                                                        pn_icv   => lc_icv,
                                                        pn_pen   => lc_pen);
      
      exception
        when others then
        
          lc_tsum := 0;
          lc_gas  := 0;
          lc_mor  := 0;
          lc_int  := 0;
          lc_cuo  := 0;
          lc_icv  := 0;
          lc_pen  := 0;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                     
      -- 7. Saldo de capital actual
      begin
        -- Call the function
        lc_sdoi_act := pq_cr_reporte_fondos_p200.fn_obtener_saldo_actual(pn_cod     => m.pgcod,
                                                                         pn_mod     => m.aomod,
                                                                         pn_suc     => m.aosuc,
                                                                         pn_mda     => m.aomda,
                                                                         pn_pap     => m.aopap,
                                                                         pn_cta     => m.aocta,
                                                                         pn_ope     => m.aooper,
                                                                         pn_sbo     => m.aosbop,
                                                                         pn_top     => m.aotope,
                                                                         pn_fecha   => pn_ffin,
                                                                         pn_usuario => pn_usuario);
      exception
        when others then
          lc_sdoi_act := 0;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,
                                                           pn_rubr   => 9300082010000,
                                                           pd_fecha => pn_ffin,
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr  => ln_mhonr,
                                                           pd_fhonr  => ld_fhonr,
                                                           pn_sdohon   => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon := 0;
          end;
          --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,                                                           
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_actual(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tea);
          exception
            when others then
              lc_tea := 0;
          end; 
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes repro
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_repro(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_trep);
          exception
            when others then
              lc_trep := 0;
          end; 
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
          -- Tasa de interes moratoria
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => m.pgcod,
                                                           pn_mod   => m.aomod,
                                                           pn_suc   => m.aosuc,
                                                           pn_mda   => m.aomda,
                                                           pn_pap   => m.aopap,
                                                           pn_cta   => m.aocta,
                                                           pn_ope   => m.aooper,
                                                           pn_sbo   => m.aosbop,
                                                           pn_top   => m.aotope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tmor);
          exception
            when others then
              lc_tmor := 0;
          end; 
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       
    
      begin
        insert into aqpb069
          (aqpb069usur, -- Usuario
           aqpb069pgcod,
           aqpb069aomod,
           aqpb069aosuc,
           aqpb069aomda,
           aqpb069aopap,
           aqpb069aocta,
           aqpb069aooper,
           aqpb069aosbop,
           aqpb069aotope,
           aqpb069csap, -- 1. Código SAP 
           aqpb069tdoc, -- 2. Tipo de Documento
           aqpb069ndoc, -- 2.1. Número de documento
           aqpb069razn, -- 3. Razón social o nombre del cliente
           aqpb069fpre, -- 4. Fecha del prepago realizado   
           aqpb069mpag, -- 5. Pago realizado 
           aqpb069mpri, -- 6. Monto Principal Amortizado
           
           aqpb069sdop, -- 7. Saldo de capital (posterior a amortización)
           aqpb069ffin, -- 8. Fecha de fin del crédito
           
           --aqpb069ncro, -- 9. Número de cuotas del cronograma original
           --aqpb069ncac, -- 10. Número de cuotas del cronograma actual 
           
           --aqpb069cval, -- 11. Valor de la última cuota pagada
           --aqpb069cvto, -- 12. Valor de cuota próximo vencimiento
           aqpb069lpla, -- Flag de reducción de plazo, reducción de cuotas o adelanto de cuotas
           aqpb069lrep, -- 13. Flag de re reprogramación
           --aqpb069nrep, -- 14. Número de reprogramaciones
           --aqpb069frep, -- 15. Fecha de re reprogramación
           --aqpb069frepp, -- 16. Fecha de primera cuota de re reprogramación
           --aqpb069frepu, -- 17. Fecha de última cuota de re reprogramación
           aqpb069reg, -- 18. Región
           aqpb069nreg, -- 18.1 Región - Nombre
           aqpb069zon, -- 19. Zona  
           aqpb069nzon, -- 19.1 Zona - Nombre
           aqpb069nsuc, -- 20.1 Agencia(Sucursal) - Nombre               
           aqpb069ase, -- 21. Analista
           
           aqpb069sdo, -- 22. Saldo Insoluto
           
           aqpb069stat,
           aqpb069fe99,
           
           aqpb069fcr,
           aqpb069hcr,
           aqpb069fproc,
           aqpb069mhonr,
           aqpb069fhonr,
           aqpb069chonr,
           aqpb069sdocap,
           aqpb069sdohon,
           aqpb069crehon,
           aqpb069tmor,
           aqpb069tcrepro,
           aqpb069fcest)
        values
          (pn_usuario,
           m.pgcod,
           m.aomod,
           m.aosuc,
           m.aomda,
           m.aopap,
           m.aocta,
           m.aooper,
           m.aosbop,
           m.aotope,
           lc_csap, -- 1. Código SAP
           m.petdoc, -- 2. Tipo de Documento
           substr(trim(m.pendoc), 1, 12), -- 2.1. Número de documento
           substr(trim(lc_razon), 1, 70), -- 3. Apellidos y nombres del cliente
           lc_fulti_pago, --lc_fpri, -- 4. Fecha del prepago realizado   
           lc_tsum, --lc_upago_ccan, --lc_mpag, -- 5. Pago realizado 
           lc_cuo, --lc_saldo_ccan, --lc_mpri, -- 6. Monto Principal Amortizado
           lc_sdoi_act, --m.scsdo, -- 7. Saldo de capital (posterior a amortización)
           m.aofvto, -- 8. Fecha de fin del crédito
           --null, --lc_cuo_o, -- 9. Número de cuotas del cronograma original
           --null, --lc_cuo_n, -- 10. Número de cuotas del cronograma actual 
           
           --null, --lc_ucuo, -- 11. Valor de la última cuota pagada
           --null, --lc_pcuo, -- 12. Valor de cuota próximo vencimiento
           lc_lpla, -- Flag de reducción de plazo, reducción de cuotas o adelanto de cuotas
           lc_lrep, -- 13. Flag de re reprogramación
           --null, -- 14. Número de reprogramaciones
           --null, -- 15. Fecha de re reprogramación
           --null, -- 16. Fecha de primera cuota de re reprogramación
           --null, -- 17. Fecha de última cuota de re reprogramación
           
           lc_regi, -- 18. Región
           substr(trim(lc_nreg), 1, 30), -- 18.1 Región - Nombre
           lc_zona, -- 19. Zona  
           substr(trim(lc_nzon), 1, 40), -- 19.1 Zona - Nombre
           substr(trim(lc_nsuc), 1, 30), -- 20.1 Agencia(Sucursal) - Nombre               
           substr(trim(lc_ases), 1, 10), -- 21. Analista
           
           lc_sdoins,
           
           m.aostat,
           m.aofe99,
           
           to_char(sysdate, 'DD/MM/YYYY'),
           to_char(sysdate, 'HH24:MI:SS'),
           pn_ffin,
           ln_mhonr,
           ld_fhonr,
           lc_eshonr,
           lc_sdoi_act,
           ln_sdohon,
           lc_sdoi_act+ln_sdohon,
           lc_tmor,
           lc_trep,
           case when ld_fcest > nvl(m.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 ld_fcest 
                 else  m.aofe99 end);
        commit;
      exception
        when others then
        
          lc_coderr := substr(trim(sqlcode), 1, 100);
          lc_msgerr := substr(trim(sqlerrm), 1, 1000);
        
          begin
            insert into AQPB070E
              (aqpb070etab,
               aqpb070efec,
               aqpb070esuc,
               aqpb070eusr,
               aqpb070ecoe,
               aqpb070emsge,
               aqpb070efcr,
               aqpb070ehcr,
               aqpb070ecta,
               aqpb070eope)
            values
              ('AQPB069',
               pn_ffin,
               pc_sucurs,
               substr(trim(pn_usuario), 1, 10),
               lc_coderr,
               lc_msgerr,
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               ln_cta,
               ln_ope);
            commit;
          exception
            when others then
              null;
          end;
        
      end;
    end loop;
  
    --3. Borrar duplicados
    for z in verificar_fae_mype() loop
    
      ln_cta := z.cta;
      ln_ope := z.oper;
    
      -- Verificar si hay una cuenta con tipo de operación 550
      begin
        select count(*)
          into lb_550
          from aqpb069 x
         where x.aqpb069usur = pn_usuario
           and x.aqpb069aosuc = pc_sucurs
           and x.aqpb069aocta = z.cta
           and x.aqpb069aooper = z.oper
           and x.aqpb069aotope = 550;
      exception
        when others then
          lb_550 := 0;
      end;
    
      if lb_550 <> 0 then
      
        begin
        
          begin
            select distinct x.aqpb069aomda
              into lb_mda
              from aqpb069 x
             where x.aqpb069usur = pn_usuario
               and x.aqpb069aosuc = pc_sucurs
               and x.aqpb069aocta = z.cta
               and x.aqpb069aooper = z.oper
               and x.aqpb069aotope = 550;
          exception
            when others then
              lb_mda := null;
          end;
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos.sp_verificar_550(pc_mon  => lb_mda,
                                                  pc_suc  => pc_sucurs,
                                                  pn_cta  => z.cta,
                                                  pn_oper => z.oper,
                                                  pc_fech => lb_fec_550);
          exception
            when others then
              lb_fec_550 := null;
          end;
        
          if pn_ffin >= lb_fec_550 then
          
            delete from aqpb069 x
             where x.aqpb069usur = pn_usuario
               and x.aqpb069aosuc = pc_sucurs
               and x.aqpb069aocta = z.cta
               and x.aqpb069aooper = z.oper
               and x.aqpb069aotope <> 550;
            commit;
          
          else
          
            delete from aqpb069 x
             where x.aqpb069usur = pn_usuario
               and x.aqpb069aosuc = pc_sucurs
               and x.aqpb069aocta = z.cta
               and x.aqpb069aooper = z.oper
               and x.aqpb069aotope = 550;
            commit;
          
          end if;
        end;
      
      end if;
    
      --- Verificar si hay una cuenta con estado vigente    
    
      begin
        select 'S'
          into lb_flag_vig
          from aqpb069 x
         where x.aqpb069usur = pn_usuario
           and x.aqpb069aosuc = pc_sucurs
           and x.aqpb069aocta = z.cta
           and x.aqpb069aooper = z.oper
           and x.aqpb069stat <> 99;
      exception
        when others then
          lb_flag_vig := 'N';
      end;
    
      begin
        if lb_flag_vig = 'S' then
          --- Hay vigente, borrar los no vigentes
        
          delete from aqpb069 x
           where x.aqpb069usur = pn_usuario
             and x.aqpb069aosuc = pc_sucurs
             and x.aqpb069aocta = z.cta
             and x.aqpb069aooper = z.oper
             and x.aqpb069stat = 99;
          commit;
        
        else
          --- Solo hay cancelados, dejar el crédito con máxima fecha de cancelación
          select max(x.aqpb069fe99)
            into lb_fmax_anu
            from aqpb069 x
           where x.aqpb069usur = pn_usuario
             and x.aqpb069aosuc = pc_sucurs
             and x.aqpb069aocta = z.cta
             and x.aqpb069aooper = z.oper
             and x.aqpb069stat = 99;
        
          select max(x.aqpb069aosbop)
            into lb_max_sbop
            from aqpb069 x
           where x.aqpb069usur = pn_usuario
             and x.aqpb069aosuc = pc_sucurs
             and x.aqpb069aocta = z.cta
             and x.aqpb069aooper = z.oper
             and x.aqpb069stat = 99
             and x.aqpb069fe99 = lb_fmax_anu;
        
          -- Verificación
          begin
            select count(*)
              into lb_cont_del
              from aqpb069 x
             where x.aqpb069usur = pn_usuario
               and x.aqpb069aosuc = pc_sucurs
               and x.aqpb069aocta = z.cta
               and x.aqpb069aooper = z.oper
               and x.aqpb069stat = 99
               and x.aqpb069fe99 <> lb_fmax_anu;
          exception
            when others then
              lb_cont_del := 0;
          end;
        
          if lb_cont_del = 0 then
          
            delete from aqpb069 x
             where x.aqpb069usur = pn_usuario
               and x.aqpb069aosuc = pc_sucurs
               and x.aqpb069aocta = z.cta
               and x.aqpb069aooper = z.oper
               and x.aqpb069stat = 99
               and x.aqpb069fe99 <> lb_fmax_anu;
            commit;
          
            delete from aqpb069 x
             where x.aqpb069usur = pn_usuario
               and x.aqpb069aosuc = pc_sucurs
               and x.aqpb069aocta = z.cta
               and x.aqpb069aooper = z.oper
               and x.aqpb069aosbop <> lb_max_sbop
               and x.aqpb069stat = 99
               and x.aqpb069fe99 = lb_fmax_anu;
            commit;
          
          else
            --lb_cont_del = 1; significa que las cancelaciones tienen fechas diferentes a las maximas
            delete from aqpb069 x
             where x.aqpb069usur = pn_usuario
               and x.aqpb069aosuc = pc_sucurs
               and x.aqpb069aocta = z.cta
               and x.aqpb069aooper = z.oper
               and x.aqpb069stat = 99
               and x.aqpb069fe99 <> lb_fmax_anu;
            commit;
          
          end if;
        
          /*
          delete from aqpb069 x
           where x.aqpb069usur = pn_usuario
             and x.aqpb069aosuc = pc_sucurs
             and x.aqpb069aocta = z.cta
             and x.aqpb069aooper = z.oper
             and x.aqpb069aosbop <> lb_max_sbop
             and x.aqpb069fe99 <> lb_fmax_anu
             and x.aqpb069stat = 99;
          commit;
          */
        
        end if;
      
      exception
        when others then
        
          lc_coderr := substr(trim(sqlcode), 1, 100);
          lc_msgerr := substr(trim(sqlerrm), 1, 1000);
        
          begin
            insert into AQPB070E
              (aqpb070etab,
               aqpb070efec,
               aqpb070esuc,
               aqpb070eusr,
               aqpb070ecoe,
               aqpb070emsge,
               aqpb070efcr,
               aqpb070ehcr,
               aqpb070ecta,
               aqpb070eope)
            values
              ('AQPB069',
               pn_ffin,
               pc_sucurs,
               substr(trim(pn_usuario), 1, 10),
               lc_coderr,
               lc_msgerr,
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               ln_cta,
               ln_ope);
            commit;
          exception
            when others then
              null;
          end;
        
      end;
    
    end loop;
  
  exception
    when others then
    
      lc_coderr := substr(trim(sqlcode), 1, 100);
      lc_msgerr := substr(trim(sqlerrm), 1, 1000);
    
      begin
      
        insert into AQPB070E
          (aqpb070etab,
           aqpb070efec,
           aqpb070esuc,
           aqpb070eusr,
           aqpb070ecoe,
           aqpb070emsge,
           aqpb070efcr,
           aqpb070ehcr,
           aqpb070ecta,
           aqpb070eope)
        values
          ('AQPB069',
           pn_ffin,
           pc_sucurs,
           substr(trim(pn_usuario), 1, 10),
           lc_coderr,
           lc_msgerr,
           to_char(sysdate, 'DD/MM/YYYY'),
           to_char(sysdate, 'HH24:MI:SS'),
           ln_cta,
           ln_ope);
        commit;
      
      exception
        when others then
          null;
      end;
    
  end sp_reporte_faemype_r3;

  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 

  --TABLA AQPB073
  procedure sp_reporte_fcrecer_r3(pn_ffin    in date,
                                  pc_sucurs  in number,
                                  pn_usuario in char) is
  
    --lc_anio      number;
    --lc_mes       number;
    lc_esf       char(11);
    --lc_fval      date;
    lc_mda       char(10);
    lc_calif0    number(5, 2);
    lc_calif1    number(5, 2);
    lc_calif2    number(5, 2);
    lc_calif3    number(5, 2);
    lc_calif4    number(5, 2);
    lc_fecha_rcc date;
    --lc_tasa      number(10, 6);
    lc_csbs      char(11);
    lc_sdoi      number(17, 2);
    lc_scon      char(20);
    lc_coderr    char(100);
    lc_msgerr    char(1000);
    lc_dcon      char(4);
  
    lc_eshonr    char(1);
    ln_mhonr     number(17,2);
    ld_fhonr     date;
    ln_sdohon     number(17,2);
          
    lc_regi       number(9);
    lc_zona       number(9);
    lc_nsuc       char(30);
    lc_nzon       char(40);
    lc_nreg       char(30);
    lc_ases       char(10);
    lc_pcre       number;
    lc_ncre       char(20);
    lc_acti       char(60);
    --lc_aoimp      number(17, 2);
    lc_cuo_n      number;
    --lc_fupag      date;
    lc_ncuop      number;
    lc_diat       number;
    lc_fecha      date;
    lc_statd      char(30);
    lc_tdest      char(3);
    lc_fvton      date;
    lc_pcuo       number(17, 2);
    lc_fpagg      date;
    lc_ncuopg     number;
    lc_fecha_amot date;
  
    lb_tdoc aqpb073b.aqpb073btdoc%type;
    lb_ndoc aqpb073b.aqpb073bndoc%type;
    lb_esf  aqpb073b.aqpb073besf%type;
    lb_ccob aqpb073b.aqpb073bccob%type;
    lb_tnro aqpb073b.aqpb073btnro%type;
    lb_mtoe aqpb073b.aqpb073bmtoe%type;
    lb_pcob aqpb073b.aqpb073bpcob%type;
  
    lc_mcob aqpb073.aqpb073mcob%type;
  
    lc_lrep aqpb067.aqpb067lrep%type;
    lc_nrep aqpb067.aqpb067nrep%type;
    lc_frep aqpb067.aqpb067frep%type;
  
    lb_ciuu1 aqpb067.aqpb067ciiuori%type;
    lb_dciu1 aqpb067.aqpb067actnomori%type;
    lb_nven  aqpb073b.aqpb073bnven%type;
  
    lc_tabla varchar2(50);
    lc_peri2 number;
    lc_ncuo2 number;
    lc_fpri  date;
    lc_fult  date;
    
    lc_ncer varchar2(50);
    lc_chon varchar2(50);
    lc_ccob2 varchar2(20);
  
    lc_fvenuc date;
    --lc_fupag date;
    lc_fupag1 date;
    lc_fvenup date;
    lc_ufpag1 date;
  
    lc_gas  number(16, 2);
    lc_mor  number(16, 2);
    lc_int  number(16, 2);
    lc_cuo  number(16, 2);
    lc_icv  number(16, 2);
    lc_pen  number(16, 2);
    lc_tsum number(16, 2);
  
    lc_lamr char(2);
  
    lc_mpag  number(17, 2);
    lc_fpag  date;
    lc_mpri  number(17, 2);
    lc_fpri1 date;
    lc_scapc number(17, 2);
  
    lc_nventas number(17, 2);
    lc_inst    number(10);
    lc_eval    number(10);
    le_tdoc    number(3);
  
    lc_ciiu4 number(12);
    lc_ciiu6 number(9);
  
    ln_cta  number(9);
    ln_ope  number(9);
    --ln_tope number(3);
  
    lb_flag_vig char(1);
    lb_fmax_anu date;
  
    lc_fecha_ini date;
    lc_monto_ini number(17, 2);
    lc_cuo_ini   number(9);
    lc_ncuo_pag  number;
    lc_diatimp   number(5);
    --lb_flag_back number(3);
    lc_sdoins    number(17, 2);
    lc_nro_mes   number(3);
    lc_feccan    date;
  
    lb_550      number(3);
    lb_fec_550  date;
    lb_mda      number(4);
    lb_max_sbop number(3);
    lb_cont_del number(3);
    
    ld_fcest  date;
    lc_calif0a aqpb067.aqpb067cnoma%type;
    lc_calif1a aqpb067.aqpb067ccppa%type;
    lc_calif2a aqpb067.aqpb067cdefa%type;
    lc_calif3a aqpb067.aqpb067cduda%type;
    lc_calif4a aqpb067.aqpb067cpera%type;
    lc_fecha_caj date;
    lc_pernat char(70);
    lc_perjur char(70);
    lc_tea number;
    lc_ncuoimp number;
    lc_tmor number;
    
    lc_cuo_o number;
    ld_ffinco date;
    lc_conhon varchar2(50);
          
    cursor modulos_crecer is
      select j.tp1nro1 td_mod
        from fst198 j
       where j.TP1COD = 1
         and j.TP1COD1 = 11144
         and j.tp1corr1 = 1
         and j.tp1corr2 = 7
         and j.tp1corr3 > 0;
  
    cursor reporte_fcre_r3(lc_mod number) is
    -- CRECER: VIGENTES
      select f.pepais aqpa377pais,
             f.petdoc aqpa377tdoc,
             f.pendoc aqpa377ndoc,
             
             t.pgcod  aqpa377pgcod,
             t.aomod  aqpa377mod,
             t.aosuc  aqpa377suc,
             t.aomda  aqpa377mda,
             t.aopap  aqpa377pap,
             t.aocta  aqpa377cta,
             t.aooper aqpa377ope,
             t.aosbop aqpa377sbop,
             t.aotope aqpa377tope,
             
             t.aofval,
             t.aofvto,
             t.aotasa,
             t.aostat,
             t.aoimp,
             t.aotmor,
             t.aofe99,
             
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             
             substr(r.scrub, 1, 4) dcon,
             
             r.scsdo,
             f.pepais pepaisb,
             f.petdoc petdocb,
             f.pendoc pendocb,
             0        estado
      
        from fsd010 t,
             fsr008 f,
             fsd011 r,
             (select distinct u.aqpb073bcod,
                              u.aqpb073bmod,
                              u.aqpb073bsuc,
                              u.aqpb073bmda,
                              u.aqpb073bpap,
                              u.aqpb073bcta,
                              u.aqpb073bope,
                              u.aqpb073bsbo,
                              u.aqpb073btop
                from aqpb073b u
               where u.aqpb073bcod = 1
                 and u.aqpb073bfec <= pn_ffin
                 and u.aqpb073best <> 'D') g
       where
      
       r.pgcod = t.pgcod
       and r.scmod = t.aomod
      --and r.scsuc = t.aosuc -- jrodriguej 28.06.2021
       and r.scmda = t.aomda
       and r.scpap = t.aopap
       and r.sccta = t.aocta
       and r.scoper = t.aooper
      --and r.scsbop = x.aqpa377sbop
      --and r.sctope = g.aqpb073btop       
      
      --and t.aomod <> 419
       and t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
      --and t.pgcod = 1
      
       and t.aofval <= pn_ffin
       and t.aostat <> 99
      
       and t.pgcod = f.pgcod
       and t.aocta = f.ctnro
       and f.ttcod = 1
       and f.cttfir = 'T'
      
       and g.aqpb073bcod = t.pgcod
       and g.aqpb073bmod = t.aomod
      --and g.aqpb073bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb073bmda = t.aomda
       and g.aqpb073bpap = t.aopap
       and g.aqpb073bcta = t.aocta
       and g.aqpb073bope = t.aooper
      --and t.aosbop = x.aqpa377sbop
      --and t.aotope = g.aqpb073btop  
       and t.aomod = lc_mod
       and t.aosuc = pc_sucurs
      
      union
      
      -- crecer: cancelados
      
      select f.pepais aqpa377pais,
             f.petdoc aqpa377tdoc,
             f.pendoc aqpa377ndoc,
             
             t.pgcod  aqpa377pgcod,
             t.aomod  aqpa377mod,
             t.aosuc  aqpa377suc,
             t.aomda  aqpa377mda,
             t.aopap  aqpa377pap,
             t.aocta  aqpa377cta,
             t.aooper aqpa377ope,
             t.aosbop aqpa377sbop,
             t.aotope aqpa377tope,
             
             t.aofval,
             t.aofvto,
             t.aotasa,
             t.aostat,
             t.aoimp,
             t.aotmor,
             t.aofe99,
             
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             
             null dcon, --substr(r.scrub, 1, 4) dcon,
             
             0        scsdo,
             f.pepais pepaisb,
             f.petdoc petdocb,
             f.pendoc pendocb,
             99       estado
      
        from --fsd011 r,
             fsd010 t,
             fsr008 f,
             (select distinct u.aqpb073bcod,
                              u.aqpb073bmod,
                              u.aqpb073bsuc,
                              u.aqpb073bmda,
                              u.aqpb073bpap,
                              u.aqpb073bcta,
                              u.aqpb073bope,
                              u.aqpb073bsbo,
                              u.aqpb073btop
                from aqpb073b u
               where u.aqpb073bcod = 1
                 and u.aqpb073bfec <= pn_ffin
                 and u.aqpb073best <> 'D') g
       where
      --t.aomod <> 419
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat = 99
      
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)
                           
                           )
           and l.aostat <> 99)
      
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --   and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      
       and t.pgcod = f.pgcod
       and t.aocta = f.ctnro
       and f.ttcod = 1
       and f.cttfir = 'T'
      
       and t.pgcod = g.aqpb073bcod
       and t.aomod = g.aqpb073bmod
      -- and t.aosuc = g.aqpb073bsuc -- jrodriguej 28.06.2021
       and t.aomda = g.aqpb073bmda
       and t.aopap = g.aqpb073bpap
       and t.aocta = g.aqpb073bcta
       and t.aooper = g.aqpb073bope
      --and t.aosbop = x.aqpa377sbop
      --and t.aotope = g.aqpb073btop
      
       and t.aomod = lc_mod
       and t.aosuc = pc_sucurs
      
      ;
  
    cursor reporte_fcre_r3_h(lc_mod number) is
    --- crecer: vigentes
      select f.pepais aqpa377pais,
             f.petdoc aqpa377tdoc,
             f.pendoc aqpa377ndoc,
             
             t.pgcod  aqpa377pgcod,
             t.aomod  aqpa377mod,
             t.aosuc  aqpa377suc,
             t.aomda  aqpa377mda,
             t.aopap  aqpa377pap,
             t.aocta  aqpa377cta,
             t.aooper aqpa377ope,
             t.aosbop aqpa377sbop,
             t.aotope aqpa377tope,
             
             t.aofval,
             t.aofvto,
             t.aotasa,
             t.aoimp,
             t.aotmor,
             t.aofe99,
             
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             
             substr(r.aqpb070arubr, 1, 4) dcon,
             r.aqpb070aprod aostat,
             ---(r.bcsdmn * -1) scsdo
             (r.aqpb070asdmn * -1) scsdo,
             f.pepais pepaisb,
             f.petdoc petdocb,
             f.pendoc pendocb,
             0 estado
      
        from fsd010   t,
             fsr008   f,
             aqpb070a r, --fsh012 r, --> fsh012
             --fsd014 h, -- jrodriguej 28.06.2021
             (select distinct u.aqpb073bcod,
                              u.aqpb073bmod,
                              u.aqpb073bsuc,
                              u.aqpb073bmda,
                              u.aqpb073bpap,
                              u.aqpb073bcta,
                              u.aqpb073bope,
                              u.aqpb073bsbo,
                              u.aqpb073btop
                from aqpb073b u
               where u.aqpb073bcod = 1
                 and u.aqpb073bfec <= pn_ffin
                 and u.aqpb073best <> 'D') g
       where
      -- FSD010 // FSD011
       r.aqpb070ausur = pn_usuario
       and r.aqpb070aemp = t.pgcod
      --and r.aqpb070arubr = h.rubro -- jrodriguej 28.06.2021
       and r.aqpb070amod = t.aomod
      --and r.aqpb070asuc = t.aosuc -- jrodriguej 28.06.2021
       and r.aqpb070amda = t.aomda
       and r.aqpb070apap = t.aopap
       and r.aqpb070acta = t.aocta
       and r.aqpb070aoper = t.aooper
      -- and r.bcsbop = t.aosbop
      -- and r.aqpb070atop = t.aotope
      -- and r.bcfech = pn_ffin        
      
       and t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
      --and t.aotope <> 550
       and t.AOFVAL <= pn_ffin --- <=== Evaluar
       and (t.aostat <> 99 or (t.aostat = 99 and t.aofe99 > pn_ffin))
      
       and g.aqpb073bcod = t.pgcod
      --and r.aqpb070arubr = h.rubro -- jrodriguej 28.06.2021
       and g.aqpb073bmod = t.aomod
      --and r.aqpb070asuc = g.aqpb073bsuc -- jrodriguej 28.06.2021
       and g.aqpb073bmda = t.aomda
       and g.aqpb073bpap = t.aopap
       and g.aqpb073bcta = t.aocta
       and g.aqpb073bope = t.aooper
      -- and r.bcsbop = x.aqpa377sbop
      -- and r.aqpb070atop = g.aqpb073btop
      -- and r.bcfech = pn_ffin       
      
       and t.pgcod = f.pgcod
       and t.aocta = f.ctnro
       and f.ttcod = 1
       and f.cttfir = 'T'
      
       and t.aomod = lc_mod
       and t.aosuc = pc_sucurs
      
      --and pcnivc in (select modulo
      --             from fst111
      --            where dscod = 50
      --              and modulo not in (29, 120, 144))   -- jrodriguej 28.06.2021
      --and pcimpu = 'S'                                  -- jrodriguej 28.06.2021
      
      UNION
      
      -- CRECER: CANCELADAS
      select f.pepais aqpa377pais, --x.aqpa377pais,
             f.petdoc aqpa377tdoc, --x.aqpa377tdoc,
             f.pendoc aqpa377ndoc, --x.aqpa377ndoc,
             
             t.pgcod  aqpa377pgcod,
             t.aomod  aqpa377mod,
             t.aosuc  aqpa377suc,
             t.aomda  aqpa377mda,
             t.aopap  aqpa377pap,
             t.aocta  aqpa377cta,
             t.aooper aqpa377ope,
             t.aosbop aqpa377sbop,
             t.aotope aqpa377tope,
             
             t.aofval,
             t.aofvto,
             t.aotasa,
             t.aoimp,
             t.aotmor,
             t.aofe99,
             
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             
             null     dcon,
             99       aostat, --t.aostat,
             0        scsdo,
             f.pepais pepaisb,
             f.petdoc petdocb,
             f.pendoc pendocb,
             99       estado
      
        from --aqpa377 x,
             --fsd011 r,
              fsd010 t,
             fsr008 f,
             (select distinct u.aqpb073bcod,
                              u.aqpb073bmod,
                              u.aqpb073bsuc,
                              u.aqpb073bmda,
                              u.aqpb073bpap,
                              u.aqpb073bcta,
                              u.aqpb073bope,
                              u.aqpb073bsbo,
                              u.aqpb073btop
                from aqpb073b u
               where u.aqpb073bcod = 1
                 and u.aqpb073bfec <= pn_ffin
                 and u.aqpb073best <> 'D') g
       where
      
       t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
      --and t.aotope <> 550
       and t.AOFVAL <= pn_ffin ---- <=== evaluar
       and t.aostat = 99
      
       and not exists
       (select 'x'
          from fsd010 l
         where l.pgcod = t.pgcod
           and l.aomda = t.aomda
           and l.aopap = t.aopap
           and l.aocta = t.aocta
           and l.aooper = t.aooper
              --and l.aomod <> 419
           and l.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144))
           and l.aostat <> 99)
       and t.aofe99 =
       (select max(h.aofe99)
          from fsd010 h
         where h.pgcod = t.pgcod
           and h.aomod = t.aomod
              --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
           and h.aomda = t.aomda
           and h.aopap = t.aopap
           and h.aocta = t.aocta
           and h.aooper = t.aooper
              --and r.scsbop = t.aosbop
              --and h.aotope = t.aotope
           and h.aofe99 <= pn_ffin
              --and h.aomod <> 419
           and h.aomod in (select modulo
                             from fst111
                            where dscod = 50
                              and modulo not in (29, 120, 144)))
      
       and t.pgcod = f.pgcod
       and t.aocta = f.ctnro
       and f.ttcod = 1
       and f.cttfir = 'T'
      
       and t.pgcod = g.aqpb073bcod
       and t.aomod = g.aqpb073bmod
      --and t.aosuc = g.aqpb073bsuc -- jrodriguej 28.06.2021
       and t.aomda = g.aqpb073bmda
       and t.aopap = g.aqpb073bpap
       and t.aocta = g.aqpb073bcta
       and t.aooper = g.aqpb073bope
      --and t.aosbop = x.aqpa377sbop
      --and t.aotope = g.aqpb073btop
       and t.aomod = lc_mod
       and t.aosuc = pc_sucurs
      
      ;
  
    cursor reporte_fcre_r3_200 is
    --- crecer: vigentes
      select f.pepais aqpa377pais,
             f.petdoc aqpa377tdoc,
             f.pendoc aqpa377ndoc,
             
             t.pgcod  aqpa377pgcod,
             t.aomod  aqpa377mod,
             t.aosuc  aqpa377suc,
             t.aomda  aqpa377mda,
             t.aopap  aqpa377pap,
             t.aocta  aqpa377cta,
             t.aooper aqpa377ope,
             t.aosbop aqpa377sbop,
             t.aotope aqpa377tope,
             
             t.aofval,
             t.aofvto,
             t.aotasa,
             t.aoimp,
             t.aotmor,
             t.aofe99,
             
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             
             --substr(r.aqpb070arubr, 1, 4) dcon,
             t.aostat, --r.aqpb070aprod aostat,
             ---(r.bcsdmn * -1) scsdo
             --(r.aqpb070asdmn * -1) scsdo,
             f.pepais pepaisb,
             f.petdoc petdocb,
             f.pendoc pendocb,
             0        estado
      
        from fsd010 t,
             fsr008 f,
             --aqpb070a r, --fsh012 r, --> fsh012
             --fsd014 h, -- jrodriguej 28.06.2021
             (select distinct u.aqpb073bcod,
                              u.aqpb073bmod,
                              u.aqpb073bsuc,
                              u.aqpb073bmda,
                              u.aqpb073bpap,
                              u.aqpb073bcta,
                              u.aqpb073bope,
                              u.aqpb073bsbo,
                              u.aqpb073btop
                from aqpb073b u
               where u.aqpb073bcod = 1
                 and u.aqpb073bfec <= pn_ffin
                 and u.aqpb073best <> 'D') g
       where
      
       t.pgcod = 1
       and t.aomod in (200,33)
      --and t.aotope <> 550
       and t.AOFVAL <= pn_ffin --- <=== Evaluar
       and (t.aostat <> 99 or (t.aostat = 99 and t.aofe99 > pn_ffin))
      
       and g.aqpb073bcod = t.pgcod
      --and r.aqpb070arubr = h.rubro -- jrodriguej 28.06.2021
      --and g.aqpb073bmod = t.aomod -- jrodriguej 30.07.2021
      --and r.aqpb070asuc = g.aqpb073bsuc -- jrodriguej 28.06.2021
       and g.aqpb073bmda = t.aomda
       and g.aqpb073bpap = t.aopap
       and g.aqpb073bcta = t.aocta
       and g.aqpb073bope = t.aooper
      -- and r.bcsbop = x.aqpa377sbop
      -- and r.aqpb070atop = g.aqpb073btop
      -- and r.bcfech = &pn_ffin       
      
       and t.pgcod = f.pgcod
       and t.aocta = f.ctnro
       and f.ttcod = 1
       and f.cttfir = 'T'
      
      --and t.aomod = lc_mod
       and t.aosuc = pc_sucurs
      -- jrodriguej 28.06.2021
      
      UNION
      
      -- CRECER: CANCELADAS
      select f.pepais aqpa377pais, --x.aqpa377pais,
             f.petdoc aqpa377tdoc, --x.aqpa377tdoc,
             f.pendoc aqpa377ndoc, --x.aqpa377ndoc,
             
             t.pgcod  aqpa377pgcod,
             t.aomod  aqpa377mod,
             t.aosuc  aqpa377suc,
             t.aomda  aqpa377mda,
             t.aopap  aqpa377pap,
             t.aocta  aqpa377cta,
             t.aooper aqpa377ope,
             t.aosbop aqpa377sbop,
             t.aotope aqpa377tope,
             
             t.aofval,
             t.aofvto,
             t.aotasa,
             t.aoimp,
             t.aotmor,
             t.aofe99,
             
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             
             --null     dcon,
             t.aostat, --99       aostat, --t.aostat,
             --0        scsdo,
             f.pepais pepaisb,
             f.petdoc petdocb,
             f.pendoc pendocb,
             99       estado
      
        from --aqpa377 x,
             --fsd011 r,
              fsd010 t,
             fsr008 f,
             (select distinct u.aqpb073bcod,
                              u.aqpb073bmod,
                              u.aqpb073bsuc,
                              u.aqpb073bmda,
                              u.aqpb073bpap,
                              u.aqpb073bcta,
                              u.aqpb073bope,
                              u.aqpb073bsbo,
                              u.aqpb073btop
                from aqpb073b u
               where u.aqpb073bcod = 1
                 and u.aqpb073bfec <= pn_ffin
                 and u.aqpb073best <> 'D') g
       where t.pgcod = 1
         and t.aomod in (200,33)
         and t.AOFVAL <= pn_ffin ---- <=== evaluar
         and t.aostat = 99
            
         and not exists
       (select 'x'
                from fsd010 l
               where l.pgcod = t.pgcod
                 and l.aomod in
                     (select modulo
                        from fst111
                       where dscod = 50
                         and modulo not in (29, 120, 144))
                 and l.aomda = t.aomda
                 and l.aopap = t.aopap
                 and l.aocta = t.aocta
                 and l.aooper = t.aooper
                 and l.aostat <> 99)
         and t.aofe99 = (select max(h.aofe99)
                           from fsd010 h
                          where h.pgcod = t.pgcod
                            and h.aomod in
                                (select modulo
                                   from fst111
                                  where dscod = 50
                                    and modulo not in (29, 120, 144))
                               --and h.aomod = t.aomod
                               --and h.aosuc = t.aosuc -- jrodriguej 28.06.2021
                            and h.aomda = t.aomda
                            and h.aopap = t.aopap
                            and h.aocta = t.aocta
                            and h.aooper = t.aooper
                               --and r.scsbop = t.aosbop
                               --and h.aotope = t.aotope
                            and h.aofe99 <= pn_ffin)
            
         and t.pgcod = f.pgcod
         and t.aocta = f.ctnro
         and f.ttcod = 1
         and f.cttfir = 'T'
            
         and t.pgcod = g.aqpb073bcod
            --and t.aomod = g.aqpb073bmod
            --and t.aosuc = g.aqpb073bsuc -- jrodriguej 28.06.2021
         and t.aomda = g.aqpb073bmda
         and t.aopap = g.aqpb073bpap
         and t.aocta = g.aqpb073bcta
         and t.aooper = g.aqpb073bope
            --and t.aosbop = x.aqpa377sbop
            --and t.aotope = g.aqpb073btop
            --and t.aomod = lc_mod
         and t.aosuc = pc_sucurs
      
      ;
  
    cursor verificar_crecer is
      select x.aqpb073usur usur,
             x.aqpb073suc suc,
             x.aqpb073cta cta,
             x.aqpb073ope oper,
             count(*) total
        from aqpb073 x
       where x.aqpb073usur = pn_usuario
         and x.aqpb073suc = pc_sucurs
       group by x.aqpb073usur, x.aqpb073suc, x.aqpb073cta, x.aqpb073ope
      having count(*) > 1;
  
  begin
  
    --1. Borrar
    --delete from aqpb073 t where trim(t.aqpb073usur) = pn_usuario;
    --commit;
  
    -- 2. ESF
    lc_esf := '20100209641';
  
    --3. Fecha
    select to_date(t.tpnro, 'DDMMYY')
      into lc_fecha_rcc
      from fst098 t
     where t.pgcod = 1
       and t.tpcod = 7647
       and t.tpcorr = 12;
  
    -- 4. Nro meses RCC
    begin
      select x.tp1nro1
        into lc_nro_mes
        from fst198 x
       where x.TP1COD = 1
         and x.TP1COD1 = 11144
         and x.TP1CORR1 = 10
         and x.tp1corr2 = 2
         and x.tp1corr3 = 4;
    exception
      when others then
        lc_nro_mes := 1;
    end;
  
    if pn_ffin <= lc_fecha_rcc then
      lc_fecha_rcc := last_day(add_months(trunc(pn_ffin), -1 * lc_nro_mes));
    end if;
  
    --- Fecha del sistema
    select t.pgfape into lc_fecha from fst017 t where t.pgcod = 1;
  
    if lc_fecha = pn_ffin then
      begin
      
        for m in modulos_crecer() loop
        
          for p in reporte_fcre_r3(m.td_mod) loop
          
            ln_cta := p.aqpa377cta;
            ln_ope := p.aqpa377ope;
          
            -- 5. Fecha Desembolso
            -- 15. Tasa de Interés
            -- 4. Código cobertura COFIDE
          
            begin
              -- Call the procedure
              pq_cr_reporte_fondos.sp_plantilla_fcrecer_v2(pn_cod   => p.aqpa377pgcod,
                                                        pn_mod   => p.aqpa377mod,
                                                        pn_suc   => p.aqpa377suc,
                                                        pn_mda   => p.aqpa377mda,
                                                        pn_pap   => p.aqpa377pap,
                                                        pn_cta   => p.aqpa377cta,
                                                        pn_ope   => p.aqpa377ope,
                                                        pn_sbo   => p.aqpa377sbop,
                                                        pn_top   => p.aqpa377tope,
                                                        pn_fecha => pn_ffin,
                                                        
                                                        pn_tdoc => lb_tdoc,
                                                        pn_ndoc => lb_ndoc,
                                                        pn_esf  => lb_esf,
                                                        pn_ccob => lb_ccob,
                                                        pn_tnro => lb_tnro,
                                                        pn_mtoe => lb_mtoe,
                                                        pn_pcob => lb_pcob,
                                                        pn_ciuu => lb_ciuu1,
                                                        pn_dciu => lb_dciu1,
                                                        pn_nven => lb_nven,
                                                        pn_ncer => lc_ncer,
                                                        pn_chon => lc_chon,
                                                        pn_ccob2 => lc_ccob2,
                                                        pn_conhon => lc_conhon);
            exception
              when others then
              
                lb_tdoc  := null;
                lb_ndoc  := null;
                lb_esf   := null;
                lb_ccob  := null;
                lb_tnro  := null;
                lb_mtoe  := null;
                lb_pcob  := null;
                lb_ciuu1 := null;
                lb_dciu1 := null;
                lb_nven  := null;
                lc_ncer  := null;
                lc_chon  := null;
                lc_ccob2 := null;
                lc_conhon:= null;
            end;
          
            if lb_tdoc = 'RUC' then
              le_tdoc := 6;
            else
              le_tdoc := 21;
            end if;
          
            -- 7. Moneda (PEN o USD)
            begin
              if p.aqpa377mda = 0 then
                lc_mda := 'PEN';
              else
                lc_mda := 'USD';
              end if;
            end;
          
            -- 6. Saldo Insoluto
            begin
              --lc_sdoi := pq_cr_reporte_fondos_p3.fn_obtener_saldoi(p.aqpa377pgcod,
              lc_sdoi := pq_cr_reporte_fondos_p3.fn_obtener_saldo_actual(p.aqpa377pgcod,
                                                                         p.aqpa377mod,
                                                                         p.aqpa377suc,
                                                                         p.aqpa377mda,
                                                                         p.aqpa377pap,
                                                                         p.aqpa377cta,
                                                                         p.aqpa377ope,
                                                                         p.aqpa377sbop,
                                                                         p.aqpa377tope,
                                                                         pn_ffin,
                                                                         pn_usuario);
            exception
              when others then
                lc_sdoi := 0;
            end;
          
            -- 10. Calificación Normal (en números de 100 a 0)
            -- 11. Calificación CPP (en números de 100 a 0)  
            -- 12. Calificación Deficiente (en números de 100 a 0)
            -- 13. Calificación Dudoso (en números de 100 a 0)
            -- 14. Calificación Perdida (en números de 100 a 0)
          
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_calf(pn_tdoc   => p.aqpa377tdoc,
                                                      pn_ndoc   => p.aqpa377ndoc,
                                                      pn_fech   => pn_ffin,
                                                      pn_calif0 => lc_calif0,
                                                      pn_calif1 => lc_calif1,
                                                      pn_calif2 => lc_calif2,
                                                      pn_calif3 => lc_calif3,
                                                      pn_calif4 => lc_calif4,
                                                      pn_csbs   => lc_csbs);
            exception
              when others then
                lc_calif0 := 100;
                lc_calif1 := 0;
                lc_calif2 := 0;
                lc_calif3 := 0;
                lc_calif4 := 0;
                lc_csbs   := 0;
            end;
          
            -- Acondicionamiento de CRR
            --lc_calif0 := round(lc_calif0 / 100, 2);
            --lc_calif1 := round(lc_calif1 / 100, 2);
            --lc_calif2 := round(lc_calif2 / 100, 2);
            --lc_calif3 := round(lc_calif3 / 100, 2);
            --lc_calif4 := round(lc_calif4 / 100, 2);
          
            -- 19. Región
            -- 19.1 Región - Nombre
            -- 20. Zona
            -- 20.1 Zona - Nombre
            -- 21. Agencia (Sucursal)
            -- 21.1 Agencia(Sucursal) - Nombre
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => p.aqpa377suc,
                                                      pn_regi => lc_regi,
                                                      pn_zona => lc_zona,
                                                      pn_nsuc => lc_nsuc,
                                                      pn_nzon => lc_nzon,
                                                      pn_nreg => lc_nreg);
            
            exception
              when others then
                lc_regi := 0;
                lc_zona := 0;
                lc_nsuc := '';
                lc_nzon := '';
                lc_nreg := '';
            end;
          
            -- 22. Analista
            begin
              lc_ases := fn_analista_credito(p.aqpa377mod,
                                             p.aqpa377suc,
                                             p.aqpa377mda,
                                             p.aqpa377pap,
                                             p.aqpa377cta,
                                             p.aqpa377ope,
                                             p.aqpa377sbop,
                                             p.aqpa377tope);
            exception
              when others then
                lc_ases := '';
            end;
          
            -- 22. Tipo de Crédito SBS
            begin
              -- Call the procedure                                                         
              pq_cr_reporte_fondos_p3.sp_tipo_credito_sbs_vig(pn_cod     => p.aqpa377pgcod,
                                                              pn_mod     => p.aqpa377mod,
                                                              pn_suc     => p.aqpa377suc,
                                                              pn_mda     => p.aqpa377mda,
                                                              pn_pap     => p.aqpa377pap,
                                                              pn_cta     => p.aqpa377cta,
                                                              pn_ope     => p.aqpa377ope,
                                                              pn_sbo     => p.aqpa377sbop,
                                                              pn_top     => p.aqpa377tope,
                                                              pn_fecha   => pn_ffin,
                                                              pn_usuario => pn_usuario,
                                                              pn_ntipo   => lc_pcre,
                                                              pn_nconc   => lc_ncre);
            
            exception
              when others then
                lc_pcre := 0;
                lc_ncre := '';
            end;
          
            -- 45. CIUU
            -- 46. Actividad económica
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_ciiu_codigo4(p_pais   => p.aqpa377pais,
                                                      p_petdoc => p.aqpa377tdoc,
                                                      p_pendoc => p.aqpa377ndoc,
                                                      p_ciuu4  => lc_ciiu4,
                                                      p_ciuu6  => lc_ciiu6);
            exception
              when others then
                lc_ciiu4 := 0;
                lc_ciiu6 := 0;
            end;
          
            -- 10.2 Descripción de CIUU 
            begin
              -- Call the procedure
              if lc_ciiu4 <> 0 then
                pq_cr_reporte_fondos_p3.sp_obtener_ciuu(pn_cciu => lc_ciiu6,
                                                        pn_dciu => lc_acti);
              else
                if lc_ciiu6 <> 0 then
                  lc_ciiu4 := to_number(substr(to_char(lc_ciiu6), 1, 4));
                else
                  lc_ciiu4 := 0;
                end if;
                lc_acti := '';
              end if;
            
            exception
              when others then
                lc_acti := '';
            end;
          
            -- 29. Número de cuotas 
            begin
              lc_cuo_n := pq_cr_reporte_fondos_p3.fn_fecha_ncuoa(pn_cod => p.aqpa377pgcod,
                                                                 pn_mod => p.aqpa377mod,
                                                                 pn_suc => p.aqpa377suc,
                                                                 pn_mda => p.aqpa377mda,
                                                                 pn_pap => p.aqpa377pap,
                                                                 pn_cta => p.aqpa377cta,
                                                                 pn_ope => p.aqpa377ope,
                                                                 pn_sbo => p.aqpa377sbop,
                                                                 pn_top => p.aqpa377tope);
            exception
              when others then
                lc_cuo_n := 0;
            end;
            
           
          
            -- 31. Días de atraso                                               
            -- dias atraso
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_atraso_u(pn_cod   => p.aqpa377pgcod,
                                                          pn_mod   => p.aqpa377mod,
                                                          pn_suc   => p.aqpa377suc,
                                                          pn_mda   => p.aqpa377mda,
                                                          pn_pap   => p.aqpa377pap,
                                                          pn_cta   => p.aqpa377cta,
                                                          pn_ope   => p.aqpa377ope,
                                                          pn_sbo   => p.aqpa377sbop,
                                                          pn_top   => p.aqpa377tope,
                                                          pn_fecha => pn_ffin,
                                                          pn_diat  => lc_diat);
            exception
              when others then
                lc_diat := 0;
            end;
          
            
          
            -- 45. Estado del crédito (vigente/cancelado)
            begin
              lc_statd := pq_cr_reporte_fondos_p3.fn_estado_desc(p.aostat);
            exception
              when others then
                lc_statd := '';
            end;
          
            -- 48. Destino del crédito
            begin
              lc_tdest := pq_cr_reporte_fondos_p3.fn_obtener_tdesti(p.aqpa377mod);
            exception
              when others then
                lc_tdest := '';
            end;
          
            -- 32. Vencimiento de cuota atrasada
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_vpcuov(pn_cod   => p.aqpa377pgcod,
                                                        pn_mod   => p.aqpa377mod,
                                                        pn_suc   => p.aqpa377suc,
                                                        pn_mda   => p.aqpa377mda,
                                                        pn_pap   => p.aqpa377pap,
                                                        pn_cta   => p.aqpa377cta,
                                                        pn_ope   => p.aqpa377ope,
                                                        pn_sbo   => p.aqpa377sbop,
                                                        pn_top   => p.aqpa377tope,
                                                        pn_fecha => pn_ffin,
                                                        
                                                        pn_fpag => lc_fpagg,
                                                        pn_fvto => lc_fvton,
                                                        pn_sumt => lc_pcuo);
            exception
              when others then
                lc_fpagg := null;
                lc_fvton := null;
                lc_pcuo  := 0;
            end;
          
            -- Reprogramaciones  
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_repro_dato_jaqa400(pn_cod   => p.aqpa377pgcod,
                                                     pn_cta   => p.aqpa377cta,
                                                     pn_ope   => p.aqpa377ope,
                                                     pn_fecha => pn_ffin,
                                                     
                                                     pn_flag  => lc_lrep,
                                                     pn_nrep  => lc_nrep,
                                                     pn_fech  => lc_frep,
                                                     pn_tabla => lc_tabla,
                                                     
                                                     pn_peri => lc_peri2,
                                                     pn_ncuo => lc_ncuo2,
                                                     pn_fpri => lc_fpri,
                                                     pn_fult => lc_fult);
            
            exception
              when others then
              
                lc_lrep  := 'NO';
                lc_nrep  := 0;
                lc_frep  := null;
                lc_tabla := '';
                lc_peri2 := 0;
                lc_ncuo2 := 0;
                lc_fpri  := null;
                lc_fult  := null;
            end;
            
            begin
              lc_cuo_o := pq_cr_reporte_fondos_p3.fn_fecha_ncuoir(pn_cod => p.aqpa377pgcod,
                                                                 pn_mod => p.aqpa377mod,
                                                                 pn_suc => p.aqpa377suc,
                                                                 pn_mda => p.aqpa377mda,
                                                                 pn_pap => p.aqpa377pap,
                                                                 pn_cta => p.aqpa377cta,
                                                                 pn_ope => p.aqpa377ope,
                                                                 pn_sbo => p.aqpa377sbop,
                                                                 pn_top => p.aqpa377tope,
                                                                 pc_rep => lc_lrep,
                                                                 pd_fre => lc_frep );
            exception
              when others then
                lc_cuo_o := 0;
            end;
            
            begin
              ld_ffinco := pq_cr_reporte_fondos_p3.fn_fecha_cre_original_r(pn_cod => p.aqpa377pgcod,
                                                                 pn_mod => p.aqpa377mod,
                                                                 pn_suc => p.aqpa377suc,
                                                                 pn_mda => p.aqpa377mda,
                                                                 pn_pap => p.aqpa377pap,
                                                                 pn_cta => p.aqpa377cta,
                                                                 pn_ope => p.aqpa377ope,
                                                                 pn_sbo => p.aqpa377sbop,
                                                                 pn_top => p.aqpa377tope,
                                                                 pc_rep => lc_lrep,
                                                                 pd_fre => pn_ffin);
            exception
              when others then
                ld_ffinco := null;
            end;
          
            -- Fecha de vencimiento dela próxima cuota impaga
            -- Fecha de vencimiento de la próxima cuota impaga
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_impaga(pn_cod    => p.aqpa377pgcod,
                                                        pn_mod    => p.aqpa377mod,
                                                        pn_suc    => p.aqpa377suc,
                                                        pn_mda    => p.aqpa377mda,
                                                        pn_pap    => p.aqpa377pap,
                                                        pn_cta    => p.aqpa377cta,
                                                        pn_ope    => p.aqpa377ope,
                                                        pn_sbo    => p.aqpa377sbop,
                                                        pn_top    => p.aqpa377tope,
                                                        pn_fecha  => pn_ffin,
                                                        pn_fvenuc => lc_fvenuc);
            exception
              when others then
                lc_fvenuc := null;
            end;
          
            -- Fecha de vencimiento de la última cuota pagada                                 
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_datos_ufecha(pn_cod   => p.aqpa377pgcod,
                                                              pn_mod   => p.aqpa377mod,
                                                              pn_suc   => p.aqpa377suc,
                                                              pn_mda   => p.aqpa377mda,
                                                              pn_pap   => p.aqpa377pap,
                                                              pn_cta   => p.aqpa377cta,
                                                              pn_ope   => p.aqpa377ope,
                                                              pn_sbo   => p.aqpa377sbop,
                                                              pn_top   => p.aqpa377tope,
                                                              pn_fecha => pn_ffin,
                                                              pn_fpagu => lc_fupag1, -- Fecha de la última cuota pagada
                                                              pn_fvenu => lc_fvenup); -- Fecha de vencimiento de la última cuota pagada
            exception
              when others then
                lc_fupag1 := null;
                lc_fvenup := null;
            end;
          
            -- 30. Número de cuotas pendientes de pago
            -- Fecha del útimo pago
          
            begin
              pq_cr_reporte_fondos_p3.sp_fecha_ncuop_2(p.aqpa377pgcod,
                                                     p.aqpa377mod,
                                                     p.aqpa377suc,
                                                     p.aqpa377mda,
                                                     p.aqpa377pap,
                                                     p.aqpa377cta,
                                                     p.aqpa377ope,
                                                     p.aqpa377sbop,
                                                     p.aqpa377tope,
                                                     pn_ffin,
                                                     lc_fupag1,
                                                     lc_ncuop,
                                                     lc_ncuopg,
                                                     lc_ncuoimp);
            exception
              when others then
                lc_ncuop  := 0;
                lc_ncuopg := 0;
                lc_ncuoimp :=0;
            end;
          
            -- 35. Fecha de última cuota pagado
            begin
              lc_ufpag1 := pq_cr_reporte_fondos_p3.fn_fecha_upago(p.aqpa377pgcod,
                                                                  p.aqpa377mod,
                                                                  p.aqpa377suc,
                                                                  p.aqpa377mda,
                                                                  p.aqpa377pap,
                                                                  p.aqpa377cta,
                                                                  p.aqpa377ope,
                                                                  p.aqpa377sbop,
                                                                  p.aqpa377tope,
                                                                  pn_ffin);
            exception
              when others then
                lc_ufpag1 := null;
            end;
          
            -- 14. Situación Contable (estado del crédito: vigente (VGT), vencido (VCD), Refinanciado (RFN), Judicial (JDC))                                                        
          
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_scond_c(pn_cod  => p.aqpa377pgcod,
                                                         pn_mod  => p.aqpa377mod,
                                                         pn_suc  => p.aqpa377suc,
                                                         pn_mda  => p.aqpa377mda,
                                                         pn_pap  => p.aqpa377pap,
                                                         pn_cta  => p.aqpa377cta,
                                                         pn_ope  => p.aqpa377ope,
                                                         pn_sbo  => p.aqpa377sbop,
                                                         pn_top  => p.aqpa377tope,
                                                         pn_dcon => p.dcon,
                                                         pn_est  => p.aostat,
                                                         
                                                         pn_ufech => lc_ufpag1,
                                                         pn_rubr  => lc_dcon,
                                                         pn_resp  => lc_scon);
            exception
              when others then
                lc_dcon := '';
                lc_dcon := '';
            end;
          
            -- Distribución de pago
            begin
              -- Call the procedure
              -- pq_cr_reporte_fondos_p3.sp_distribuc_pago(pn_cod   => p.aqpa377pgcod,
              pq_cr_reporte_fondos_p3.sp_distribuc_pago_tot(pn_cod   => p.aqpa377pgcod,
                                                            pn_mod   => p.aqpa377mod,
                                                            pn_suc   => p.aqpa377suc,
                                                            pn_mda   => p.aqpa377mda,
                                                            pn_pap   => p.aqpa377pap,
                                                            pn_cta   => p.aqpa377cta,
                                                            pn_ope   => p.aqpa377ope,
                                                            pn_sbo   => p.aqpa377sbop,
                                                            pn_top   => p.aqpa377tope,
                                                            pn_fecha => pn_ffin,
                                                            pn_tsum  => lc_tsum,
                                                            pn_gas   => lc_gas,
                                                            pn_mor   => lc_mor,
                                                            pn_int   => lc_int,
                                                            pn_cuo   => lc_cuo,
                                                            pn_icv   => lc_icv,
                                                            pn_pen   => lc_pen);
            exception
              when others then
                lc_tsum := 0;
                lc_gas  := 0;
                lc_mor  := 0;
                lc_int  := 0;
                lc_cuo  := 0;
                lc_icv  := 0;
                lc_pen  := 0;
            end;
          
            -- 47. Flag de amortización
          
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_flag_amrtzn(pn_cod   => p.aqpa377pgcod,
                                                     pn_mod   => p.aqpa377mod,
                                                     pn_suc   => p.aqpa377suc,
                                                     pn_mda   => p.aqpa377mda,
                                                     pn_pap   => p.aqpa377pap,
                                                     pn_cta   => p.aqpa377cta,
                                                     pn_ope   => p.aqpa377ope,
                                                     pn_sbo   => p.aqpa377sbop,
                                                     pn_top   => p.aqpa377tope,
                                                     pn_fecha => pn_ffin,
                                                     pn_flarm => lc_lamr,
                                                     pn_fecrm => lc_fecha_amot);
            exception
              when others then
                lc_lamr       := 'NO';
                lc_fecha_amot := null;
            end;
          
            -- 49. Pago realizado (el pago total)
            begin
              pq_cr_reporte_fondos_p3.sp_obtener_pagoi_crec(pn_cod    => p.aqpa377pgcod,
                                                            pn_mod    => p.aqpa377mod,
                                                            pn_suc    => p.aqpa377suc,
                                                            pn_mda    => p.aqpa377mda,
                                                            pn_pap    => p.aqpa377pap,
                                                            pn_cta    => p.aqpa377cta,
                                                            pn_ope    => p.aqpa377ope,
                                                            pn_sbo    => p.aqpa377sbop,
                                                            pn_top    => p.aqpa377tope,
                                                            pn_ord    => 83,
                                                            pn_fcorte => pn_ffin,
                                                            pn_impl   => lc_mpag,
                                                            pn_fech   => lc_fpag);
            exception
              when others then
                lc_mpag := 0;
                lc_fpag := null;
              
            end;
          
            -- 50. Principal Amortizado (capital amortizado)
            begin
              pq_cr_reporte_fondos_p3.sp_obtener_pagoi_crec(pn_cod    => p.aqpa377pgcod,
                                                            pn_mod    => p.aqpa377mod,
                                                            pn_suc    => p.aqpa377suc,
                                                            pn_mda    => p.aqpa377mda,
                                                            pn_pap    => p.aqpa377pap,
                                                            pn_cta    => p.aqpa377cta,
                                                            pn_ope    => p.aqpa377ope,
                                                            pn_sbo    => p.aqpa377sbop,
                                                            pn_top    => p.aqpa377tope,
                                                            pn_ord    => 10,
                                                            pn_fcorte => pn_ffin,
                                                            pn_impl   => lc_mpri,
                                                            pn_fech   => lc_fpri1);
            exception
              when others then
                lc_mpri  := 0;
                lc_fpri1 := null;
            end;
          
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
            --- Nivel de ventas
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_nventas(pn_cod      => p.aqpa377pgcod,
                                                         pn_mod      => p.aqpa377mod,
                                                         pn_suc      => p.aqpa377suc,
                                                         pn_mda      => p.aqpa377mda,
                                                         pn_pap      => p.aqpa377pap,
                                                         pn_cta      => p.aqpa377cta,
                                                         pn_ope      => p.aqpa377ope,
                                                         pn_sbo      => p.aqpa377sbop,
                                                         pn_top      => p.aqpa377tope,
                                                         pn_fecha    => pn_ffin,
                                                         pn_ventas   => lc_nventas,
                                                         pn_inst_eva => lc_eval,
                                                         pn_inst_sol => lc_inst);
            exception
              when others then
                lc_nventas := 0;
                lc_eval    := 0;
                lc_inst    := 0;
            end;
          
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   
            -- Datos del crédito original
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_iniciales(pn_cod     => p.aqpa377pgcod,
                                                           pn_mod     => p.aqpa377mod,
                                                           pn_suc     => p.aqpa377suc,
                                                           pn_mda     => p.aqpa377mda,
                                                           pn_pap     => p.aqpa377pap,
                                                           pn_cta     => p.aqpa377cta,
                                                           pn_ope     => p.aqpa377ope,
                                                           pn_sbo     => p.aqpa377sbop,
                                                           pn_top     => p.aqpa377tope,
                                                           pn_fde_ini => lc_fecha_ini,
                                                           pn_mon_ini => lc_monto_ini,
                                                           pn_cuo_ini => lc_cuo_ini);
            exception
              when others then
                lc_fecha_ini := p.aofval;
                lc_monto_ini := p.aoimp;
                lc_cuo_ini   := 0;
            end;
          
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                 
          
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_fecha_ncuo_pagtotal(pn_cod      => p.aqpa377pgcod,
                                                             pn_mod      => p.aqpa377mod,
                                                             pn_suc      => p.aqpa377suc,
                                                             pn_mda      => p.aqpa377mda,
                                                             pn_pap      => p.aqpa377pap,
                                                             pn_cta      => p.aqpa377cta,
                                                             pn_ope      => p.aqpa377ope,
                                                             pn_sbo      => p.aqpa377sbop,
                                                             pn_top      => p.aqpa377tope,
                                                             pn_fecha    => pn_ffin,
                                                             pn_ncuo_pag => lc_ncuo_pag);
            exception
              when others then
                lc_ncuo_pag := 0;
            end;
          
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                      
            -- 53. SALDO CAPITAL CANCELADO  
            begin
              /*
              lc_scapc := pq_cr_reporte_fondos_p3.fn_obtener_sdocap(p.aqpa377pgcod,
                                                                 p.aqpa377mod,
                                                                 p.aqpa377suc,
                                                                 p.aqpa377mda,
                                                                 p.aqpa377pap,
                                                                 p.aqpa377cta,
                                                                 p.aqpa377ope,
                                                                 p.aqpa377sbop,
                                                                 p.aqpa377tope,
                                                                 pn_ffin);
              */
              lc_scapc := lc_monto_ini - lc_cuo;
            
              --if lc_scapc < 0 then
              --  lc_scapc := 0;
              --end if;
            
            exception
              when others then
                lc_scapc := 0;
            end;
          
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    
            -- 54. SALDO CAPITAL CANCELADO            
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_datraso_uimp(pn_cod   => p.aqpa377pgcod,
                                                              pn_mod   => p.aqpa377mod,
                                                              pn_suc   => p.aqpa377suc,
                                                              pn_mda   => p.aqpa377mda,
                                                              pn_pap   => p.aqpa377pap,
                                                              pn_cta   => p.aqpa377cta,
                                                              pn_ope   => p.aqpa377ope,
                                                              pn_sbo   => p.aqpa377sbop,
                                                              pn_top   => p.aqpa377tope,
                                                              pn_fecha => pn_ffin,
                                                              pn_diat  => lc_diatimp);
            exception
              when others then
                lc_diatimp := 0;
            end;
          
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
            -- 55. Saldo Insoluto Real
            begin
              --- jrodriguej 03.03.2021                                           
            
              pq_cr_reporte_fondos.sp_obtener_sald_insol2_h(pn_cod   => p.aqpa377pgcod,
                                                             pn_mod   => p.aqpa377mod,
                                                             pn_suc   => p.aqpa377suc,
                                                             pn_mda   => p.aqpa377mda,
                                                             pn_pap   => p.aqpa377pap,
                                                             pn_cta   => p.aqpa377cta,
                                                             pn_ope   => p.aqpa377ope,
                                                             pn_sbo   => p.aqpa377sbop,
                                                             pn_top   => p.aqpa377tope,
                                                             pn_fecha => pn_ffin,
                                                             pn_indi  => 3, -- CRECER
                                                             pn_stat  => p.estado,
                                                             pn_sald  => lc_sdoins);
            
            exception
              when others then
                lc_sdoins := 0;
            end;
          
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
            -- 35. Monto de cobertura
            begin
              lc_mcob := lc_sdoins * lb_pcob / 100;
            exception
              when others then
                lc_mcob := 0;
            end;  
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => p.aqpa377pgcod,
                                                             pn_mod   => p.aqpa377mod,
                                                             pn_suc   => p.aqpa377suc,
                                                             pn_mda   => p.aqpa377mda,
                                                             pn_pap   => p.aqpa377pap,
                                                             pn_cta   => p.aqpa377cta,
                                                             pn_ope   => p.aqpa377ope,
                                                             pn_sbo   => p.aqpa377sbop,
                                                             pn_top   => p.aqpa377tope,
                                                             pn_rubr   => 9300082030000,
                                                           pd_fecha => pn_ffin,
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr  => ln_mhonr,
                                                           pd_fhonr  => ld_fhonr,
                                                           pn_sdohon => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon:= 0;
          end; 
          -------------------------------------------------------------------
          -- Tasa de interes moratoria
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => p.aqpa377pgcod,
                                                             pn_mod   => p.aqpa377mod,
                                                             pn_suc   => p.aqpa377suc,
                                                             pn_mda   => p.aqpa377mda,
                                                             pn_pap   => p.aqpa377pap,
                                                             pn_cta   => p.aqpa377cta,
                                                             pn_ope   => p.aqpa377ope,
                                                             pn_sbo   => p.aqpa377sbop,
                                                             pn_top   => p.aqpa377tope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tmor);
          exception
            when others then
              lc_tmor := 0;
          end;
          --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => p.aqpa377pgcod,
                                                             pn_mod   => p.aqpa377mod,
                                                             pn_suc   => p.aqpa377suc,
                                                             pn_mda   => p.aqpa377mda,
                                                             pn_pap   => p.aqpa377pap,
                                                             pn_cta   => p.aqpa377cta,
                                                             pn_ope   => p.aqpa377ope,
                                                             pn_sbo   => p.aqpa377sbop,
                                                             pn_top   => p.aqpa377tope,                                                          
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
          ----------------------------------------------------------
          -- 10. Distribución clasificación de riesgo enviado por caja
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_calf_caja(pn_cod   => p.aqpa377pgcod,
                                                             pn_mod   => p.aqpa377mod,
                                                             pn_suc   => p.aqpa377suc,
                                                             pn_mda   => p.aqpa377mda,
                                                             pn_pap   => p.aqpa377pap,
                                                             pn_cta   => p.aqpa377cta,
                                                             pn_ope   => p.aqpa377ope,
                                                             pn_sbo   => p.aqpa377sbop,
                                                             pn_top   => p.aqpa377tope,
                                                         pn_est   => p.aostat,
                                                         pn_fecha => pn_ffin,
                                                         --pn_dcla => lc_dcla,
                                                         --pn_ncla => lc_ncla
                                                         pn_calif0a => lc_calif0a,
                                                         pn_calif1a => lc_calif1a,
                                                         pn_calif2a => lc_calif2a,
                                                         pn_calif3a => lc_calif3a,
                                                         pn_calif4a => lc_calif4a,
                                                         pn_deccaj  => lc_fecha_caj);
          exception
            when others then
              lc_calif0a   := 100;
              lc_calif1a   := 0;
              lc_calif2a   := 0;
              lc_calif3a   := 0;
              lc_calif4a   := 0;
              lc_fecha_caj := null;
          end;
          -- 21. Razón social
        
          begin
            lc_perjur := pq_cr_reporte_fondos_p3.fn_obtener_perjur(p.aqpa377pais,
                                                                   p.aqpa377tdoc,
                                                                   p.aqpa377ndoc);
          exception
            when others then
              lc_perjur := '';
          end;
          -- 22. Apellidos y nombres del cliente 
          begin
            lc_pernat := pq_cr_reporte_fondos_p3.fn_obtener_pernat(p.aqpa377pais,
                                                                   p.aqpa377tdoc,
                                                                   p.aqpa377ndoc);
          exception
            when others then
              lc_pernat := '';
          end;
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
            begin
              insert into aqpb073
                (aqpb073usur,
                 --aqpb073corr,
                 --aqpb073fec,
                 --aqpb073hora,
                 aqpb073pais,
                 aqpb073tdoc, -- 1. Tipo Documento (RUC) 
                 aqpb073ndoc, -- 2. Número Documento (N° de Ruc)
                 --aqpb073ipgcod,
                 --aqpb073itsuc, -- 21. Agencia, sucursal 
                 --aqpb073itmod,
                 --aqpb073ittran,
                 --aqpb073itnrel,
                 --aqpb073itord,
                 --aqpb073itsbor,
                 
                 aqpb073pgcod,
                 aqpb073mod,
                 aqpb073suc,
                 aqpb073mda,
                 aqpb073pap,
                 aqpb073cta, -- 23. Nro. cuenta
                 aqpb073ope, -- 24. Nro. operación
                 aqpb073sbop,
                 aqpb073tope,
                 
                 aqpb073esf, -- 3. ESF (Caja Arequipa)
                 aqpb073ccob, -- 4. Código Cobertura (COFIDE)
                 aqpb073fval, -- 5. Fecha Desembolso
                 aqpb073sdoi, -- 6. Saldo Insoluto
                 
                 aqpb073mdad, -- 7. Moneda (PEN o USD)
                 aqpb073fcla, -- 8. Fecha de clasificación SBS
                 aqpb073cnom, -- 9. Calificación Normal (en números de 100 a 0)
                 aqpb073ccpp, -- 10. Calificación CPP (en números de 100 a 0)  
                 aqpb073cdef, -- 11. Calificación Deficiente (en números de 100 a 0)
                 aqpb073cdud, -- 12. Calificación Dudoso (en números de 100 a 0)
                 aqpb073cper, -- 13. Calificación Perdida (en números de 100 a 0)
                 aqpb073dcon, -- 14. Situación Contable (estado del crédito: vigente (VGT), vencido (VCD), Refinanciado (RFN), Judicial (JDC))            
                 aqpb073ncon, -- 14.1. Situación Contable - Concepto
                 aqpb073tasa, -- 15. Tasa de Interés
                 
                 aqpb073ntra, -- 16. Número Trabajadores 
                 aqpb073nven, -- 17. Nivel Ventas 
                 aqpb073expr, -- 18. Exportaciones
                 aqpb073reg, -- 19. Región
                 aqpb073nreg, -- 19.1 Región - Nombre
                 aqpb073zon, -- 20. Zona 
                 aqpb073nzon, -- 20.1 Zona - Nombre
                 aqpb073nsuc, -- 21.1 Agencia(Sucursal) - Nombre                        
                 aqpb073ase, -- 22. Analista
                 --aqpb073cta, -- 23. Nro. cuenta
                 --aqpb073oper, -- 24. Nro. operación
                 --aqpb073tcre, -- 25. Tipo SBS
                 
                 aqpb073tcre, -- 25. Tipo crédito SBS
                 aqpb073ncre, -- 25.1 Tipo crédito SBS - Concepto
                 aqpb073ciuu, -- 26. CIUU
                 aqpb073actn, -- 27. Actividad
                 aqpb073dmon, -- 28. Monto desembolsado
                 aqpb073ncuo, -- 29. Número de cuotas 
                 aqpb073pcuo, -- 30. Número de cuotas pendientes de pago
                 aqpb073diat, -- 31. Días de atraso
                 aqpb073vcuo, -- 32. Vencimiento de cuota atrasada
                 aqpb073tasm, -- 33. Tasa de interés moratoria
                 aqpb073pcob, -- 34. % cobertura
                 aqpb073mcob, -- 35. Monto de cobertura
                 aqpb073fini, -- 36. Fecha inicio crédito
                 aqpb073ffin, -- 37. Fecha fin crédito
                 aqpb073lrep, -- 38. Flag de reprogramación
                 aqpb073nrep, -- 39. Número de reprogramaciones
                 aqpb073frep, -- 40. Fecha de reprogramación
                 aqpb073lamr, -- 41. Flag de amortización
                 aqpb073famr, -- 42. Fecha de la amortización 
                 aqpb073prel, -- 43. Pago realizado (el pago total)
                 aqpb073camr, -- 44. Principal Amortizado (capital amortizado)
                 aqpb073estd, -- 45. Estado del crédito (vigente/cancelado)
                 aqpb073fcan, -- 46. Fecha de cancelación
                 aqpb073fcae, -- 47. Fecha de cambio de estado contable
                 aqpb073dest, -- 48. Destino del crédito              -- 49. Tipo de Crédito SBS
                 
                 aqpb073fvenuc, -- 31. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA IMPAGA  
                 aqpb073fvenup, -- 32. FECHA DE VENCIMIENTO DE ÚLTIMA CUOTA PAGADA 
                 aqpb073fpag, -- 33. FECHA DE PAGO DE ÚLTIMA CUOTA PAGADA  
                 aqpb073ncuop, -- 34. NÚMERO DE CUOTAS PAGADAS  
                 aqpb073mcuop, -- 35. MONTO DE CUOTAS PAGADAS 
                 
                 aqpb073gas, -- 36.a Seguros
                 aqpb073mor, -- 36.b Interés Moratorio
                 aqpb073int, -- 36.c Intereses
                 aqpb073cuo, -- 36.d Capital
                 aqpb073icv, -- 36.e Interés compensatorio
                 aqpb073pen, -- 36.f Penalidad    
                 
                 aqpb073scap, -- 53. SALDO CAPITAL CANCELADO   
                 aqpb073inst,
                 aqpb073eval,
                 
                 aqpb073stat,
                 aqpb073fe99,
                 
                 aqpb073ciiuori,
                 aqpb073actnomori,
                 
                 aqpb073paisb,
                 aqpb073tdocb,
                 aqpb073ndocb,
                 aqpb073diaimp,
                 aqpb073sdoins, --- 54. Saldo Insoluto Real
                 
                 aqpb073fcr,
                 aqpb073hcr,
                 aqpb073fproc,
                 aqpb073mhonr,
                 aqpb073fhonr,
                 aqpb073chonr,
                 aqpb073sdocap,
                 aqpb073sdohon,
                 aqpb073crehon,
                 aqpb073fclaa,
                 aqpb073cnoma,
                 aqpb073ccppa,
                 aqpb073cdefa,
                 aqpb073cduda,
                 aqpb073cpera,
                 aqpb073rnom,
                 aqpb073codcob,
                 aqpb073fcest,
                 aqpb073cuov,
                 aqpb073ncer,
                 aqpb073chon,
                 aqpb073ccob2,
                 aqpb073nrccor,
                 aqpb073nrccac,
                 aqpb073ffinco,
                 aqpb073conhon)
              values
                (pn_usuario,
                 
                 --p.aqpa377corr,
                 --p.aqpa377fec,
                 --p.aqpa377hora,
                 p.aqpa377pais,
                 le_tdoc, --p.aqpa377tdoc, -- 1. Tipo Documento (RUC) 
                 trim(lb_ndoc), --p.aqpa377ndoc, -- 2. Número Documento (N° de Ruc)
                 --p.aqpa377ipgcod,
                 --p.aqpa377itsuc, -- 21. Agencia, sucursal 
                 --p.aqpa377itmod,
                 --p.aqpa377ittran,
                 --p.aqpa377itnrel,
                 --p.aqpa377itord,
                 --p.aqpa377itsbor,
                 
                 p.aqpa377pgcod,
                 p.aqpa377mod,
                 p.aqpa377suc,
                 p.aqpa377mda,
                 p.aqpa377pap,
                 p.aqpa377cta, -- 23. Nro. cuenta
                 p.aqpa377ope, -- 24. Nro. operación
                 p.aqpa377sbop,
                 p.aqpa377tope,
                 
                 lc_esf, -- 3. ESF (Caja Arequipa)
                 lb_ccob, -- 4. Código Cobertura (COFIDE)
                 lc_fecha_ini, --p.aofval, -- 5. Fecha Desembolso
                 lc_sdoi, -- 6. Saldo Prestamo
                 
                 lc_mda, -- 7. Moneda (PEN o USD)
                 lc_fecha_rcc, -- 8. Fecha de clasificación SBS
                 lc_calif0, -- 9. Calificación Normal 
                 lc_calif1, -- 10. Calificación CPP 
                 lc_calif2, -- 11. Calificación Deficiente
                 lc_calif3, -- 12. Calificación Dudoso 
                 lc_calif4, -- 13. Calificación Perdida 
                 substr(trim(lc_dcon), 1, 4), --p.dcon, -- 14. Situación Contable (estado del crédito: vigente (VGT), vencido (VCD), Refinanciado (RFN), Judicial (JDC))
                 substr(trim(lc_scon), 1, 20), -- 14.1 Situación Contable
                 p.aotasa, -- 15. Tasa de Interés
                 
                 lb_tnro, -- 16. Número Trabajadores 
                 lb_nven, --lc_nventas, -- 17. Nivel Ventas 
                 0, -- 18. Exportaciones
                 lc_regi, -- 19. Región
                 substr(trim(lc_nreg), 1, 30), -- 19.1 Región - Nombre
                 lc_zona, -- 20. Zona 
                 substr(trim(lc_nzon), 1, 40), -- 20.1 Zona - Nombre
                 substr(trim(lc_nsuc), 1, 30), -- 21.1 Agencia(Sucursal) - Nombre                        
                 substr(trim(lc_ases), 1, 10), -- 22. Analista
                 --p.aqpa377cta, -- 23. Nro. cuenta
                 --p.aqpa377ope, -- 24. Nro. operación
                 
                 lc_pcre, -- 25. Tipo SBS
                 substr(trim(lc_ncre), 1, 20), -- 25.1 Tipo crédito SBS - Concepto
                 lc_ciiu4, -- 26. CIUU
                 substr(trim(lc_acti), 1, 60), -- 27. Actividad
                 lc_monto_ini, --p.aoimp, -- 28. Monto desembolsado
                 lc_cuo_ini, --lc_cuo_n, -- 29. Número de cuotas 
                 lc_ncuop, -- 30. Número de cuotas pendientes de pago
                 lc_diat, -- 31. Días de atraso
                 lc_fvton, -- 32. Vencimiento de cuota atrasada
                 lc_tmor, -- 33. Tasa de interés moratoria
                 lb_pcob, -- 34. % cobertura
                 lc_mcob, -- 35. Monto de cobertura
                 lc_fecha_ini, --p.aofval, -- 36. Fecha inicio crédito
                 p.aofvto, -- 37. Fecha fin crédito
                 lc_lrep, -- 38. Flag de reprogramación
                 lc_nrep, -- 39. Número de reprogramaciones
                 lc_frep, -- 40. Fecha de reprogramación
                 lc_lamr, -- 41. Flag de amortización
                 lc_fecha_amot, --lc_fpag, -- 42. Fecha de la amortización, por defecto la fecha del sistema 
                 lc_mpag, -- 43. Pago realizado (el pago total)
                 lc_mpri, -- 44. Principal Amortizado (capital amortizado)
                 lc_statd, -- 45. Estado del crédito (vigente/cancelado)
                 p.aofe99, -- 46. Fecha de cancelación
                 null, -- 47. Fecha de cambio de estado contable
                 substr(trim(lc_tdest), 1, 5), -- 48. Destino del crédito              -- 49. Tipo de Crédito SBS
                 
                 lc_fvenuc, -- 31. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA IMPAGA  
                 lc_fvenup, -- 32. FECHA DE VENCIMIENTO DE ÚLTIMA CUOTA PAGADA 
                 lc_ufpag1, -- 33. FECHA DE PAGO DE ÚLTIMA CUOTA PAGADA  
                 lc_ncuo_pag, --lc_ncuopg, -- 34. NÚMERO DE CUOTAS PAGADAS 
                 lc_tsum, -- 35. MONTO DE CUOTAS PAGADAS  
                 
                 lc_gas, -- 36.a Seguros
                 lc_mor, -- 36.b Interés Moratorio
                 lc_int, -- 36.c Intereses
                 lc_cuo, -- 36.d Capital
                 lc_icv, -- 36.e Interés compensatorio
                 lc_pen, -- 36.f Penalidad        
                 
                 lc_scapc, -- 53. SALDO CAPITAL CANCELADO            
                 
                 lc_inst,
                 lc_eval,
                 
                 p.aostat,
                 p.aofe99,
                 
                 lb_ciuu1,
                 lb_dciu1,
                 
                 p.pepaisb,
                 p.petdocb,
                 p.pendocb,
                 
                 lc_diatimp, --- Días de próxima cuota impaga
                 lc_sdoins, --- Saldo Insoluto Real
                 
                 to_char(sysdate, 'DD/MM/YYYY'),
                 to_char(sysdate, 'HH24:MI:SS'),
                 pn_ffin,
                 ln_mhonr,
                 ld_fhonr,
                 lc_eshonr,
                 lc_sdoi,
                 nvl(ln_sdohon,0),
                 lc_sdoi+nvl(ln_sdohon,0),
                 lc_fecha_caj,
                 lc_calif0a,
                 lc_calif1a,
                 lc_calif2a,
                 lc_calif3a,
                 lc_calif4a,
                 case when p.petdocb = 21 then lc_pernat else lc_perjur end,--rnom,
                 lc_ccob2, --codigo cobertura
                 case when ld_fcest > nvl(p.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 (case when ld_fcest > nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) then ld_fcest else lc_frep end )
                 else (case when nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) > nvl(p.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then lc_frep else p.aofe99 end )end, --fecha de cambio de estado, -- 44. Fecha del cambio de estado del crédito.
                 lc_ncuoimp, --numero de cuotas vencidas
                 lc_ncer,
                 lc_chon,
                 lc_ccob2,
                 lc_cuo_o,
                 lc_cuo_n,
                 ld_ffinco,
                 lc_conhon
              );
              commit;
            exception
              when others then
              
                lc_coderr := substr(trim(sqlcode), 1, 100);
                lc_msgerr := substr(trim(sqlerrm), 1, 1000);
              
                begin
                  insert into AQPB070E
                    (aqpb070etab,
                     aqpb070efec,
                     aqpb070esuc,
                     aqpb070eusr,
                     aqpb070ecoe,
                     aqpb070emsge,
                     aqpb070efcr,
                     aqpb070ehcr,
                     aqpb070ecta,
                     aqpb070eope)
                  values
                    ('AQPB073',
                     pn_ffin,
                     pc_sucurs,
                     substr(trim(pn_usuario), 1, 10),
                     lc_coderr,
                     lc_msgerr,
                     to_char(sysdate, 'DD/MM/YYYY'),
                     to_char(sysdate, 'HH24:MI:SS'),
                     ln_cta,
                     ln_ope);
                  commit;
                exception
                  when others then
                    null;
                end;
              
            end;
          
          end loop;
        
        end loop;
      
      end;
    else
    
      begin
      
        for m in modulos_crecer() loop
        
          for p in reporte_fcre_r3_h(m.td_mod) loop
          
            ln_cta := p.aqpa377cta;
            ln_ope := p.aqpa377ope;
          
            -- 4. Código cobertura COFIDE
          
            begin
              -- Call the procedure
              pq_cr_reporte_fondos.sp_plantilla_fcrecer_v2(pn_cod   => p.aqpa377pgcod,
                                                        pn_mod   => p.aqpa377mod,
                                                        pn_suc   => p.aqpa377suc,
                                                        pn_mda   => p.aqpa377mda,
                                                        pn_pap   => p.aqpa377pap,
                                                        pn_cta   => p.aqpa377cta,
                                                        pn_ope   => p.aqpa377ope,
                                                        pn_sbo   => p.aqpa377sbop,
                                                        pn_top   => p.aqpa377tope,
                                                        pn_fecha => pn_ffin,
                                                        
                                                        pn_tdoc => lb_tdoc,
                                                        pn_ndoc => lb_ndoc,
                                                        pn_esf  => lb_esf,
                                                        pn_ccob => lb_ccob,
                                                        pn_tnro => lb_tnro,
                                                        pn_mtoe => lb_mtoe,
                                                        pn_pcob => lb_pcob,
                                                        pn_ciuu => lb_ciuu1,
                                                        pn_dciu => lb_dciu1,
                                                        pn_nven => lb_nven,
                                                        pn_ncer => lc_ncer,
                                                        pn_chon => lc_chon,
                                                        pn_ccob2 => lc_ccob2,
                                                        pn_conhon => lc_conhon);
            
            exception
              when others then
              
                lb_tdoc  := null;
                lb_ndoc  := null;
                lb_esf   := null;
                lb_ccob  := null;
                lb_tnro  := null;
                lb_mtoe  := null;
                lb_pcob  := null;
                lb_ciuu1 := null;
                lb_dciu1 := null;
                lb_nven  := null;
                lc_ncer  := null;
                lc_chon  := null;
                lc_ccob2 := null;
                lc_conhon:= null;
            end;
          
            if lb_tdoc = 'RUC' then
              le_tdoc := 6;
            else
              le_tdoc := 21;
            end if;
          
            -- 7. Moneda (PEN o USD)
            begin
              if p.aqpa377mda = 0 then
                lc_mda := 'PEN';
              else
                lc_mda := 'USD';
              end if;
            end;
          
            -- 6. Saldo Insoluto
            begin
              --lc_sdoi := pq_cr_reporte_fondos_p3.fn_obtener_saldoi(p.aqpa377pgcod,
              lc_sdoi := pq_cr_reporte_fondos_p3.fn_obtener_saldo_actual(p.aqpa377pgcod,
                                                                         p.aqpa377mod,
                                                                         p.aqpa377suc,
                                                                         p.aqpa377mda,
                                                                         p.aqpa377pap,
                                                                         p.aqpa377cta,
                                                                         p.aqpa377ope,
                                                                         p.aqpa377sbop,
                                                                         p.aqpa377tope,
                                                                         pn_ffin,
                                                                         pn_usuario);
            exception
              when others then
                lc_sdoi := 0;
            end;
            -- 10. Calificación Normal (en números de 100 a 0)
            -- 11. Calificación CPP (en números de 100 a 0)  
            -- 12. Calificación Deficiente (en números de 100 a 0)
            -- 13. Calificación Dudoso (en números de 100 a 0)
            -- 14. Calificación Perdida (en números de 100 a 0)
          
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_calf(pn_tdoc   => p.aqpa377tdoc,
                                                      pn_ndoc   => p.aqpa377ndoc,
                                                      pn_fech   => pn_ffin,
                                                      pn_calif0 => lc_calif0,
                                                      pn_calif1 => lc_calif1,
                                                      pn_calif2 => lc_calif2,
                                                      pn_calif3 => lc_calif3,
                                                      pn_calif4 => lc_calif4,
                                                      pn_csbs   => lc_csbs);
            exception
              when others then
                lc_calif0 := 100;
                lc_calif1 := 0;
                lc_calif2 := 0;
                lc_calif3 := 0;
                lc_calif4 := 0;
                lc_csbs   := 0;
            end;
          
            -- Acondicionamiento de CRR
            -- lc_calif0 := round(lc_calif0 / 100, 2);
            -- lc_calif1 := round(lc_calif1 / 100, 2);
            -- lc_calif2 := round(lc_calif2 / 100, 2);
            -- lc_calif3 := round(lc_calif3 / 100, 2);
            -- lc_calif4 := round(lc_calif4 / 100, 2);
          
            -- 19. Región
            -- 19.1 Región - Nombre
            -- 20. Zona
            -- 20.1 Zona - Nombre
            -- 21. Agencia (Sucursal)
            -- 21.1 Agencia(Sucursal) - Nombre
          
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => p.aqpa377suc,
                                                      pn_regi => lc_regi,
                                                      pn_zona => lc_zona,
                                                      pn_nsuc => lc_nsuc,
                                                      pn_nzon => lc_nzon,
                                                      pn_nreg => lc_nreg);
            exception
              when others then
                lc_regi := 0;
                lc_zona := 0;
                lc_nsuc := '';
                lc_nzon := '';
                lc_nreg := '';
              
            end;
          
            -- 22. Analista
            begin
              lc_ases := fn_analista_credito(p.aqpa377mod,
                                             p.aqpa377suc,
                                             p.aqpa377mda,
                                             p.aqpa377pap,
                                             p.aqpa377cta,
                                             p.aqpa377ope,
                                             p.aqpa377sbop,
                                             p.aqpa377tope);
            exception
              when others then
                lc_ases := '';
            end;
          
            -- 22. Tipo de Crédito SBS
          
            begin
              -- Call the procedure                                                         
              pq_cr_reporte_fondos_p3.sp_tipo_credito_sbs_vig(pn_cod     => p.aqpa377pgcod,
                                                              pn_mod     => p.aqpa377mod,
                                                              pn_suc     => p.aqpa377suc,
                                                              pn_mda     => p.aqpa377mda,
                                                              pn_pap     => p.aqpa377pap,
                                                              pn_cta     => p.aqpa377cta,
                                                              pn_ope     => p.aqpa377ope,
                                                              pn_sbo     => p.aqpa377sbop,
                                                              pn_top     => p.aqpa377tope,
                                                              pn_fecha   => pn_ffin,
                                                              pn_usuario => pn_usuario,
                                                              pn_ntipo   => lc_pcre,
                                                              pn_nconc   => lc_ncre);
            exception
              when others then
                lc_pcre := 0;
                lc_ncre := '';
            end;
          
            -- 45. CIUU
            -- 46. Actividad económica
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_ciiu_codigo4(p_pais   => p.aqpa377pais,
                                                      p_petdoc => p.aqpa377tdoc,
                                                      p_pendoc => p.aqpa377ndoc,
                                                      p_ciuu4  => lc_ciiu4,
                                                      p_ciuu6  => lc_ciiu6);
            exception
              when others then
                lc_ciiu4 := 0;
                lc_ciiu6 := 0;
            end;
          
            -- 10.2 Descripción de CIUU 
            begin
              -- Call the procedure
              if lc_ciiu4 <> 0 then
                pq_cr_reporte_fondos_p3.sp_obtener_ciuu(pn_cciu => lc_ciiu6,
                                                        pn_dciu => lc_acti);
              else
                if lc_ciiu6 <> 0 then
                  lc_ciiu4 := to_number(substr(to_char(lc_ciiu6), 1, 4));
                else
                  lc_ciiu4 := 0;
                end if;
                lc_acti := '';
              end if;
            
            exception
              when others then
                lc_acti := '';
            end;
          
            begin
              -- 29. Número de cuotas 
              lc_cuo_n := pq_cr_reporte_fondos_p3.fn_fecha_ncuoa(pn_cod => p.aqpa377pgcod,
                                                                 pn_mod => p.aqpa377mod,
                                                                 pn_suc => p.aqpa377suc,
                                                                 pn_mda => p.aqpa377mda,
                                                                 pn_pap => p.aqpa377pap,
                                                                 pn_cta => p.aqpa377cta,
                                                                 pn_ope => p.aqpa377ope,
                                                                 pn_sbo => p.aqpa377sbop,
                                                                 pn_top => p.aqpa377tope);
            exception
              when others then
                lc_cuo_n := 0;
            end;
          
            -- 31. Días de atraso 
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_atraso_u(pn_cod   => p.aqpa377pgcod,
                                                          pn_mod   => p.aqpa377mod,
                                                          pn_suc   => p.aqpa377suc,
                                                          pn_mda   => p.aqpa377mda,
                                                          pn_pap   => p.aqpa377pap,
                                                          pn_cta   => p.aqpa377cta,
                                                          pn_ope   => p.aqpa377ope,
                                                          pn_sbo   => p.aqpa377sbop,
                                                          pn_top   => p.aqpa377tope,
                                                          pn_fecha => pn_ffin,
                                                          pn_diat  => lc_diat);
            exception
              when others then
                lc_diat := 0;
            end;
          
            
          
            -- 45. Estado del crédito (vigente/cancelado)
            begin
              lc_statd := pq_cr_reporte_fondos_p3.fn_estado_desc(p.aostat);
            exception
              when others then
                lc_statd := '';
            end;
          
            -- 46. Fecha de cancelación
            lc_feccan := null;
            if p.aostat = 99 then
              lc_feccan := p.aofe99;
            end if;
          
            -- 48. Destino del crédito
            begin
              lc_tdest := pq_cr_reporte_fondos_p3.fn_obtener_tdesti(p.aqpa377mod);
            exception
              when others then
                lc_tdest := '';
            end;
            -- 32. Vencimiento de cuota atrasada
          
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_vpcuov(pn_cod   => p.aqpa377pgcod,
                                                        pn_mod   => p.aqpa377mod,
                                                        pn_suc   => p.aqpa377suc,
                                                        pn_mda   => p.aqpa377mda,
                                                        pn_pap   => p.aqpa377pap,
                                                        pn_cta   => p.aqpa377cta,
                                                        pn_ope   => p.aqpa377ope,
                                                        pn_sbo   => p.aqpa377sbop,
                                                        pn_top   => p.aqpa377tope,
                                                        pn_fecha => pn_ffin,
                                                        
                                                        pn_fpag => lc_fpagg,
                                                        pn_fvto => lc_fvton,
                                                        pn_sumt => lc_pcuo);
            exception
              when others then
                lc_fpagg := null;
                lc_fvton := null;
                lc_pcuo  := 0;
            end;
          
            -- Reprogramaciones    
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_repro_dato_jaqa400(pn_cod   => p.aqpa377pgcod,
                                                     pn_cta   => p.aqpa377cta,
                                                     pn_ope   => p.aqpa377ope,
                                                     pn_fecha => pn_ffin,
                                                     
                                                     pn_flag  => lc_lrep,
                                                     pn_nrep  => lc_nrep,
                                                     pn_fech  => lc_frep,
                                                     pn_tabla => lc_tabla,
                                                     pn_peri  => lc_peri2,
                                                     pn_ncuo  => lc_ncuo2,
                                                     pn_fpri  => lc_fpri,
                                                     pn_fult  => lc_fult);
            exception
              when others then
              
                lc_lrep  := 'NO';
                lc_nrep  := 0;
                lc_frep  := null;
                lc_tabla := '';
                lc_peri2 := 0;
                lc_ncuo2 := 0;
                lc_fpri  := null;
                lc_fult  := null;
            end;
          
            -- Fecha de vencimiento dela próxima cuota impaga
            -- Fecha de vencimiento de la próxima cuota impaga
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_impaga(pn_cod    => p.aqpa377pgcod,
                                                        pn_mod    => p.aqpa377mod,
                                                        pn_suc    => p.aqpa377suc,
                                                        pn_mda    => p.aqpa377mda,
                                                        pn_pap    => p.aqpa377pap,
                                                        pn_cta    => p.aqpa377cta,
                                                        pn_ope    => p.aqpa377ope,
                                                        pn_sbo    => p.aqpa377sbop,
                                                        pn_top    => p.aqpa377tope,
                                                        pn_fecha  => pn_ffin,
                                                        pn_fvenuc => lc_fvenuc);
            exception
              when others then
                lc_fvenuc := null;
            end;
          
            -- Fecha de vencimiento de la última cuota pagada                                     
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_datos_ufecha(pn_cod   => p.aqpa377pgcod,
                                                              pn_mod   => p.aqpa377mod,
                                                              pn_suc   => p.aqpa377suc,
                                                              pn_mda   => p.aqpa377mda,
                                                              pn_pap   => p.aqpa377pap,
                                                              pn_cta   => p.aqpa377cta,
                                                              pn_ope   => p.aqpa377ope,
                                                              pn_sbo   => p.aqpa377sbop,
                                                              pn_top   => p.aqpa377tope,
                                                              pn_fecha => pn_ffin,
                                                              pn_fpagu => lc_fupag1, -- Fecha de la última cuota pagada
                                                              pn_fvenu => lc_fvenup); -- Fecha de vencimiento de la última cuota pagada
            exception
              when others then
                lc_fupag1 := null;
                lc_fvenup := null;
            end;
          
            -- 30. Número de cuotas pendientes de pago
            --lc_ncuop := 
            begin
              pq_cr_reporte_fondos_p3.sp_fecha_ncuop_2(p.aqpa377pgcod,
                                                     p.aqpa377mod,
                                                     p.aqpa377suc,
                                                     p.aqpa377mda,
                                                     p.aqpa377pap,
                                                     p.aqpa377cta,
                                                     p.aqpa377ope,
                                                     p.aqpa377sbop,
                                                     p.aqpa377tope,
                                                     pn_ffin,
                                                     lc_fupag1,
                                                     lc_ncuop,
                                                     lc_ncuopg,
                                                     lc_ncuoimp);
            exception
              when others then
                lc_ncuop  := 0;
                lc_ncuopg := 0;
                lc_ncuoimp := 0;
            end;
          
            -- 35. Fecha de última cuota pagado
            begin
              lc_ufpag1 := pq_cr_reporte_fondos_p3.fn_fecha_upago(p.aqpa377pgcod,
                                                                  p.aqpa377mod,
                                                                  p.aqpa377suc,
                                                                  p.aqpa377mda,
                                                                  p.aqpa377pap,
                                                                  p.aqpa377cta,
                                                                  p.aqpa377ope,
                                                                  p.aqpa377sbop,
                                                                  p.aqpa377tope,
                                                                  pn_ffin);
            exception
              when others then
                lc_ufpag1 := null;
            end;
          
            -- 14. Situación Contable (estado del crédito: vigente (VGT), vencido (VCD), Refinanciado (RFN), Judicial (JDC))
          
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_scond_c(pn_cod  => p.aqpa377pgcod,
                                                         pn_mod  => p.aqpa377mod,
                                                         pn_suc  => p.aqpa377suc,
                                                         pn_mda  => p.aqpa377mda,
                                                         pn_pap  => p.aqpa377pap,
                                                         pn_cta  => p.aqpa377cta,
                                                         pn_ope  => p.aqpa377ope,
                                                         pn_sbo  => p.aqpa377sbop,
                                                         pn_top  => p.aqpa377tope,
                                                         pn_dcon => p.dcon,
                                                         pn_est  => p.aostat,
                                                         
                                                         pn_ufech => lc_ufpag1,
                                                         pn_rubr  => lc_dcon,
                                                         pn_resp  => lc_scon);
            exception
              when others then
                lc_dcon := '';
                lc_dcon := '';
            end;
          
            -- Distribución de pago
            begin
              -- Call the procedure
              -- pq_cr_reporte_fondos_p3.sp_distribuc_pago(pn_cod   => p.aqpa377pgcod,
              pq_cr_reporte_fondos_p3.sp_distribuc_pago_tot(pn_cod   => p.aqpa377pgcod,
                                                            pn_mod   => p.aqpa377mod,
                                                            pn_suc   => p.aqpa377suc,
                                                            pn_mda   => p.aqpa377mda,
                                                            pn_pap   => p.aqpa377pap,
                                                            pn_cta   => p.aqpa377cta,
                                                            pn_ope   => p.aqpa377ope,
                                                            pn_sbo   => p.aqpa377sbop,
                                                            pn_top   => p.aqpa377tope,
                                                            pn_fecha => pn_ffin,
                                                            pn_tsum  => lc_tsum,
                                                            pn_gas   => lc_gas,
                                                            pn_mor   => lc_mor,
                                                            pn_int   => lc_int,
                                                            pn_cuo   => lc_cuo,
                                                            pn_icv   => lc_icv,
                                                            pn_pen   => lc_pen);
            exception
              when others then
                lc_tsum := 0;
                lc_gas  := 0;
                lc_mor  := 0;
                lc_int  := 0;
                lc_cuo  := 0;
                lc_icv  := 0;
                lc_pen  := 0;
            end;
          
            -- 47. Flag de amortización
          
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_flag_amrtzn(pn_cod   => p.aqpa377pgcod,
                                                     pn_mod   => p.aqpa377mod,
                                                     pn_suc   => p.aqpa377suc,
                                                     pn_mda   => p.aqpa377mda,
                                                     pn_pap   => p.aqpa377pap,
                                                     pn_cta   => p.aqpa377cta,
                                                     pn_ope   => p.aqpa377ope,
                                                     pn_sbo   => p.aqpa377sbop,
                                                     pn_top   => p.aqpa377tope,
                                                     pn_fecha => pn_ffin,
                                                     pn_flarm => lc_lamr,
                                                     pn_fecrm => lc_fecha_amot);
            exception
              when others then
                lc_lamr       := 'NO';
                lc_fecha_amot := null;
            end;
          
            -- 49. Pago realizado (el pago total)
            begin
              pq_cr_reporte_fondos_p3.sp_obtener_pagoi_crec(pn_cod    => p.aqpa377pgcod,
                                                            pn_mod    => p.aqpa377mod,
                                                            pn_suc    => p.aqpa377suc,
                                                            pn_mda    => p.aqpa377mda,
                                                            pn_pap    => p.aqpa377pap,
                                                            pn_cta    => p.aqpa377cta,
                                                            pn_ope    => p.aqpa377ope,
                                                            pn_sbo    => p.aqpa377sbop,
                                                            pn_top    => p.aqpa377tope,
                                                            pn_ord    => 83,
                                                            pn_fcorte => pn_ffin,
                                                            pn_impl   => lc_mpag,
                                                            pn_fech   => lc_fpag);
            exception
              when others then
                lc_mpag := 0;
                lc_fpag := null;
              
            end;
          
            -- 50. Principal Amortizado (capital amortizado)
            begin
              pq_cr_reporte_fondos_p3.sp_obtener_pagoi_crec(pn_cod    => p.aqpa377pgcod,
                                                            pn_mod    => p.aqpa377mod,
                                                            pn_suc    => p.aqpa377suc,
                                                            pn_mda    => p.aqpa377mda,
                                                            pn_pap    => p.aqpa377pap,
                                                            pn_cta    => p.aqpa377cta,
                                                            pn_ope    => p.aqpa377ope,
                                                            pn_sbo    => p.aqpa377sbop,
                                                            pn_top    => p.aqpa377tope,
                                                            pn_ord    => 10,
                                                            pn_fcorte => pn_ffin,
                                                            pn_impl   => lc_mpri,
                                                            pn_fech   => lc_fpri1);
            exception
              when others then
                lc_mpri  := 0;
                lc_fpri1 := null;
            end;
          
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
          
            --- Nivel de ventas
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_nventas(pn_cod      => p.aqpa377pgcod,
                                                         pn_mod      => p.aqpa377mod,
                                                         pn_suc      => p.aqpa377suc,
                                                         pn_mda      => p.aqpa377mda,
                                                         pn_pap      => p.aqpa377pap,
                                                         pn_cta      => p.aqpa377cta,
                                                         pn_ope      => p.aqpa377ope,
                                                         pn_sbo      => p.aqpa377sbop,
                                                         pn_top      => p.aqpa377tope,
                                                         pn_fecha    => pn_ffin,
                                                         pn_ventas   => lc_nventas,
                                                         pn_inst_eva => lc_eval,
                                                         pn_inst_sol => lc_inst);
            exception
              when others then
                lc_nventas := 0;
                lc_eval    := 0;
                lc_inst    := 0;
            end;
          
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   
            -- Datos del crédito original
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_iniciales(pn_cod     => p.aqpa377pgcod,
                                                           pn_mod     => p.aqpa377mod,
                                                           pn_suc     => p.aqpa377suc,
                                                           pn_mda     => p.aqpa377mda,
                                                           pn_pap     => p.aqpa377pap,
                                                           pn_cta     => p.aqpa377cta,
                                                           pn_ope     => p.aqpa377ope,
                                                           pn_sbo     => p.aqpa377sbop,
                                                           pn_top     => p.aqpa377tope,
                                                           pn_fde_ini => lc_fecha_ini,
                                                           pn_mon_ini => lc_monto_ini,
                                                           pn_cuo_ini => lc_cuo_ini);
            exception
              when others then
                lc_fecha_ini := p.aofval;
                lc_monto_ini := p.aoimp;
                lc_cuo_ini   := 0;
            end;
          
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                 
          
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_fecha_ncuo_pagtotal(pn_cod      => p.aqpa377pgcod,
                                                             pn_mod      => p.aqpa377mod,
                                                             pn_suc      => p.aqpa377suc,
                                                             pn_mda      => p.aqpa377mda,
                                                             pn_pap      => p.aqpa377pap,
                                                             pn_cta      => p.aqpa377cta,
                                                             pn_ope      => p.aqpa377ope,
                                                             pn_sbo      => p.aqpa377sbop,
                                                             pn_top      => p.aqpa377tope,
                                                             pn_fecha    => pn_ffin,
                                                             pn_ncuo_pag => lc_ncuo_pag);
            exception
              when others then
                lc_ncuo_pag := 0;
            end;
          
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           
            -- 53. SALDO CAPITAL CANCELADO  
            begin
              /*
               lc_scapc := pq_cr_reporte_fondos_p3.fn_obtener_sdocap(p.aqpa377pgcod,
                                                                  p.aqpa377mod,
                                                                  p.aqpa377suc,
                                                                  p.aqpa377mda,
                                                                  p.aqpa377pap,
                                                                  p.aqpa377cta,
                                                                  p.aqpa377ope,
                                                                  p.aqpa377sbop,
                                                                  p.aqpa377tope,
                                                                 pn_ffin);
              */
            
              lc_scapc := lc_monto_ini - lc_cuo;
            
              --if lc_scapc < 0 then
              --  lc_scapc := 0;
              --end if;
            
            exception
              when others then
                lc_scapc := 0;
            end;
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     
            -- 54. SALDO CAPITAL CANCELADO            
            begin
              -- Call the procedure
              pq_cr_reporte_fondos_p3.sp_obtener_datraso_uimp(pn_cod   => p.aqpa377pgcod,
                                                              pn_mod   => p.aqpa377mod,
                                                              pn_suc   => p.aqpa377suc,
                                                              pn_mda   => p.aqpa377mda,
                                                              pn_pap   => p.aqpa377pap,
                                                              pn_cta   => p.aqpa377cta,
                                                              pn_ope   => p.aqpa377ope,
                                                              pn_sbo   => p.aqpa377sbop,
                                                              pn_top   => p.aqpa377tope,
                                                              pn_fecha => pn_ffin,
                                                              pn_diat  => lc_diatimp);
            exception
              when others then
                lc_diatimp := 0;
            end;
          
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
            -- 55. Saldo Insoluto Real
            begin
              --- jrodriguej 03.03.2021                                           
            
              pq_cr_reporte_fondos.sp_obtener_sald_insol2_h(pn_cod   => p.aqpa377pgcod,
                                                             pn_mod   => p.aqpa377mod,
                                                             pn_suc   => p.aqpa377suc,
                                                             pn_mda   => p.aqpa377mda,
                                                             pn_pap   => p.aqpa377pap,
                                                             pn_cta   => p.aqpa377cta,
                                                             pn_ope   => p.aqpa377ope,
                                                             pn_sbo   => p.aqpa377sbop,
                                                             pn_top   => p.aqpa377tope,
                                                             pn_fecha => pn_ffin,
                                                             pn_indi  => 3, -- CRECER
                                                             pn_stat  => p.estado,
                                                             pn_sald  => lc_sdoins);
            
            exception
              when others then
                lc_sdoins := 0;
            end;
            ---------------------------------------------
          -- 35. Monto de cobertura
            begin
              lc_mcob := lc_sdoins * lb_pcob / 100;
            exception
              when others then
                lc_mcob := 0;
            end;
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => p.aqpa377pgcod,
                                                             pn_mod   => p.aqpa377mod,
                                                             pn_suc   => p.aqpa377suc,
                                                             pn_mda   => p.aqpa377mda,
                                                             pn_pap   => p.aqpa377pap,
                                                             pn_cta   => p.aqpa377cta,
                                                             pn_ope   => p.aqpa377ope,
                                                             pn_sbo   => p.aqpa377sbop,
                                                             pn_top   => p.aqpa377tope,
                                                             pn_rubr   => 9300082030000,
                                                           pd_fecha => pn_ffin,
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr  => ln_mhonr,
                                                           pd_fhonr  => ld_fhonr,
                                                           pn_sdohon   => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon := 0;
          end; 
          --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => p.aqpa377pgcod,
                                                             pn_mod   => p.aqpa377mod,
                                                             pn_suc   => p.aqpa377suc,
                                                             pn_mda   => p.aqpa377mda,
                                                             pn_pap   => p.aqpa377pap,
                                                             pn_cta   => p.aqpa377cta,
                                                             pn_ope   => p.aqpa377ope,
                                                             pn_sbo   => p.aqpa377sbop,
                                                             pn_top   => p.aqpa377tope,                                                          
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
          ----------------------------------------------------------
          -- 10. Distribución clasificación de riesgo enviado por caja
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_calf_caja(pn_cod   => p.aqpa377pgcod,
                                                             pn_mod   => p.aqpa377mod,
                                                             pn_suc   => p.aqpa377suc,
                                                             pn_mda   => p.aqpa377mda,
                                                             pn_pap   => p.aqpa377pap,
                                                             pn_cta   => p.aqpa377cta,
                                                             pn_ope   => p.aqpa377ope,
                                                             pn_sbo   => p.aqpa377sbop,
                                                             pn_top   => p.aqpa377tope,
                                                         pn_est   => p.aostat,
                                                         pn_fecha => pn_ffin,
                                                         --pn_dcla => lc_dcla,
                                                         --pn_ncla => lc_ncla
                                                         pn_calif0a => lc_calif0a,
                                                         pn_calif1a => lc_calif1a,
                                                         pn_calif2a => lc_calif2a,
                                                         pn_calif3a => lc_calif3a,
                                                         pn_calif4a => lc_calif4a,
                                                         pn_deccaj  => lc_fecha_caj);
          exception
            when others then
              lc_calif0a   := 100;
              lc_calif1a   := 0;
              lc_calif2a   := 0;
              lc_calif3a   := 0;
              lc_calif4a   := 0;
              lc_fecha_caj := null;
          end;
          -- 21. Razón social
        
          begin
            lc_perjur := pq_cr_reporte_fondos_p3.fn_obtener_perjur(p.aqpa377pais,
                                                                   p.aqpa377tdoc,
                                                                   p.aqpa377ndoc);
          exception
            when others then
              lc_perjur := '';
          end;
          -- 22. Apellidos y nombres del cliente 
          begin
            lc_pernat := pq_cr_reporte_fondos_p3.fn_obtener_pernat(p.aqpa377pais,
                                                                   p.aqpa377tdoc,
                                                                   p.aqpa377ndoc);
          exception
            when others then
              lc_pernat := '';
          end;
          -------------------------------------------------------------------
          -- Tasa de interes moratoria
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => p.aqpa377pgcod,
                                                             pn_mod   => p.aqpa377mod,
                                                             pn_suc   => p.aqpa377suc,
                                                             pn_mda   => p.aqpa377mda,
                                                             pn_pap   => p.aqpa377pap,
                                                             pn_cta   => p.aqpa377cta,
                                                             pn_ope   => p.aqpa377ope,
                                                             pn_sbo   => p.aqpa377sbop,
                                                             pn_top   => p.aqpa377tope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tmor);
          exception
            when others then
              lc_tmor := 0;
          end;
          ---------------------------------------------------------------------------
          begin
              lc_cuo_n := pq_cr_reporte_fondos_p3.fn_fecha_ncuoa(pn_cod => p.aqpa377pgcod,
                                                                 pn_mod => p.aqpa377mod,
                                                                 pn_suc => p.aqpa377suc,
                                                                 pn_mda => p.aqpa377mda,
                                                                 pn_pap => p.aqpa377pap,
                                                                 pn_cta => p.aqpa377cta,
                                                                 pn_ope => p.aqpa377ope,
                                                                 pn_sbo => p.aqpa377sbop,
                                                                 pn_top => p.aqpa377tope);
            exception
              when others then
                lc_cuo_n := 0;
            end;
          -----------------------------------------------------------------
          begin
              lc_cuo_o := pq_cr_reporte_fondos_p3.fn_fecha_ncuoir(pn_cod => p.aqpa377pgcod,
                                                                 pn_mod => p.aqpa377mod,
                                                                 pn_suc => p.aqpa377suc,
                                                                 pn_mda => p.aqpa377mda,
                                                                 pn_pap => p.aqpa377pap,
                                                                 pn_cta => p.aqpa377cta,
                                                                 pn_ope => p.aqpa377ope,
                                                                 pn_sbo => p.aqpa377sbop,
                                                                 pn_top => p.aqpa377tope,
                                                                 pc_rep => lc_lrep,
                                                                 pd_fre => lc_frep);
            exception
              when others then
                lc_cuo_o := 0;
            end;
            -----------------------------------------------------
            begin
              ld_ffinco := pq_cr_reporte_fondos_p3.fn_fecha_cre_original_r(pn_cod => p.aqpa377pgcod,
                                                                 pn_mod => p.aqpa377mod,
                                                                 pn_suc => p.aqpa377suc,
                                                                 pn_mda => p.aqpa377mda,
                                                                 pn_pap => p.aqpa377pap,
                                                                 pn_cta => p.aqpa377cta,
                                                                 pn_ope => p.aqpa377ope,
                                                                 pn_sbo => p.aqpa377sbop,
                                                                 pn_top => p.aqpa377tope,
                                                                 pc_rep => lc_lrep,
                                                                 pd_fre => pn_ffin);
            exception
              when others then
                ld_ffinco := null;
            end;
            -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
            begin
              insert into aqpb073
                (aqpb073usur,
                 --aqpb073corr,
                 --aqpb073fec,
                 --aqpb073hora,
                 aqpb073pais,
                 aqpb073tdoc, -- 1. Tipo Documento (RUC) 
                 aqpb073ndoc, -- 2. Número Documento (N° de Ruc)
                 --aqpb073ipgcod,
                 --aqpb073itsuc, -- 21. Agencia, sucursal 
                 --aqpb073itmod,
                 --aqpb073ittran,
                 --aqpb073itnrel,
                 --aqpb073itord,
                 --aqpb073itsbor,
                 
                 aqpb073pgcod,
                 aqpb073mod,
                 aqpb073suc,
                 aqpb073mda,
                 aqpb073pap,
                 aqpb073cta, -- 23. Nro. cuenta
                 aqpb073ope, -- 24. Nro. operación
                 aqpb073sbop,
                 aqpb073tope,
                 
                 aqpb073esf, -- 3. ESF (Caja Arequipa)
                 aqpb073ccob, -- 4. Código Cobertura (COFIDE)
                 aqpb073fval, -- 5. Fecha Desembolso
                 aqpb073sdoi, -- 6. Saldo Insoluto
                 
                 aqpb073mdad, -- 7. Moneda (PEN o USD)
                 aqpb073fcla, -- 8. Fecha de clasificación SBS
                 aqpb073cnom, -- 9. Calificación Normal (en números de 100 a 0)
                 aqpb073ccpp, -- 10. Calificación CPP (en números de 100 a 0)  
                 aqpb073cdef, -- 11. Calificación Deficiente (en números de 100 a 0)
                 aqpb073cdud, -- 12. Calificación Dudoso (en números de 100 a 0)
                 aqpb073cper, -- 13. Calificación Perdida (en números de 100 a 0)
                 aqpb073dcon, -- 14. Situación Contable (estado del crédito: vigente (VGT), vencido (VCD), Refinanciado (RFN), Judicial (JDC))            
                 aqpb073ncon, -- 14.1. Situación Contable - Concepto
                 aqpb073tasa, -- 15. Tasa de Interés
                 
                 aqpb073ntra, -- 16. Número Trabajadores 
                 aqpb073nven, -- 17. Nivel Ventas 
                 aqpb073expr, -- 18. Exportaciones
                 aqpb073reg, -- 19. Región
                 aqpb073nreg, -- 19.1 Región - Nombre
                 aqpb073zon, -- 20. Zona 
                 aqpb073nzon, -- 20.1 Zona - Nombre
                 aqpb073nsuc, -- 21.1 Agencia(Sucursal) - Nombre                        
                 aqpb073ase, -- 22. Analista
                 --aqpb073cta, -- 23. Nro. cuenta
                 --aqpb073oper, -- 24. Nro. operación
                 --aqpb073tcre, -- 25. Tipo SBS
                 
                 aqpb073tcre, -- 25. Tipo crédito SBS
                 aqpb073ncre, -- 25.1 Tipo crédito SBS - Concepto
                 aqpb073ciuu, -- 26. CIUU
                 aqpb073actn, -- 27. Actividad
                 aqpb073dmon, -- 28. Monto desembolsado
                 aqpb073ncuo, -- 29. Número de cuotas 
                 aqpb073pcuo, -- 30. Número de cuotas pendientes de pago
                 aqpb073diat, -- 31. Días de atraso
                 aqpb073vcuo, -- 32. Vencimiento de cuota atrasada
                 aqpb073tasm, -- 33. Tasa de interés moratoria
                 aqpb073pcob, -- 34. % cobertura
                 aqpb073mcob, -- 35. Monto de cobertura
                 aqpb073fini, -- 36. Fecha inicio crédito
                 aqpb073ffin, -- 37. Fecha fin crédito
                 aqpb073lrep, -- 38. Flag de reprogramación
                 aqpb073nrep, -- 39. Número de reprogramaciones
                 aqpb073frep, -- 40. Fecha de reprogramación
                 aqpb073lamr, -- 41. Flag de amortización
                 aqpb073famr, -- 42. Fecha de la amortización 
                 aqpb073prel, -- 43. Pago realizado (el pago total)
                 aqpb073camr, -- 44. Principal Amortizado (capital amortizado)
                 aqpb073estd, -- 45. Estado del crédito (vigente/cancelado)
                 aqpb073fcan, -- 46. Fecha de cancelación
                 aqpb073fcae, -- 47. Fecha de cambio de estado contable
                 aqpb073dest, -- 48. Destino del crédito              -- 49. Tipo de Crédito SBS
                 
                 aqpb073fvenuc, -- 31. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA IMPAGA  
                 aqpb073fvenup, -- 32. FECHA DE VENCIMIENTO DE ÚLTIMA CUOTA PAGADA 
                 aqpb073fpag, -- 33. FECHA DE PAGO DE ÚLTIMA CUOTA PAGADA  
                 aqpb073ncuop, -- 34. NÚMERO DE CUOTAS PAGADAS  
                 aqpb073mcuop, -- 35. MONTO DE CUOTAS PAGADAS 
                 
                 aqpb073gas, -- 36.a Seguros
                 aqpb073mor, -- 36.b Interés Moratorio
                 aqpb073int, -- 36.c Intereses
                 aqpb073cuo, -- 36.d Capital
                 aqpb073icv, -- 36.e Interés compensatorio
                 aqpb073pen, -- 36.f Penalidad    
                 
                 aqpb073scap, -- 53. SALDO CAPITAL CANCELADO       
                 
                 aqpb073inst,
                 aqpb073eval,
                 
                 aqpb073stat,
                 aqpb073fe99,
                 
                 aqpb073ciiuori,
                 aqpb073actnomori,
                 
                 aqpb073paisb,
                 aqpb073tdocb,
                 aqpb073ndocb,
                 aqpb073diaimp,
                 
                 aqpb073sdoins, --- 54. Saldo Insoluto Real
                 aqpb073fcr,
                 aqpb073hcr,
                 aqpb073fproc,
                 aqpb073mhonr,
                 aqpb073fhonr,
                 aqpb073chonr,
                 aqpb073sdocap,
                 aqpb073sdohon,
                 aqpb073crehon,
                 aqpb073fclaa,
                 aqpb073cnoma,
                 aqpb073ccppa,
                 aqpb073cdefa,
                 aqpb073cduda,
                 aqpb073cpera,
                 aqpb073rnom,
                 aqpb073codcob,
                 aqpb073fcest,
                 aqpb073cuov,
                 aqpb073ncer,
                 aqpb073chon,
                 aqpb073ccob2,
                 aqpb073nrccor,
                 aqpb073nrccac,
                 aqpb073ffinco,
                 aqpb073conhon)
              values
                (pn_usuario,
                 
                 --p.aqpa377corr,
                 --p.aqpa377fec,
                 --p.aqpa377hora,
                 p.aqpa377pais,
                 le_tdoc, --p.aqpa377tdoc, -- 1. Tipo Documento (RUC) 
                 trim(lb_ndoc), --p.aqpa377ndoc, -- 2. Número Documento (N° de Ruc)
                 --p.aqpa377ipgcod,
                 --p.aqpa377itsuc, -- 21. Agencia, sucursal 
                 --p.aqpa377itmod,
                 --p.aqpa377ittran,
                 --p.aqpa377itnrel,
                 --p.aqpa377itord,
                 --p.aqpa377itsbor,
                 
                 p.aqpa377pgcod,
                 p.aqpa377mod,
                 p.aqpa377suc,
                 p.aqpa377mda,
                 p.aqpa377pap,
                 p.aqpa377cta, -- 23. Nro. cuenta
                 p.aqpa377ope, -- 24. Nro. operación
                 p.aqpa377sbop,
                 p.aqpa377tope,
                 
                 lc_esf, -- 3. ESF (Caja Arequipa)
                 lb_ccob, -- 4. Código Cobertura (COFIDE)
                 lc_fecha_ini, --p.aofval, -- 5. Fecha Desembolso
                 lc_sdoi, -- 6. Saldo Insoluto
                 
                 lc_mda, -- 7. Moneda (PEN o USD)
                 lc_fecha_rcc, -- 8. Fecha de clasificación SBS
                 lc_calif0, -- 9. Calificación Normal 
                 lc_calif1, -- 10. Calificación CPP 
                 lc_calif2, -- 11. Calificación Deficiente
                 lc_calif3, -- 12. Calificación Dudoso 
                 lc_calif4, -- 13. Calificación Perdida 
                 substr(trim(lc_dcon), 1, 4), --p.dcon, -- 14. Situación Contable (estado del crédito: vigente (VGT), vencido (VCD), Refinanciado (RFN), Judicial (JDC))
                 substr(trim(lc_scon), 1, 20), -- 14.1 Situación Contable
                 p.aotasa, -- 15. Tasa de Interés
                 
                 lb_tnro, -- 16. Número Trabajadores 
                 lb_nven, -- lc_nventas, -- 17. Nivel Ventas 
                 0, -- 18. Exportaciones
                 lc_regi, -- 19. Región
                 substr(trim(lc_nreg), 1, 30), -- 19.1 Región - Nombre
                 lc_zona, -- 20. Zona 
                 substr(trim(lc_nzon), 1, 40), -- 20.1 Zona - Nombre
                 substr(trim(lc_nsuc), 1, 30), -- 21.1 Agencia(Sucursal) - Nombre                        
                 substr(trim(lc_ases), 1, 10), -- 22. Analista
                 --p.aqpa377cta, -- 23. Nro. cuenta
                 --p.aqpa377ope, -- 24. Nro. operación
                 
                 lc_pcre, -- 25. Tipo SBS
                 substr(trim(lc_ncre), 1, 20), -- 25.1 Tipo crédito SBS - Concepto
                 lc_ciiu4, -- 26. CIUU
                 substr(trim(lc_acti), 1, 60), -- 27. Actividad
                 lc_monto_ini, --p.aoimp, -- 28. Monto desembolsado
                 lc_cuo_ini, --lc_cuo_n, -- 29. Número de cuotas 
                 lc_ncuop, -- 30. Número de cuotas pendientes de pago
                 lc_diat, -- 31. Días de atraso
                 lc_fvton, -- 32. Vencimiento de cuota atrasada
                 lc_tmor, -- 33. Tasa de interés moratoria
                 lb_pcob, -- 34. % cobertura
                 lc_mcob, -- 35. Monto de cobertura
                 lc_fecha_ini, --p.aofval, -- 36. Fecha inicio crédito
                 p.aofvto, -- 37. Fecha fin crédito
                 lc_lrep, -- 38. Flag de reprogramación
                 lc_nrep, -- 39. Número de reprogramaciones
                 lc_frep, -- 40. Fecha de reprogramación
                 lc_lamr, -- 41. Flag de amortización
                 lc_fecha_amot, -- 42. Fecha de la amortización 
                 lc_mpag, -- 43. Pago realizado (el pago total)
                 lc_mpri, -- 44. Principal Amortizado (capital amortizado)
                 
                 lc_statd, -- 45. Estado del crédito (vigente/cancelado)
                 lc_feccan, --p.aofe99, -- 46. Fecha de cancelación
                 
                 null, -- 47. Fecha de cambio de estado contable
                 substr(trim(lc_tdest), 1, 5), -- 48. Destino del crédito              -- 49. Tipo de Crédito SBS
                 
                 lc_fvenuc, -- 31. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA IMPAGA  
                 lc_fvenup, -- 32. FECHA DE VENCIMIENTO DE ÚLTIMA CUOTA PAGADA 
                 lc_ufpag1, -- 33. FECHA DE PAGO DE ÚLTIMA CUOTA PAGADA  
                 lc_ncuo_pag, --lc_ncuopg, -- 34. NÚMERO DE CUOTAS PAGADAS 
                 lc_tsum, -- 35. MONTO DE CUOTAS PAGADAS  
                 
                 lc_gas, -- 36.a Seguros
                 lc_mor, -- 36.b Interés Moratorio
                 lc_int, -- 36.c Intereses
                 lc_cuo, -- 36.d Capital
                 lc_icv, -- 36.e Interés compensatorio
                 lc_pen, -- 36.f Penalidad        
                 
                 lc_scapc, -- 53. SALDO CAPITAL CANCELADO            
                 lc_inst,
                 lc_eval,
                 
                 p.aostat,
                 p.aofe99,
                 
                 lb_ciuu1,
                 lb_dciu1,
                 
                 p.pepaisb,
                 p.petdocb,
                 p.pendocb,
                 lc_diatimp, -- Días de atraso de próxima cuota impaga
                 
                 lc_sdoins, --- 54. Saldo Insoluto Real
                 to_char(sysdate, 'DD/MM/YYYY'),
                 to_char(sysdate, 'HH24:MI:SS'),
                 pn_ffin,
                 ln_mhonr,
                 ld_fhonr,
                 lc_eshonr,
                 lc_sdoi,
                 nvl(ln_sdohon,0),
                 lc_sdoi+nvl(ln_sdohon,0),
                 lc_fecha_caj,
                 lc_calif0a,
                 lc_calif1a,
                 lc_calif2a,
                 lc_calif3a,
                 lc_calif4a,
                 case when p.petdocb = 21 then lc_pernat else lc_perjur end,--rnom,
                 lc_ccob2, --codigo cobertura
                 case when ld_fcest > nvl(p.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 (case when ld_fcest > nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) then ld_fcest else lc_frep end )
                 else (case when nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) > nvl(p.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then lc_frep else p.aofe99 end )end, --fecha de cambio de estado, -- 44. Fecha del cambio de estado del crédito.
                 lc_ncuoimp, --numero de cuotas vencidas
                 lc_ncer,
                 lc_chon,
                 lc_ccob2,
                 lc_cuo_o,
                 lc_cuo_n,
                 ld_ffinco,
                 lc_conhon
                 );
              commit;
            
            exception
              when others then
              
                lc_coderr := substr(trim(sqlcode), 1, 100);
                lc_msgerr := substr(trim(sqlerrm), 1, 1000);
              
                begin
                  insert into AQPB070E
                    (aqpb070etab,
                     aqpb070efec,
                     aqpb070esuc,
                     aqpb070eusr,
                     aqpb070ecoe,
                     aqpb070emsge,
                     aqpb070efcr,
                     aqpb070ehcr,
                     aqpb070ecta,
                     aqpb070eope)
                  values
                    ('AQPB073',
                     pn_ffin,
                     pc_sucurs,
                     substr(trim(pn_usuario), 1, 10),
                     lc_coderr,
                     lc_msgerr,
                     to_char(sysdate, 'DD/MM/YYYY'),
                     to_char(sysdate, 'HH24:MI:SS'),
                     ln_cta,
                     ln_ope);
                  commit;
                exception
                  when others then
                    null;
                end;
              
            end;
          end loop;
        
        end loop;
      
      end;
    
    end if;
  
    --- Créditos de módulo 200 
    for p in reporte_fcre_r3_200() loop
    
      ln_cta := p.aqpa377cta;
      ln_ope := p.aqpa377ope;
    
      -- 4. Código cobertura COFIDE
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos.sp_plantilla_fcrecer_v2(pn_cod   => p.aqpa377pgcod,
                                                       pn_mod   => p.aqpa377mod,
                                                       pn_suc   => p.aqpa377suc,
                                                       pn_mda   => p.aqpa377mda,
                                                       pn_pap   => p.aqpa377pap,
                                                       pn_cta   => p.aqpa377cta,
                                                       pn_ope   => p.aqpa377ope,
                                                       pn_sbo   => p.aqpa377sbop,
                                                       pn_top   => p.aqpa377tope,
                                                       pn_fecha => pn_ffin,
                                                       
                                                       pn_tdoc => lb_tdoc,
                                                       pn_ndoc => lb_ndoc,
                                                       pn_esf  => lb_esf,
                                                       pn_ccob => lb_ccob,
                                                       pn_tnro => lb_tnro,
                                                       pn_mtoe => lb_mtoe,
                                                       pn_pcob => lb_pcob,
                                                       pn_ciuu => lb_ciuu1,
                                                       pn_dciu => lb_dciu1,
                                                       pn_nven => lb_nven,
                                                       pn_ncer => lc_ncer,
                                                       pn_chon => lc_chon,
                                                       pn_ccob2 => lc_ccob2,
                                                       pn_conhon => lc_conhon);
      
      exception
        when others then
        
          lb_tdoc  := null;
          lb_ndoc  := null;
          lb_esf   := null;
          lb_ccob  := null;
          lb_tnro  := null;
          lb_mtoe  := null;
          lb_pcob  := null;
          lb_ciuu1 := null;
          lb_dciu1 := null;
          lb_nven  := null;
          lc_ncer  := null;
          lc_chon  := null;
          lc_ccob2 := null;
          lc_conhon:= null;
      end;
    
      if lb_tdoc = 'RUC' then
        le_tdoc := 6;
      else
        le_tdoc := 21;
      end if;
    
      -- 7. Moneda (PEN o USD)
      begin
        if p.aqpa377mda = 0 then
          lc_mda := 'PEN';
        else
          lc_mda := 'USD';
        end if;
      end;
    
      -- 6. Saldo Insoluto
      begin
        lc_sdoi := pq_cr_reporte_fondos_p200.fn_obtener_saldo_actual(p.aqpa377pgcod,
                                                                     p.aqpa377mod,
                                                                     p.aqpa377suc,
                                                                     p.aqpa377mda,
                                                                     p.aqpa377pap,
                                                                     p.aqpa377cta,
                                                                     p.aqpa377ope,
                                                                     p.aqpa377sbop,
                                                                     p.aqpa377tope,
                                                                     pn_ffin,
                                                                     pn_usuario);
      exception
        when others then
          lc_sdoi := 0;
      end;
      -- 10. Calificación Normal (en números de 100 a 0)
      -- 11. Calificación CPP (en números de 100 a 0)  
      -- 12. Calificación Deficiente (en números de 100 a 0)
      -- 13. Calificación Dudoso (en números de 100 a 0)
      -- 14. Calificación Perdida (en números de 100 a 0)
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_obtener_calf(pn_tdoc   => p.aqpa377tdoc,
                                                pn_ndoc   => p.aqpa377ndoc,
                                                pn_fech   => pn_ffin,
                                                pn_calif0 => lc_calif0,
                                                pn_calif1 => lc_calif1,
                                                pn_calif2 => lc_calif2,
                                                pn_calif3 => lc_calif3,
                                                pn_calif4 => lc_calif4,
                                                pn_csbs   => lc_csbs);
      exception
        when others then
          lc_calif0 := 100;
          lc_calif1 := 0;
          lc_calif2 := 0;
          lc_calif3 := 0;
          lc_calif4 := 0;
          lc_csbs   := 0;
      end;
    
      -- Acondicionamiento de CRR
      -- lc_calif0 := round(lc_calif0 / 100, 2);
      -- lc_calif1 := round(lc_calif1 / 100, 2);
      -- lc_calif2 := round(lc_calif2 / 100, 2);
      -- lc_calif3 := round(lc_calif3 / 100, 2);
      -- lc_calif4 := round(lc_calif4 / 100, 2);
    
      -- 19. Región
      -- 19.1 Región - Nombre
      -- 20. Zona
      -- 20.1 Zona - Nombre
      -- 21. Agencia (Sucursal)
      -- 21.1 Agencia(Sucursal) - Nombre
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_obtener_sucs(pn_sucs => p.aqpa377suc,
                                                pn_regi => lc_regi,
                                                pn_zona => lc_zona,
                                                pn_nsuc => lc_nsuc,
                                                pn_nzon => lc_nzon,
                                                pn_nreg => lc_nreg);
      exception
        when others then
          lc_regi := 0;
          lc_zona := 0;
          lc_nsuc := '';
          lc_nzon := '';
          lc_nreg := '';
        
      end;
    
      -- 22. Analista
      begin
        lc_ases := fn_analista_credito(p.aqpa377mod,
                                       p.aqpa377suc,
                                       p.aqpa377mda,
                                       p.aqpa377pap,
                                       p.aqpa377cta,
                                       p.aqpa377ope,
                                       p.aqpa377sbop,
                                       p.aqpa377tope);
      exception
        when others then
          lc_ases := '';
      end;
    
      -- 22. Tipo de Crédito SBS
    
      begin
        -- Call the procedure                                                         
        pq_cr_reporte_fondos_p200.sp_tipo_credito_sbs_vig(pn_cod     => p.aqpa377pgcod,
                                                          pn_mod     => p.aqpa377mod,
                                                          pn_suc     => p.aqpa377suc,
                                                          pn_mda     => p.aqpa377mda,
                                                          pn_pap     => p.aqpa377pap,
                                                          pn_cta     => p.aqpa377cta,
                                                          pn_ope     => p.aqpa377ope,
                                                          pn_sbo     => p.aqpa377sbop,
                                                          pn_top     => p.aqpa377tope,
                                                          pn_fecha   => pn_ffin,
                                                          pn_usuario => pn_usuario,
                                                          pn_ntipo   => lc_pcre,
                                                          pn_nconc   => lc_ncre);
      exception
        when others then
          lc_pcre := 0;
          lc_ncre := '';
      end;
    
      -- 45. CIUU
      -- 46. Actividad económica
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_ciiu_codigo4(p_pais   => p.aqpa377pais,
                                                p_petdoc => p.aqpa377tdoc,
                                                p_pendoc => p.aqpa377ndoc,
                                                p_ciuu4  => lc_ciiu4,
                                                p_ciuu6  => lc_ciiu6);
      exception
        when others then
          lc_ciiu4 := 0;
          lc_ciiu6 := 0;
      end;
    
      -- 10.2 Descripción de CIUU 
      begin
        -- Call the procedure
        if lc_ciiu4 <> 0 then
          pq_cr_reporte_fondos_p3.sp_obtener_ciuu(pn_cciu => lc_ciiu6,
                                                  pn_dciu => lc_acti);
        else
          if lc_ciiu6 <> 0 then
            lc_ciiu4 := to_number(substr(to_char(lc_ciiu6), 1, 4));
          else
            lc_ciiu4 := 0;
          end if;
          lc_acti := '';
        end if;
      
      exception
        when others then
          lc_acti := '';
      end;
    
      begin
        -- 29. Número de cuotas 
        lc_cuo_n := pq_cr_reporte_fondos_p200.fn_fecha_ncuoa(pn_cod => p.aqpa377pgcod,
                                                             pn_mod => p.aqpa377mod,
                                                             pn_suc => p.aqpa377suc,
                                                             pn_mda => p.aqpa377mda,
                                                             pn_pap => p.aqpa377pap,
                                                             pn_cta => p.aqpa377cta,
                                                             pn_ope => p.aqpa377ope,
                                                             pn_sbo => p.aqpa377sbop,
                                                             pn_top => p.aqpa377tope);
      exception
        when others then
          lc_cuo_n := 0;
      end;
      
    
      -- 31. Días de atraso 
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_atraso_u(pn_cod   => p.aqpa377pgcod,
                                                      pn_mod   => p.aqpa377mod,
                                                      pn_suc   => p.aqpa377suc,
                                                      pn_mda   => p.aqpa377mda,
                                                      pn_pap   => p.aqpa377pap,
                                                      pn_cta   => p.aqpa377cta,
                                                      pn_ope   => p.aqpa377ope,
                                                      pn_sbo   => p.aqpa377sbop,
                                                      pn_top   => p.aqpa377tope,
                                                      pn_fecha => pn_ffin,
                                                      pn_diat  => lc_diat);
      exception
        when others then
          lc_diat := 0;
      end;
    
      
    
      -- 45. Estado del crédito (vigente/cancelado) -- jrodriguej 30.07.2021
    
      begin
        lc_statd := pq_cr_reporte_fondos_p3.fn_estado_desc(p.aostat);
      exception
        when others then
          lc_statd := '';
      end;
    
      -- 46. Fecha de cancelación -- jrodriguej 30.07.2021
      lc_feccan := null;
      if p.aostat = 99 then
        lc_feccan := p.aofe99;
      end if;
    
      -- 48. Destino del crédito
      begin
        lc_tdest := pq_cr_reporte_fondos_p3.fn_obtener_tdesti(p.aqpa377mod);
      exception
        when others then
          lc_tdest := '';
      end;
      -- 32. Vencimiento de cuota atrasada
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_vpcuov(pn_cod   => p.aqpa377pgcod,
                                                    pn_mod   => p.aqpa377mod,
                                                    pn_suc   => p.aqpa377suc,
                                                    pn_mda   => p.aqpa377mda,
                                                    pn_pap   => p.aqpa377pap,
                                                    pn_cta   => p.aqpa377cta,
                                                    pn_ope   => p.aqpa377ope,
                                                    pn_sbo   => p.aqpa377sbop,
                                                    pn_top   => p.aqpa377tope,
                                                    pn_fecha => pn_ffin,
                                                    
                                                    pn_fpag => lc_fpagg,
                                                    pn_fvto => lc_fvton,
                                                    pn_sumt => lc_pcuo);
      exception
        when others then
          lc_fpagg := null;
          lc_fvton := null;
          lc_pcuo  := 0;
      end;
    
      -- Reprogramaciones    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p3.sp_repro_dato_jaqa400(pn_cod   => p.aqpa377pgcod,
                                                 pn_cta   => p.aqpa377cta,
                                                 pn_ope   => p.aqpa377ope,
                                                 pn_fecha => pn_ffin,
                                                 
                                                 pn_flag  => lc_lrep,
                                                 pn_nrep  => lc_nrep,
                                                 pn_fech  => lc_frep,
                                                 pn_tabla => lc_tabla,
                                                 pn_peri  => lc_peri2,
                                                 pn_ncuo  => lc_ncuo2,
                                                 pn_fpri  => lc_fpri,
                                                 pn_fult  => lc_fult);
      exception
        when others then
        
          lc_lrep  := 'NO';
          lc_nrep  := 0;
          lc_frep  := null;
          lc_tabla := '';
          lc_peri2 := 0;
          lc_ncuo2 := 0;
          lc_fpri  := null;
          lc_fult  := null;
      end;
     -------------------------------------------------------------------------------------
      begin
              lc_cuo_o := pq_cr_reporte_fondos_p3.fn_fecha_ncuoir(pn_cod => p.aqpa377pgcod,
                                                                 pn_mod => p.aqpa377mod,
                                                                 pn_suc => p.aqpa377suc,
                                                                 pn_mda => p.aqpa377mda,
                                                                 pn_pap => p.aqpa377pap,
                                                                 pn_cta => p.aqpa377cta,
                                                                 pn_ope => p.aqpa377ope,
                                                                 pn_sbo => p.aqpa377sbop,
                                                                 pn_top => p.aqpa377tope,
                                                                 pc_rep => lc_lrep,
                                                                 pd_fre => lc_frep);
            exception
              when others then
                lc_cuo_o := 0;
            end;
      -- Fecha de vencimiento dela próxima cuota impaga
      -- Fecha de vencimiento de la próxima cuota impaga
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_impaga(pn_cod    => p.aqpa377pgcod,
                                                    pn_mod    => p.aqpa377mod,
                                                    pn_suc    => p.aqpa377suc,
                                                    pn_mda    => p.aqpa377mda,
                                                    pn_pap    => p.aqpa377pap,
                                                    pn_cta    => p.aqpa377cta,
                                                    pn_ope    => p.aqpa377ope,
                                                    pn_sbo    => p.aqpa377sbop,
                                                    pn_top    => p.aqpa377tope,
                                                    pn_fecha  => pn_ffin,
                                                    pn_fvenuc => lc_fvenuc);
      exception
        when others then
          lc_fvenuc := null;
      end;
    
      -- Fecha de vencimiento de la última cuota pagada                                     
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_datos_ufecha(pn_cod   => p.aqpa377pgcod,
                                                          pn_mod   => p.aqpa377mod,
                                                          pn_suc   => p.aqpa377suc,
                                                          pn_mda   => p.aqpa377mda,
                                                          pn_pap   => p.aqpa377pap,
                                                          pn_cta   => p.aqpa377cta,
                                                          pn_ope   => p.aqpa377ope,
                                                          pn_sbo   => p.aqpa377sbop,
                                                          pn_top   => p.aqpa377tope,
                                                          pn_fecha => pn_ffin,
                                                          pn_fpagu => lc_fupag1, -- Fecha de la última cuota pagada
                                                          pn_fvenu => lc_fvenup); -- Fecha de vencimiento de la última cuota pagada
      exception
        when others then
          lc_fupag1 := null;
          lc_fvenup := null;
      end;
    
      -- 30. Número de cuotas pendientes de pago
      --lc_ncuop := 
      begin
        pq_cr_reporte_fondos_p3.sp_fecha_ncuop_2(p.aqpa377pgcod,
                                                 p.aqpa377mod,
                                                 p.aqpa377suc,
                                                 p.aqpa377mda,
                                                 p.aqpa377pap,
                                                 p.aqpa377cta,
                                                 p.aqpa377ope,
                                                 p.aqpa377sbop,
                                                 p.aqpa377tope,
                                                 pn_ffin,
                                                 lc_fupag1,
                                                 lc_ncuop,
                                                 lc_ncuopg,
                                                 lc_ncuoimp);
      exception
        when others then
          lc_ncuop  := 0;
          lc_ncuopg := 0;
          lc_ncuoimp := 0;
      end;
    
      -- 35. Fecha de última cuota pagado
      begin
        lc_ufpag1 := pq_cr_reporte_fondos_p200.fn_fecha_upago(p.aqpa377pgcod,
                                                              p.aqpa377mod,
                                                              p.aqpa377suc,
                                                              p.aqpa377mda,
                                                              p.aqpa377pap,
                                                              p.aqpa377cta,
                                                              p.aqpa377ope,
                                                              p.aqpa377sbop,
                                                              p.aqpa377tope,
                                                              pn_ffin);
      exception
        when others then
          lc_ufpag1 := null;
      end;
    
      -- 14. Situación Contable (estado del crédito: vigente (VGT), vencido (VCD), Refinanciado (RFN), Judicial (JDC))      
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_scond_c(pn_cod     => p.aqpa377pgcod,
                                                     pn_mod     => p.aqpa377mod,
                                                     pn_suc     => p.aqpa377suc,
                                                     pn_mda     => p.aqpa377mda,
                                                     pn_pap     => p.aqpa377pap,
                                                     pn_cta     => p.aqpa377cta,
                                                     pn_ope     => p.aqpa377ope,
                                                     pn_sbo     => p.aqpa377sbop,
                                                     pn_top     => p.aqpa377tope,
                                                     pn_fecha   => pn_ffin,
                                                     pn_usuario => pn_usuario,
                                                     pn_est     => p.aostat,
                                                     pn_ufech   => lc_ufpag1,
                                                     pn_rubr    => lc_dcon,
                                                     pn_resp    => lc_scon);
      exception
        when others then
          lc_dcon := '';
          lc_dcon := '';
      end;
    
      -- Distribución de pago
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_distribuc_pago_tot(pn_cod   => p.aqpa377pgcod,
                                                        pn_mod   => p.aqpa377mod,
                                                        pn_suc   => p.aqpa377suc,
                                                        pn_mda   => p.aqpa377mda,
                                                        pn_pap   => p.aqpa377pap,
                                                        pn_cta   => p.aqpa377cta,
                                                        pn_ope   => p.aqpa377ope,
                                                        pn_sbo   => p.aqpa377sbop,
                                                        pn_top   => p.aqpa377tope,
                                                        pn_fecha => pn_ffin,
                                                        pn_tsum  => lc_tsum,
                                                        pn_gas   => lc_gas,
                                                        pn_mor   => lc_mor,
                                                        pn_int   => lc_int,
                                                        pn_cuo   => lc_cuo,
                                                        pn_icv   => lc_icv,
                                                        pn_pen   => lc_pen);
      exception
        when others then
          lc_tsum := 0;
          lc_gas  := 0;
          lc_mor  := 0;
          lc_int  := 0;
          lc_cuo  := 0;
          lc_icv  := 0;
          lc_pen  := 0;
      end;
    
      -- 47. Flag de amortización
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_flag_amrtzn(pn_cod   => p.aqpa377pgcod,
                                                 pn_mod   => p.aqpa377mod,
                                                 pn_suc   => p.aqpa377suc,
                                                 pn_mda   => p.aqpa377mda,
                                                 pn_pap   => p.aqpa377pap,
                                                 pn_cta   => p.aqpa377cta,
                                                 pn_ope   => p.aqpa377ope,
                                                 pn_sbo   => p.aqpa377sbop,
                                                 pn_top   => p.aqpa377tope,
                                                 pn_fecha => pn_ffin,
                                                 pn_flarm => lc_lamr,
                                                 pn_fecrm => lc_fecha_amot);
      exception
        when others then
          lc_lamr       := 'NO';
          lc_fecha_amot := null;
      end;
    
      -- 49. Pago realizado (el pago total)
      begin
        pq_cr_reporte_fondos_p200.sp_obtener_pagoi_crec(pn_cod    => p.aqpa377pgcod,
                                                        pn_mod    => p.aqpa377mod,
                                                        pn_suc    => p.aqpa377suc,
                                                        pn_mda    => p.aqpa377mda,
                                                        pn_pap    => p.aqpa377pap,
                                                        pn_cta    => p.aqpa377cta,
                                                        pn_ope    => p.aqpa377ope,
                                                        pn_sbo    => p.aqpa377sbop,
                                                        pn_top    => p.aqpa377tope,
                                                        pn_ord    => 83,
                                                        pn_fcorte => pn_ffin,
                                                        pn_impl   => lc_mpag,
                                                        pn_fech   => lc_fpag);
      exception
        when others then
          lc_mpag := 0;
          lc_fpag := null;
        
      end;
    
      -- 50. Principal Amortizado (capital amortizado)
      begin
        pq_cr_reporte_fondos_p200.sp_obtener_pagoi_crec(pn_cod    => p.aqpa377pgcod,
                                                        pn_mod    => p.aqpa377mod,
                                                        pn_suc    => p.aqpa377suc,
                                                        pn_mda    => p.aqpa377mda,
                                                        pn_pap    => p.aqpa377pap,
                                                        pn_cta    => p.aqpa377cta,
                                                        pn_ope    => p.aqpa377ope,
                                                        pn_sbo    => p.aqpa377sbop,
                                                        pn_top    => p.aqpa377tope,
                                                        pn_ord    => 10,
                                                        pn_fcorte => pn_ffin,
                                                        pn_impl   => lc_mpri,
                                                        pn_fech   => lc_fpri1);
      exception
        when others then
          lc_mpri  := 0;
          lc_fpri1 := null;
      end;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
    
      --- Nivel de ventas
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_nventas(pn_cod      => p.aqpa377pgcod,
                                                     pn_mod      => p.aqpa377mod,
                                                     pn_suc      => p.aqpa377suc,
                                                     pn_mda      => p.aqpa377mda,
                                                     pn_pap      => p.aqpa377pap,
                                                     pn_cta      => p.aqpa377cta,
                                                     pn_ope      => p.aqpa377ope,
                                                     pn_sbo      => p.aqpa377sbop,
                                                     pn_top      => p.aqpa377tope,
                                                     pn_fecha    => pn_ffin,
                                                     pn_ventas   => lc_nventas,
                                                     pn_inst_eva => lc_eval,
                                                     pn_inst_sol => lc_inst);
      exception
        when others then
          lc_nventas := 0;
          lc_eval    := 0;
          lc_inst    := 0;
      end;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   
      -- Datos del crédito original
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_iniciales(pn_cod     => p.aqpa377pgcod,
                                                       pn_mod     => p.aqpa377mod,
                                                       pn_suc     => p.aqpa377suc,
                                                       pn_mda     => p.aqpa377mda,
                                                       pn_pap     => p.aqpa377pap,
                                                       pn_cta     => p.aqpa377cta,
                                                       pn_ope     => p.aqpa377ope,
                                                       pn_sbo     => p.aqpa377sbop,
                                                       pn_top     => p.aqpa377tope,
                                                       pn_fde_ini => lc_fecha_ini,
                                                       pn_mon_ini => lc_monto_ini,
                                                       pn_cuo_ini => lc_cuo_ini);
      exception
        when others then
          lc_fecha_ini := p.aofval;
          lc_monto_ini := p.aoimp;
          lc_cuo_ini   := 0;
      end;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                 
    
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_fecha_ncuo_pagtotal(pn_cod      => p.aqpa377pgcod,
                                                         pn_mod      => p.aqpa377mod,
                                                         pn_suc      => p.aqpa377suc,
                                                         pn_mda      => p.aqpa377mda,
                                                         pn_pap      => p.aqpa377pap,
                                                         pn_cta      => p.aqpa377cta,
                                                         pn_ope      => p.aqpa377ope,
                                                         pn_sbo      => p.aqpa377sbop,
                                                         pn_top      => p.aqpa377tope,
                                                         pn_fecha    => pn_ffin,
                                                         pn_ncuo_pag => lc_ncuo_pag);
      exception
        when others then
          lc_ncuo_pag := 0;
      end;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           
      -- 53. SALDO CAPITAL CANCELADO  
      begin
        lc_scapc := lc_monto_ini - lc_cuo;
      exception
        when others then
          lc_scapc := 0;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     
      -- 54. SALDO CAPITAL CANCELADO            
      begin
        -- Call the procedure
        pq_cr_reporte_fondos_p200.sp_obtener_datraso_uimp(pn_cod   => p.aqpa377pgcod,
                                                          pn_mod   => p.aqpa377mod,
                                                          pn_suc   => p.aqpa377suc,
                                                          pn_mda   => p.aqpa377mda,
                                                          pn_pap   => p.aqpa377pap,
                                                          pn_cta   => p.aqpa377cta,
                                                          pn_ope   => p.aqpa377ope,
                                                          pn_sbo   => p.aqpa377sbop,
                                                          pn_top   => p.aqpa377tope,
                                                          pn_fecha => pn_ffin,
                                                          pn_diat  => lc_diatimp);
      exception
        when others then
          lc_diatimp := 0;
      end;
    
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
      -- 55. Saldo Insoluto Real
      begin
        --- jrodriguej 03.03.2021                                           
      
        pq_cr_reporte_fondos.sp_obtener_sald_insol200_h(pn_cod   => p.aqpa377pgcod,
                                                         pn_mod   => p.aqpa377mod,
                                                         pn_suc   => p.aqpa377suc,
                                                         pn_mda   => p.aqpa377mda,
                                                         pn_pap   => p.aqpa377pap,
                                                         pn_cta   => p.aqpa377cta,
                                                         pn_ope   => p.aqpa377ope,
                                                         pn_sbo   => p.aqpa377sbop,
                                                         pn_top   => p.aqpa377tope,
                                                         pn_fecha => pn_ffin,
                                                         pn_indi  => 3, -- CRECER
                                                         pn_stat  => p.estado,
                                                         pn_sald  => lc_sdoins);
      
      exception
        when others then
          lc_sdoins := 0;
      end;
      
      -- 35. Monto de cobertura
      begin
        lc_mcob := lc_sdoins * lb_pcob / 100;
      exception
        when others then
          lc_mcob := 0;
      end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
           begin
            -- Call the procedure 
            pq_cr_reporte_fondos_p3.sp_obtener_datoshonrado(pn_cod   => p.aqpa377pgcod,
                                                             pn_mod   => p.aqpa377mod,
                                                             pn_suc   => p.aqpa377suc,
                                                             pn_mda   => p.aqpa377mda,
                                                             pn_pap   => p.aqpa377pap,
                                                             pn_cta   => p.aqpa377cta,
                                                             pn_ope   => p.aqpa377ope,
                                                             pn_sbo   => p.aqpa377sbop,
                                                             pn_top   => p.aqpa377tope,
                                                             pn_rubr   => 9300082030000,
                                                           pd_fecha => pn_ffin,
                                                           pc_eshonr => lc_eshonr,
                                                           pn_mhonr  => ln_mhonr,
                                                           pd_fhonr  => ld_fhonr,
                                                           pn_sdohon   => ln_sdohon);
          exception
            when others then
              lc_eshonr := '';
              ln_mhonr := 0;
              ld_fhonr := null;
              ln_sdohon := 0;
          end; 
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
      --------------------------------------------------------------------------
       begin
        pq_cr_reporte_fondos_p3.sp_obtener_fcamb_estado(pn_cod   => p.aqpa377pgcod,
                                                             pn_mod   => p.aqpa377mod,
                                                             pn_suc   => p.aqpa377suc,
                                                             pn_mda   => p.aqpa377mda,
                                                             pn_pap   => p.aqpa377pap,
                                                             pn_cta   => p.aqpa377cta,
                                                             pn_ope   => p.aqpa377ope,
                                                             pn_sbo   => p.aqpa377sbop,
                                                             pn_top   => p.aqpa377tope,                                                          
                                                           pd_fecha => pn_ffin,
                                                           pd_fcest => ld_fcest);
      exception
        when others then
          ld_fcest := null;
      end;
          ----------------------------------------------------------
          -- 10. Distribución clasificación de riesgo enviado por caja
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_calf_caja(pn_cod   => p.aqpa377pgcod,
                                                             pn_mod   => p.aqpa377mod,
                                                             pn_suc   => p.aqpa377suc,
                                                             pn_mda   => p.aqpa377mda,
                                                             pn_pap   => p.aqpa377pap,
                                                             pn_cta   => p.aqpa377cta,
                                                             pn_ope   => p.aqpa377ope,
                                                             pn_sbo   => p.aqpa377sbop,
                                                             pn_top   => p.aqpa377tope,
                                                         pn_est   => p.aostat,
                                                         pn_fecha => pn_ffin,
                                                         --pn_dcla => lc_dcla,
                                                         --pn_ncla => lc_ncla
                                                         pn_calif0a => lc_calif0a,
                                                         pn_calif1a => lc_calif1a,
                                                         pn_calif2a => lc_calif2a,
                                                         pn_calif3a => lc_calif3a,
                                                         pn_calif4a => lc_calif4a,
                                                         pn_deccaj  => lc_fecha_caj);
          exception
            when others then
              lc_calif0a   := 100;
              lc_calif1a   := 0;
              lc_calif2a   := 0;
              lc_calif3a   := 0;
              lc_calif4a   := 0;
              lc_fecha_caj := null;
          end;
          -- 21. Razón social
        
          begin
            lc_perjur := pq_cr_reporte_fondos_p3.fn_obtener_perjur(p.aqpa377pais,
                                                                   p.aqpa377tdoc,
                                                                   p.aqpa377ndoc);
          exception
            when others then
              lc_perjur := '';
          end;
          -- 22. Apellidos y nombres del cliente 
          begin
            lc_pernat := pq_cr_reporte_fondos_p3.fn_obtener_pernat(p.aqpa377pais,
                                                                   p.aqpa377tdoc,
                                                                   p.aqpa377ndoc);
          exception
            when others then
              lc_pernat := '';
          end;
          -------------------------------------------------------------------
          -- Tasa de interes moratoria
          begin
            -- Call the procedure
            pq_cr_reporte_fondos_p3.sp_obtener_tasa_moractual(pn_cod   => p.aqpa377pgcod,
                                                             pn_mod   => p.aqpa377mod,
                                                             pn_suc   => p.aqpa377suc,
                                                             pn_mda   => p.aqpa377mda,
                                                             pn_pap   => p.aqpa377pap,
                                                             pn_cta   => p.aqpa377cta,
                                                             pn_ope   => p.aqpa377ope,
                                                             pn_sbo   => p.aqpa377sbop,
                                                             pn_top   => p.aqpa377tope,
                                                           pn_fecha => pn_ffin,
                                                           pn_tasa  => lc_tmor);
          exception
            when others then
              lc_tmor := 0;
          end;
          ------------------------------------------------------
          begin
              ld_ffinco := pq_cr_reporte_fondos_p3.fn_fecha_cre_original_r(pn_cod => p.aqpa377pgcod,
                                                                 pn_mod => p.aqpa377mod,
                                                                 pn_suc => p.aqpa377suc,
                                                                 pn_mda => p.aqpa377mda,
                                                                 pn_pap => p.aqpa377pap,
                                                                 pn_cta => p.aqpa377cta,
                                                                 pn_ope => p.aqpa377ope,
                                                                 pn_sbo => p.aqpa377sbop,
                                                                 pn_top => p.aqpa377tope,
                                                                 pc_rep => lc_lrep,
                                                                 pd_fre => pn_ffin);
            exception
              when others then
                ld_ffinco := null;
            end;
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            
      begin
        insert into aqpb073
          (aqpb073usur,
           --aqpb073corr,
           --aqpb073fec,
           --aqpb073hora,
           aqpb073pais,
           aqpb073tdoc, -- 1. Tipo Documento (RUC) 
           aqpb073ndoc, -- 2. Número Documento (N° de Ruc)
           --aqpb073ipgcod,
           --aqpb073itsuc, -- 21. Agencia, sucursal 
           --aqpb073itmod,
           --aqpb073ittran,
           --aqpb073itnrel,
           --aqpb073itord,
           --aqpb073itsbor,
           
           aqpb073pgcod,
           aqpb073mod,
           aqpb073suc,
           aqpb073mda,
           aqpb073pap,
           aqpb073cta, -- 23. Nro. cuenta
           aqpb073ope, -- 24. Nro. operación
           aqpb073sbop,
           aqpb073tope,
           
           aqpb073esf, -- 3. ESF (Caja Arequipa)
           aqpb073ccob, -- 4. Código Cobertura (COFIDE)
           aqpb073fval, -- 5. Fecha Desembolso
           aqpb073sdoi, -- 6. Saldo Insoluto
           
           aqpb073mdad, -- 7. Moneda (PEN o USD)
           aqpb073fcla, -- 8. Fecha de clasificación SBS
           aqpb073cnom, -- 9. Calificación Normal (en números de 100 a 0)
           aqpb073ccpp, -- 10. Calificación CPP (en números de 100 a 0)  
           aqpb073cdef, -- 11. Calificación Deficiente (en números de 100 a 0)
           aqpb073cdud, -- 12. Calificación Dudoso (en números de 100 a 0)
           aqpb073cper, -- 13. Calificación Perdida (en números de 100 a 0)
           aqpb073dcon, -- 14. Situación Contable (estado del crédito: vigente (VGT), vencido (VCD), Refinanciado (RFN), Judicial (JDC))            
           aqpb073ncon, -- 14.1. Situación Contable - Concepto
           aqpb073tasa, -- 15. Tasa de Interés
           
           aqpb073ntra, -- 16. Número Trabajadores 
           aqpb073nven, -- 17. Nivel Ventas 
           aqpb073expr, -- 18. Exportaciones
           aqpb073reg, -- 19. Región
           aqpb073nreg, -- 19.1 Región - Nombre
           aqpb073zon, -- 20. Zona 
           aqpb073nzon, -- 20.1 Zona - Nombre
           aqpb073nsuc, -- 21.1 Agencia(Sucursal) - Nombre                        
           aqpb073ase, -- 22. Analista
           --aqpb073cta, -- 23. Nro. cuenta
           --aqpb073oper, -- 24. Nro. operación
           --aqpb073tcre, -- 25. Tipo SBS
           
           aqpb073tcre, -- 25. Tipo crédito SBS
           aqpb073ncre, -- 25.1 Tipo crédito SBS - Concepto
           aqpb073ciuu, -- 26. CIUU
           aqpb073actn, -- 27. Actividad
           aqpb073dmon, -- 28. Monto desembolsado
           aqpb073ncuo, -- 29. Número de cuotas 
           aqpb073pcuo, -- 30. Número de cuotas pendientes de pago
           aqpb073diat, -- 31. Días de atraso
           aqpb073vcuo, -- 32. Vencimiento de cuota atrasada
           aqpb073tasm, -- 33. Tasa de interés moratoria
           aqpb073pcob, -- 34. % cobertura
           aqpb073mcob, -- 35. Monto de cobertura
           aqpb073fini, -- 36. Fecha inicio crédito
           aqpb073ffin, -- 37. Fecha fin crédito
           aqpb073lrep, -- 38. Flag de reprogramación
           aqpb073nrep, -- 39. Número de reprogramaciones
           aqpb073frep, -- 40. Fecha de reprogramación
           aqpb073lamr, -- 41. Flag de amortización
           aqpb073famr, -- 42. Fecha de la amortización 
           aqpb073prel, -- 43. Pago realizado (el pago total)
           aqpb073camr, -- 44. Principal Amortizado (capital amortizado)
           aqpb073estd, -- 45. Estado del crédito (vigente/cancelado)
           aqpb073fcan, -- 46. Fecha de cancelación
           aqpb073fcae, -- 47. Fecha de cambio de estado contable
           aqpb073dest, -- 48. Destino del crédito              -- 49. Tipo de Crédito SBS
           
           aqpb073fvenuc, -- 31. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA IMPAGA  
           aqpb073fvenup, -- 32. FECHA DE VENCIMIENTO DE ÚLTIMA CUOTA PAGADA 
           aqpb073fpag, -- 33. FECHA DE PAGO DE ÚLTIMA CUOTA PAGADA  
           aqpb073ncuop, -- 34. NÚMERO DE CUOTAS PAGADAS  
           aqpb073mcuop, -- 35. MONTO DE CUOTAS PAGADAS 
           
           aqpb073gas, -- 36.a Seguros
           aqpb073mor, -- 36.b Interés Moratorio
           aqpb073int, -- 36.c Intereses
           aqpb073cuo, -- 36.d Capital
           aqpb073icv, -- 36.e Interés compensatorio
           aqpb073pen, -- 36.f Penalidad    
           
           aqpb073scap, -- 53. SALDO CAPITAL CANCELADO       
           
           aqpb073inst,
           aqpb073eval,
           
           aqpb073stat,
           aqpb073fe99,
           
           aqpb073ciiuori,
           aqpb073actnomori,
           
           aqpb073paisb,
           aqpb073tdocb,
           aqpb073ndocb,
           aqpb073diaimp,
           
           aqpb073sdoins, --- 54. Saldo Insoluto Real
           aqpb073fcr,
           aqpb073hcr,
           aqpb073fproc,
           aqpb073mhonr,
           aqpb073fhonr,
           aqpb073chonr,
           aqpb073sdocap,
           aqpb073sdohon,
           aqpb073crehon,
           aqpb073fclaa,
                 aqpb073cnoma,
                 aqpb073ccppa,
                 aqpb073cdefa,
                 aqpb073cduda,
                 aqpb073cpera,
                 aqpb073rnom,
                 aqpb073codcob,
                 aqpb073fcest,
                 aqpb073cuov,
                 aqpb073ncer,
                 aqpb073chon,
                 aqpb073ccob2,
                 aqpb073nrccor,
                 aqpb073nrccac,
                 aqpb073ffinco,
                 aqpb073conhon)
        values
          (pn_usuario,
           
           --p.aqpa377corr,
           --p.aqpa377fec,
           --p.aqpa377hora,
           p.aqpa377pais,
           le_tdoc, --p.aqpa377tdoc, -- 1. Tipo Documento (RUC) 
           trim(lb_ndoc), --p.aqpa377ndoc, -- 2. Número Documento (N° de Ruc)
           --p.aqpa377ipgcod,
           --p.aqpa377itsuc, -- 21. Agencia, sucursal 
           --p.aqpa377itmod,
           --p.aqpa377ittran,
           --p.aqpa377itnrel,
           --p.aqpa377itord,
           --p.aqpa377itsbor,
           
           p.aqpa377pgcod,
           p.aqpa377mod,
           p.aqpa377suc,
           p.aqpa377mda,
           p.aqpa377pap,
           p.aqpa377cta, -- 23. Nro. cuenta
           p.aqpa377ope, -- 24. Nro. operación
           p.aqpa377sbop,
           p.aqpa377tope,
           
           lc_esf, -- 3. ESF (Caja Arequipa)
           lb_ccob, -- 4. Código Cobertura (COFIDE)
           lc_fecha_ini, --p.aofval, -- 5. Fecha Desembolso
           lc_sdoi, -- 6. Saldo Insoluto
           
           lc_mda, -- 7. Moneda (PEN o USD)
           lc_fecha_rcc, -- 8. Fecha de clasificación SBS
           lc_calif0, -- 9. Calificación Normal 
           lc_calif1, -- 10. Calificación CPP 
           lc_calif2, -- 11. Calificación Deficiente
           lc_calif3, -- 12. Calificación Dudoso 
           lc_calif4, -- 13. Calificación Perdida 
           substr(trim(lc_dcon), 1, 4), --p.dcon, -- 14. Situación Contable (estado del crédito: vigente (VGT), vencido (VCD), Refinanciado (RFN), Judicial (JDC))
           substr(trim(lc_scon), 1, 20), -- 14.1 Situación Contable
           p.aotasa, -- 15. Tasa de Interés
           
           lb_tnro, -- 16. Número Trabajadores 
           lb_nven, -- lc_nventas, -- 17. Nivel Ventas 
           0, -- 18. Exportaciones
           lc_regi, -- 19. Región
           substr(trim(lc_nreg), 1, 30), -- 19.1 Región - Nombre
           lc_zona, -- 20. Zona 
           substr(trim(lc_nzon), 1, 40), -- 20.1 Zona - Nombre
           substr(trim(lc_nsuc), 1, 30), -- 21.1 Agencia(Sucursal) - Nombre                        
           substr(trim(lc_ases), 1, 10), -- 22. Analista
           --p.aqpa377cta, -- 23. Nro. cuenta
           --p.aqpa377ope, -- 24. Nro. operación
           
           lc_pcre, -- 25. Tipo SBS
           substr(trim(lc_ncre), 1, 20), -- 25.1 Tipo crédito SBS - Concepto
           lc_ciiu4, -- 26. CIUU
           substr(trim(lc_acti), 1, 60), -- 27. Actividad
           lc_monto_ini, --p.aoimp, -- 28. Monto desembolsado
           lc_cuo_ini, --lc_cuo_n, -- 29. Número de cuotas 
           lc_ncuop, -- 30. Número de cuotas pendientes de pago
           lc_diat, -- 31. Días de atraso
           lc_fvton, -- 32. Vencimiento de cuota atrasada
           lc_tmor, -- 33. Tasa de interés moratoria
           lb_pcob, -- 34. % cobertura
           lc_mcob, -- 35. Monto de cobertura
           lc_fecha_ini, --p.aofval, -- 36. Fecha inicio crédito
           p.aofvto, -- 37. Fecha fin crédito
           lc_lrep, -- 38. Flag de reprogramación
           lc_nrep, -- 39. Número de reprogramaciones
           lc_frep, -- 40. Fecha de reprogramación
           lc_lamr, -- 41. Flag de amortización
           lc_fecha_amot, -- 42. Fecha de la amortización 
           lc_mpag, -- 43. Pago realizado (el pago total)
           lc_mpri, -- 44. Principal Amortizado (capital amortizado)
           
           lc_statd, -- 45. Estado del crédito (vigente/cancelado)
           lc_feccan, --p.aofe99, -- 46. Fecha de cancelación
           
           null, -- 47. Fecha de cambio de estado contable
           substr(trim(lc_tdest), 1, 5), -- 48. Destino del crédito              -- 49. Tipo de Crédito SBS
           
           lc_fvenuc, -- 31. FECHA DE VENCIMIENTO DE LA ÚLTIMA CUOTA IMPAGA  
           lc_fvenup, -- 32. FECHA DE VENCIMIENTO DE ÚLTIMA CUOTA PAGADA 
           lc_ufpag1, -- 33. FECHA DE PAGO DE ÚLTIMA CUOTA PAGADA  
           lc_ncuo_pag, --lc_ncuopg, -- 34. NÚMERO DE CUOTAS PAGADAS 
           lc_tsum, -- 35. MONTO DE CUOTAS PAGADAS  
           
           lc_gas, -- 36.a Seguros
           lc_mor, -- 36.b Interés Moratorio
           lc_int, -- 36.c Intereses
           lc_cuo, -- 36.d Capital
           lc_icv, -- 36.e Interés compensatorio
           lc_pen, -- 36.f Penalidad        
           
           lc_scapc, -- 53. SALDO CAPITAL CANCELADO            
           lc_inst,
           lc_eval,
           
           p.aostat,
           p.aofe99,
           
           lb_ciuu1,
           lb_dciu1,
           
           p.pepaisb,
           p.petdocb,
           p.pendocb,
           lc_diatimp, -- Días de atraso de próxima cuota impaga
           
           lc_sdoins, --- 54. Saldo Insoluto Real
           to_char(sysdate, 'DD/MM/YYYY'),
           to_char(sysdate, 'HH24:MI:SS'),
           pn_ffin,
           ln_mhonr,
           ld_fhonr,
           lc_eshonr,
           lc_sdoi,
           nvl(ln_sdohon,0),
           lc_sdoi+nvl(ln_sdohon,0),
           lc_fecha_caj,
                 lc_calif0a,
                 lc_calif1a,
                 lc_calif2a,
                 lc_calif3a,
                 lc_calif4a,
                 case when p.petdocb = 21 then lc_pernat else lc_perjur end,--rnom,
                 lc_ccob2, --codigo cobertura
                 case when ld_fcest > nvl(p.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then 
                 (case when ld_fcest > nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) then ld_fcest else lc_frep end )
                 else (case when nvl(lc_frep,to_date('01/01/0001','DD/MM/YYYY')) > nvl(p.aofe99,to_date('01/01/0001','DD/MM/YYYY')) then lc_frep else p.aofe99 end )end, --fecha de cambio de estado, -- 44. Fecha del cambio de estado del crédito.
                 lc_ncuoimp, --numero de cuotas vencidas
                 lc_ncer,
                 lc_chon,
                 lc_ccob2,
                 lc_cuo_o,
                 lc_cuo_n,
                 ld_ffinco,
                 lc_conhon
                 );
        commit;
      
      exception
        when others then
        
          lc_coderr := substr(trim(sqlcode), 1, 100);
          lc_msgerr := substr(trim(sqlerrm), 1, 1000);
        
          begin
            insert into AQPB070E
              (aqpb070etab,
               aqpb070efec,
               aqpb070esuc,
               aqpb070eusr,
               aqpb070ecoe,
               aqpb070emsge,
               aqpb070efcr,
               aqpb070ehcr,
               aqpb070ecta,
               aqpb070eope)
            values
              ('AQPB073',
               pn_ffin,
               pc_sucurs,
               substr(trim(pn_usuario), 1, 10),
               lc_coderr,
               lc_msgerr,
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               ln_cta,
               ln_ope);
            commit;
          exception
            when others then
              null;
          end;
        
      end;
    end loop;
  
    for z in verificar_crecer() loop
    
      ln_cta := z.cta;
      ln_ope := z.oper;
    
      -- Verificar si hay una cuenta con tipo de operación 550
      begin
        select count(*)
          into lb_550
          from aqpb073 x
         where x.aqpb073usur = pn_usuario
           and x.aqpb073suc = pc_sucurs
           and x.aqpb073cta = z.cta
           and x.aqpb073ope = z.oper
           and x.aqpb073tope = 550;
      exception
        when others then
          lb_550 := 0;
      end;
    
      if lb_550 <> 0 then
      
        begin
        
          begin
            select distinct x.aqpb073mda
              into lb_mda
              from aqpb073 x
             where x.aqpb073usur = pn_usuario
               and x.aqpb073suc = pc_sucurs
               and x.aqpb073cta = z.cta
               and x.aqpb073ope = z.oper
               and x.aqpb073tope = 550;
          exception
            when others then
              lb_mda := null;
          end;
        
          begin
            -- Call the procedure
            pq_cr_reporte_fondos.sp_verificar_550(pc_mon  => lb_mda,
                                                  pc_suc  => pc_sucurs,
                                                  pn_cta  => z.cta,
                                                  pn_oper => z.oper,
                                                  pc_fech => lb_fec_550);
          exception
            when others then
              lb_fec_550 := null;
          end;
        
          if pn_ffin >= lb_fec_550 then
          
            delete from aqpb073 x
             where x.aqpb073usur = pn_usuario
               and x.aqpb073suc = pc_sucurs
               and x.aqpb073cta = z.cta
               and x.aqpb073ope = z.oper
               and x.aqpb073tope <> 550;
            commit;
          
          else
          
            delete from aqpb073 x
             where x.aqpb073usur = pn_usuario
               and x.aqpb073suc = pc_sucurs
               and x.aqpb073cta = z.cta
               and x.aqpb073ope = z.oper
               and x.aqpb073tope = 550;
            commit;
          
          end if;
        end;
      
      end if;
    
      -- Verificar si hay una cuentacon estado vigente
      begin
        select 'S'
          into lb_flag_vig
          from aqpb073 x
         where x.aqpb073usur = pn_usuario
           and x.aqpb073suc = pc_sucurs
           and x.aqpb073cta = z.cta
           and x.aqpb073ope = z.oper
           and x.aqpb073stat <> 99;
      exception
        when others then
          lb_flag_vig := 'N';
      end;
    
      begin
        if lb_flag_vig = 'S' then
          --- Hay vigente, borrar los no vigentes
        
          delete from aqpb073 x
           where x.aqpb073usur = pn_usuario
             and x.aqpb073suc = pc_sucurs
             and x.aqpb073cta = z.cta
             and x.aqpb073ope = z.oper
             and x.aqpb073stat = 99;
          commit;
        
        else
          --- Solo hay cancelados, dejar el crédito con máxima fecha de cancelación
          select max(x.aqpb073fe99)
            into lb_fmax_anu
            from aqpb073 x
           where x.aqpb073usur = pn_usuario
             and x.aqpb073suc = pc_sucurs
             and x.aqpb073cta = z.cta
             and x.aqpb073ope = z.oper
             and x.aqpb073stat = 99;
        
          select max(x.aqpb073sbop)
            into lb_max_sbop
            from aqpb073 x
           where x.aqpb073usur = pn_usuario
             and x.aqpb073suc = pc_sucurs
             and x.aqpb073cta = z.cta
             and x.aqpb073ope = z.oper
             and x.aqpb073stat = 99
             and x.aqpb073fe99 = lb_fmax_anu;
        
          -- Verificación
          begin
            select count(*)
              into lb_cont_del
              from aqpb073 x
             where x.aqpb073usur = pn_usuario
               and x.aqpb073suc = pc_sucurs
               and x.aqpb073cta = z.cta
               and x.aqpb073ope = z.oper
               and x.aqpb073stat = 99
               and x.aqpb073fe99 <> lb_fmax_anu;
          exception
            when others then
              lb_cont_del := 0;
          end;
        
          --lb_cont_del = 0; significa que las cancelaciones tienen las mismas fechas
          if lb_cont_del = 0 then
          
            delete from aqpb073 x
             where x.aqpb073usur = pn_usuario
               and x.aqpb073suc = pc_sucurs
               and x.aqpb073cta = z.cta
               and x.aqpb073ope = z.oper
               and x.aqpb073stat = 99
               and x.aqpb073fe99 <> lb_fmax_anu;
            commit;
          
            delete from aqpb073 x
             where x.aqpb073usur = pn_usuario
               and x.aqpb073suc = pc_sucurs
               and x.aqpb073cta = z.cta
               and x.aqpb073ope = z.oper
               and x.aqpb073sbop <> lb_max_sbop
               and x.aqpb073stat = 99
               and x.aqpb073fe99 = lb_fmax_anu;
            commit;
          
          else
            --lb_cont_del = 1; significa que las cancelaciones tienen fechas diferentes a las maximas
            delete from aqpb073 x
             where x.aqpb073usur = pn_usuario
               and x.aqpb073suc = pc_sucurs
               and x.aqpb073cta = z.cta
               and x.aqpb073ope = z.oper
               and x.aqpb073stat = 99
               and x.aqpb073fe99 <> lb_fmax_anu;
            commit;
          end if;
        
          /*
          delete from aqpb073 x
           where x.aqpb073usur = pn_usuario
             and x.aqpb073suc = pc_sucurs
             and x.aqpb073cta = z.cta
             and x.aqpb073ope = z.oper
             and x.aqpb073fe99 <> lb_fmax_anu
             and x.aqpb073stat = 99;
          commit;
          */
        
        end if;
      
      exception
        when others then
        
          lc_coderr := substr(trim(sqlcode), 1, 100);
          lc_msgerr := substr(trim(sqlerrm), 1, 1000);
        
          begin
            insert into AQPB070E
              (aqpb070etab,
               aqpb070efec,
               aqpb070esuc,
               aqpb070eusr,
               aqpb070ecoe,
               aqpb070emsge,
               aqpb070efcr,
               aqpb070ehcr,
               aqpb070ecta,
               aqpb070eope)
            values
              ('AQPB073',
               pn_ffin,
               pc_sucurs,
               substr(trim(pn_usuario), 1, 10),
               lc_coderr,
               lc_msgerr,
               to_char(sysdate, 'DD/MM/YYYY'),
               to_char(sysdate, 'HH24:MI:SS'),
               ln_cta,
               ln_ope);
            commit;
          exception
            when others then
              null;
          end;
        
      end;
    
    end loop;
  
  exception
    when others then
    
      lc_coderr := substr(trim(sqlcode), 1, 100);
      lc_msgerr := substr(trim(sqlerrm), 1, 1000);
    
      begin
        insert into AQPB070E
          (aqpb070etab,
           aqpb070efec,
           aqpb070esuc,
           aqpb070eusr,
           aqpb070ecoe,
           aqpb070emsge,
           aqpb070efcr,
           aqpb070ehcr,
           aqpb070ecta,
           aqpb070eope)
        values
          ('AQPB073',
           pn_ffin,
           pc_sucurs,
           substr(trim(pn_usuario), 1, 10),
           lc_coderr,
           lc_msgerr,
           to_char(sysdate, 'DD/MM/YYYY'),
           to_char(sysdate, 'HH24:MI:SS'),
           ln_cta,
           ln_ope);
        commit;
      exception
        when others then
          null;
      end;
    
  end sp_reporte_fcrecer_r3;
  ---------------------------------------------------------------------------------
  procedure sp_guardar_historico(pn_usuario char,
                                 pn_ind     number,
                                 pn_fcorte  date) is
  
    pn_fcarga date;
    lc_coderr char(100);
    lc_msgerr char(1000);
  
  begin
  
    select t.pgfape into pn_fcarga from fst017 t where t.pgcod = 1;
  
    --begin
    case
      when pn_ind = 1 then
        -- REACTIVA
      
        delete from aqpb065h t
         where t.aqpb065husur = pn_usuario
           and t.aqpb065hfproc = pn_fcorte;
        commit;
      
        begin
        
          insert into aqpb065h
            (aqpb065husur,
             aqpb065hpgcod,
             aqpb065haomod,
             aqpb065haosuc,
             aqpb065haomda,
             aqpb065haopap,
             aqpb065haocta,
             aqpb065haooper,
             aqpb065haosbop,
             aqpb065haotope,
             aqpb065hfcarga,
             aqpb065hfsub,
             aqpb065hnsub,
             aqpb065hncer,
             aqpb065hncob,
             aqpb065hnact,
             aqpb065htdoc,
             aqpb065hndoc,
             aqpb065htdocc,
             aqpb065hndocc,
             aqpb065hcsbs,
             aqpb065hrazn,
             aqpb065hciuu,
             aqpb065hpres,
             aqpb065hmda,
             aqpb065hmnto,
             aqpb065hpcob,
             aqpb065hmtoc,
             aqpb065hsdoi,
             aqpb065htea,
             aqpb065hpzo,
             aqpb065hpgra,
             aqpb065hfini,
             aqpb065hffin,
             aqpb065htcre,
             aqpb065hncre,
             aqpb065hfcla,
             aqpb065hcnom,
             aqpb065hccpp,
             aqpb065hcdef,
             aqpb065hcdud,
             aqpb065hcper,
             aqpb065hvpro,
             aqpb065hcent,
             aqpb065hnope,
             aqpb065htadj,
             aqpb065hntra,
             aqpb065httit,
             aqpb065htemp,
             aqpb065hgesp,
             aqpb065hggen,
             aqpb065hlocd,
             aqpb065hactn,
             aqpb065hcsdo,
             aqpb065hfope,
             aqpb065hppzo,
             aqpb065hecre,
             aqpb065hfest,
             aqpb065hfcan,
             aqpb065hscap,
             aqpb065hlamr,
             aqpb065hfult,
             aqpb065hdatr,
             aqpb065hlrep,
             aqpb065hfrep,
             aqpb065hfrini,
             aqpb065hfrfin,
             aqpb065hreg,
             aqpb065hnreg,
             aqpb065hzon,
             aqpb065hnzon,
             aqpb065hnsuc,
             aqpb065hase,
             aqpb065hncuo,
             aqpb065hfvenui,
             aqpb065hfvenup,
             aqpb065hfpag,
             aqpb065hncuop,
             aqpb065hmcuop,
             aqpb065hdpag,
             aqpb065hgas,
             aqpb065hmor,
             aqpb065hint,
             aqpb065hcuo,
             aqpb065hicv,
             aqpb065hpen,
             aqpb065hins,
             aqpb065hfcorte,
             aqpb065hfcr,
             aqpb065hhcr,
             aqpb065hstat,
             aqpb065hfe99,
             aqpb065hsdoins,
             aqpb065hpgrac,
             aqpb065hfproc,
             aqpb065hciiuori,
             aqpb065hactnomori,
             aqpb065hmhonr,
              aqpb065hfhonr,
              aqpb065hchonr,
              aqpb065hsdocap,
              aqpb065hsdohon,
              aqpb065hcrehon,
              aqpb065hfclaa,
              aqpb065hcnoma,
              aqpb065hccppa,
              aqpb065hcdefa,
              aqpb065hcduda,
              aqpb065hcpera,
              aqpb065htmor,
              aqpb065htasa,
              aqpb065htintrep,
              aqpb065hcodhon,
              aqpb065hvint,
              aqpb065hvmor,
              aqpb065hvicv,
              aqpb065hcren,
              aqpb065hcobr,
              aqpb065hchon)
          
            select x.aqpb065usur,
                   x.aqpb065pgcod,
                   x.aqpb065aomod,
                   x.aqpb065aosuc,
                   x.aqpb065aomda,
                   x.aqpb065aopap,
                   x.aqpb065aocta,
                   x.aqpb065aooper,
                   x.aqpb065aosbop,
                   x.aqpb065aotope,
                   pn_fcarga,
                   x.aqpb065fsub,
                   x.aqpb065nsub,
                   x.aqpb065ncer,
                   x.aqpb065ncob,
                   x.aqpb065nact,
                   x.aqpb065tdoc,
                   x.aqpb065ndoc,
                   x.aqpb065tdocc,
                   x.aqpb065ndocc,
                   x.aqpb065csbs,
                   x.aqpb065razn,
                   x.aqpb065ciuu,
                   x.aqpb065pres,
                   x.aqpb065mda,
                   x.aqpb065mnto,
                   x.aqpb065pcob,
                   x.aqpb065mtoc,
                   x.aqpb065sdoi,
                   x.aqpb065tea,
                   x.aqpb065pzo,
                   x.aqpb065pgra,
                   x.aqpb065fini,
                   x.aqpb065ffin,
                   x.aqpb065tcre,
                   x.aqpb065ncre,
                   x.aqpb065fcla,
                   x.aqpb065cnom,
                   x.aqpb065ccpp,
                   x.aqpb065cdef,
                   x.aqpb065cdud,
                   x.aqpb065cper,
                   x.aqpb065vpro,
                   x.aqpb065cent,
                   x.aqpb065nope,
                   x.aqpb065tadj,
                   x.aqpb065ntra,
                   x.aqpb065ttit,
                   x.aqpb065temp,
                   x.aqpb065gesp,
                   x.aqpb065ggen,
                   x.aqpb065locd,
                   x.aqpb065actn,
                   x.aqpb065csdo,
                   x.aqpb065fope,
                   x.aqpb065ppzo,
                   x.aqpb065ecre,
                   x.aqpb065fest,
                   x.aqpb065fcan,
                   x.aqpb065scap,
                   x.aqpb065lamr,
                   x.aqpb065fult,
                   x.aqpb065datr,
                   x.aqpb065lrep,
                   x.aqpb065frep,
                   x.aqpb065frini,
                   x.aqpb065frfin,
                   x.aqpb065reg,
                   x.aqpb065nreg,
                   x.aqpb065zon,
                   x.aqpb065nzon,
                   x.aqpb065nsuc,
                   x.aqpb065ase,
                   x.aqpb065ncuo,
                   x.aqpb065fvenui,
                   x.aqpb065fvenup,
                   x.aqpb065fpag,
                   x.aqpb065ncuop,
                   x.aqpb065mcuop,
                   x.aqpb065dpag,
                   x.aqpb065gas,
                   x.aqpb065mor,
                   x.aqpb065int,
                   x.aqpb065cuo,
                   x.aqpb065icv,
                   x.aqpb065pen,
                   x.aqpb065ins,
                   pn_fcorte,
                   x.aqpb065fcr,
                   x.aqpb065hcr,
                   x.aqpb065stat,
                   x.aqpb065fe99,
                   x.aqpb065sdoins,
                   x.aqpb065pgrac,
                   x.aqpb065fproc,
                   x.aqpb065ciiuori,
                   x.aqpb065actnomori,
                   x.aqpb065mhonr,
                   x.aqpb065fhonr,
                   x.aqpb065chonr,
                   x.aqpb065sdocap,
                   x.aqpb065sdohon,
                   x.aqpb065crehon,
                   x.aqpb065fclaa,
                   x.aqpb065cnoma,
                   x.aqpb065ccppa,
                   x.aqpb065cdefa,
                   x.aqpb065cduda,
                   x.aqpb065cpera,
                   x.aqpb065tmor,
                   x.aqpb065tasa,
                   x.aqpb065tintrep,
                   x.aqpb065codhon,
                   x.aqpb065vint,
                   x.aqpb065vmor,
                   x.aqpb065vicv,
                   x.aqpb065cren,
                   x.aqpb065cobr,
                   x.aqpb065chon
              from aqpb065 x
             where x.aqpb065usur = pn_usuario;
          commit;
        
        exception
          when others then
          
            lc_coderr := sqlcode;
            lc_msgerr := trim(sqlerrm);
          
        end;
      
      when pn_ind = 2 then
        -- FAE1 - 1R
      
        delete from aqpb067h t
         where t.aqpb067husur = pn_usuario
           and t.aqpb067hfproc = pn_fcorte;
        commit;
      
        begin
        
          insert into aqpb067h
            (aqpb067husur,
             aqpb067hpgcod,
             aqpb067haomod,
             aqpb067haosuc,
             aqpb067haomda,
             aqpb067haopap,
             aqpb067haocta,
             aqpb067haooper,
             aqpb067haosbop,
             aqpb067haotope,
             aqpb067hfcarga,
             aqpb067hesf,
             aqpb067hcsap,
             aqpb067hnrop,
             aqpb067hfval,
             aqpb067hmda,
             aqpb067hsdo,
             aqpb067hmpre,
             aqpb067hdcla,
             aqpb067hncla,
             aqpb067hcnoma,
             aqpb067hccppa,
             aqpb067hcdefa,
             aqpb067hcduda,
             aqpb067hcpera,
             aqpb067hdcon,
             aqpb067hncon,
             aqpb067hdiatc,
             aqpb067hreg,
             aqpb067hnreg,
             aqpb067hzon,
             aqpb067hnzon,
             aqpb067hnsuc,
             aqpb067hase,
             aqpb067htdoc,
             aqpb067hndoc,
             aqpb067hrazn,
             aqpb067hrnom,
             aqpb067hestn,
             aqpb067hlest,
             aqpb067hcest,
             aqpb067hdest,
             aqpb067hmdes,
             aqpb067hmcof,
             aqpb067hpper,
             aqpb067hpgra,
             aqpb067hpcob,
             aqpb067hmcob,
             aqpb067hfini,
             aqpb067hffin,
             aqpb067hfvenuc,
             aqpb067hfvenup,
             aqpb067hncuo,
             aqpb067hfcuo,
             aqpb067hfupag,
             aqpb067hncupa,
             aqpb067hmcuop,
             aqpb067hdpag,
             aqpb067hdiat,
             aqpb067hfcla,
             aqpb067hcnom,
             aqpb067hccpp,
             aqpb067hcdef,
             aqpb067hcdud,
             aqpb067hcper,
             aqpb067htasa,
             aqpb067hciuu,
             aqpb067hactn,
             aqpb067htcre,
             aqpb067hncre,
             aqpb067hlrep,
             aqpb067hnrep,
             aqpb067hfrep,
             aqpb067hpfec,
             aqpb067hncuop,
             aqpb067hpgrap,
             aqpb067hpfinp,
             aqpb067hgas,
             aqpb067hmor,
             aqpb067hint,
             aqpb067hcuo,
             aqpb067hicv,
             aqpb067hpen,
             aqpb067hfcorte,
             aqpb067hfcr,
             aqpb067hhcr,
             aqpb067hstat,
             aqpb067hfe99,
             aqpb067hsdoins,
             aqpb067hfeccaj,
             aqpb067hfproc,
             aqpb067hciiuori,
             aqpb067hactnomori,
             aqpb067hmhonr,
             aqpb067hfhonr,
             aqpb067hchonr,
             aqpb067hsdocap,
             aqpb067hsdohon,
             aqpb067hcrehon,
             aqpb067htmor,
             aqpb067htcrepro,
             aqpb067hfcest,
             Aqpb067hncer,
            Aqpb067hccob,
            Aqpb067hcren,
            Aqpb067hcobr,
            Aqpb067hchon,
            Aqpb067hcodi,
            Aqpb067hcrec)
            select x.aqpb067usur,
                   x.aqpb067pgcod,
                   x.aqpb067aomod,
                   x.aqpb067aosuc,
                   x.aqpb067aomda,
                   x.aqpb067aopap,
                   x.aqpb067aocta,
                   x.aqpb067aooper,
                   x.aqpb067aosbop,
                   x.aqpb067aotope,
                   pn_fcarga,
                   x.aqpb067esf,
                   x.aqpb067csap,
                   x.aqpb067nrop,
                   x.aqpb067fval,
                   x.aqpb067mda,
                   x.aqpb067sdo,
                   x.aqpb067mpre,
                   x.aqpb067dcla,
                   x.aqpb067ncla,
                   x.aqpb067cnoma,
                   x.aqpb067ccppa,
                   x.aqpb067cdefa,
                   x.aqpb067cduda,
                   x.aqpb067cpera,
                   x.aqpb067dcon,
                   x.aqpb067ncon,
                   x.aqpb067diatc,
                   x.aqpb067reg,
                   x.aqpb067nreg,
                   x.aqpb067zon,
                   x.aqpb067nzon,
                   x.aqpb067nsuc,
                   x.aqpb067ase,
                   x.aqpb067tdoc,
                   x.aqpb067ndoc,
                   x.aqpb067razn,
                   x.aqpb067rnom,
                   x.aqpb067estn,
                   x.aqpb067lest,
                   x.aqpb067cest,
                   x.aqpb067dest,
                   x.aqpb067mdes,
                   x.aqpb067mcof,
                   x.aqpb067pper,
                   x.aqpb067pgra,
                   x.aqpb067pcob,
                   x.aqpb067mcob,
                   x.aqpb067fini,
                   x.aqpb067ffin,
                   x.aqpb067fvenuc,
                   x.aqpb067fvenup,
                   x.aqpb067ncuo,
                   x.aqpb067fcuo,
                   x.aqpb067fupag,
                   x.aqpb067ncupa,
                   x.aqpb067mcuop,
                   x.aqpb067dpag,
                   x.aqpb067diat,
                   x.aqpb067fcla,
                   x.aqpb067cnom,
                   x.aqpb067ccpp,
                   x.aqpb067cdef,
                   x.aqpb067cdud,
                   x.aqpb067cper,
                   x.aqpb067tasa,
                   x.aqpb067ciuu,
                   x.aqpb067actn,
                   x.aqpb067tcre,
                   x.aqpb067ncre,
                   x.aqpb067lrep,
                   x.aqpb067nrep,
                   x.aqpb067frep,
                   x.aqpb067pfec,
                   x.aqpb067ncuop,
                   x.aqpb067pgrap,
                   x.aqpb067pfinp,
                   x.aqpb067gas,
                   x.aqpb067mor,
                   x.aqpb067int,
                   x.aqpb067cuo,
                   x.aqpb067icv,
                   x.aqpb067pen,
                   pn_fcorte,
                   x.aqpb067fcr,
                   x.aqpb067hcr,
                   x.aqpb067stat,
                   x.aqpb067fe99,
                   x.aqpb067sdoins,
                   x.aqpb067feccaj,
                   x.aqpb067fproc,
                   x.aqpb067ciiuori,
                   x.aqpb067actnomori,
                   x.aqpb067mhonr,
                   x.aqpb067fhonr,
                   x.aqpb067chonr,
                   x.aqpb067sdocap,
                   x.aqpb067sdohon,
                   x.aqpb067crehon,
                   x.aqpb067tmor,
                   x.aqpb067tcrepro,
                   x.aqpb067fcest,
                   x.Aqpb067ncer,
                  x.Aqpb067ccob,
                  x.Aqpb067cren,
                  x.Aqpb067cobr,
                  x.Aqpb067chon,
                  x.Aqpb067codi,
                  x.Aqpb067crec
              from aqpb067 x
             where x.aqpb067usur = pn_usuario;
          commit;
        
        exception
          when others then
          
            lc_coderr := sqlcode;
            lc_msgerr := trim(sqlerrm);
          
        end;
      
      when pn_ind = 3 then
        -- FAE1 - 2R
      
        delete from aqpb068h t
         where t.aqpb068husur = pn_usuario
           and t.aqpb068hfproc = pn_fcorte;
        commit;
      
        begin
        
          insert into aqpb068h
            (aqpb068husur,
             aqpb068hpgcod,
             aqpb068haomod,
             aqpb068haosuc,
             aqpb068haomda,
             aqpb068haopap,
             aqpb068haocta,
             aqpb068haooper,
             aqpb068haosbop,
             aqpb068haotope,
             aqpb068hfcarga,
             aqpb068hcsap,
             aqpb068htdoc,
             aqpb068hndoc,
             aqpb068hrazn,
             aqpb068hmnto,
             aqpb068hsdoa,
             aqpb068hmda,
             aqpb068hlcan,
             aqpb068hfcan,
             aqpb068hsdoc,
             aqpb068hldes,
             aqpb068hfdes,
             aqpb068hreg,
             aqpb068hnreg,
             aqpb068hzon,
             aqpb068hnzon,
             aqpb068hnsuc,
             aqpb068hase,
             aqpb068hfcorte,
             aqpb068hfcr,
             aqpb068hhcr,
             aqpb068hstat,
             aqpb068hfe99,
             aqpb068hsdo,
             aqpb068hfproc,
             aqpb068hmhonr,
             aqpb068hfhonr,
             aqpb068hchonr,
             aqpb068hsdocap,
             aqpb068hsdohon,
             aqpb068hcrehon,
             aqpb068htmor,
             aqpb068htcrepro,
             aqpb068hfcest)
          
            select x.aqpb068usur,
                   x.aqpb068pgcod,
                   x.aqpb068aomod,
                   x.aqpb068aosuc,
                   x.aqpb068aomda,
                   x.aqpb068aopap,
                   x.aqpb068aocta,
                   x.aqpb068aooper,
                   x.aqpb068aosbop,
                   x.aqpb068aotope,
                   pn_fcarga,
                   x.aqpb068csap,
                   x.aqpb068tdoc,
                   x.aqpb068ndoc,
                   x.aqpb068razn,
                   x.aqpb068mnto,
                   x.aqpb068sdoa,
                   x.aqpb068mda,
                   x.aqpb068lcan,
                   x.aqpb068fcan,
                   x.aqpb068sdoc,
                   x.aqpb068ldes,
                   x.aqpb068fdes,
                   x.aqpb068reg,
                   x.aqpb068nreg,
                   x.aqpb068zon,
                   x.aqpb068nzon,
                   x.aqpb068nsuc,
                   x.aqpb068ase,
                   pn_fcorte,
                   x.aqpb068fcr,
                   x.aqpb068hcr,
                   x.aqpb068stat,
                   x.aqpb068fe99,
                   x.aqpb068sdo,
                   x.aqpb068fproc,
                   x.aqpb068mhonr,
                   x.aqpb068fhonr,
                   x.aqpb068chonr,
                   x.aqpb068sdocap,
                   x.aqpb068sdohon,
                   x.aqpb068crehon,
                   x.aqpb068tmor,
                   x.aqpb068tcrepro,
                   x.aqpb068fcest
              from aqpb068 x
             where x.aqpb068usur = pn_usuario;
          commit;
        
        exception
          when others then
          
            lc_coderr := sqlcode;
            lc_msgerr := trim(sqlerrm);
          
        end;
      
      when pn_ind = 4 then
        -- FAE1 - 3R
      
        delete from aqpb069h t
         where t.aqpb069husur = pn_usuario
           and t.aqpb069hfproc = pn_fcorte;
        commit;
      
        begin
        
          insert into aqpb069h
            (aqpb069husur,
             aqpb069hpgcod,
             aqpb069haomod,
             aqpb069haosuc,
             aqpb069haomda,
             aqpb069haopap,
             aqpb069haocta,
             aqpb069haooper,
             aqpb069haosbop,
             aqpb069haotope,
             aqpb069hfcarga,
             aqpb069hcsap,
             aqpb069htdoc,
             aqpb069hndoc,
             aqpb069hrazn,
             aqpb069hfpre,
             aqpb069hmpag,
             aqpb069hmpri,
             aqpb069hsdop,
             aqpb069hffin,
             aqpb069hncro,
             aqpb069hncac,
             aqpb069hcval,
             aqpb069hcvto,
             aqpb069hlpla,
             aqpb069hlrep,
             aqpb069hnrep,
             aqpb069hfrep,
             aqpb069hfrepp,
             aqpb069hfrepu,
             aqpb069hreg,
             aqpb069hnreg,
             aqpb069hzon,
             aqpb069hnzon,
             aqpb069hnsuc,
             aqpb069hase,
             aqpb069hfcorte,
             aqpb069hfcr,
             aqpb069hhcr,
             aqpb069hstat,
             aqpb069hfe99,
             aqpb069hsdo,
             aqpb069hfproc,
             aqpb069hmhonr,
             aqpb069hfhonr,
             aqpb069hchonr ,
             aqpb069hsdocap ,
             aqpb069hsdohon ,
             aqpb069hcrehon,
             aqpb069htmor ,
             aqpb069htcrepro,
             aqpb069hfcest)
            select x.aqpb069usur,
                   x.aqpb069pgcod,
                   x.aqpb069aomod,
                   x.aqpb069aosuc,
                   x.aqpb069aomda,
                   x.aqpb069aopap,
                   x.aqpb069aocta,
                   x.aqpb069aooper,
                   x.aqpb069aosbop,
                   x.aqpb069aotope,
                   pn_fcarga,
                   x.aqpb069csap,
                   x.aqpb069tdoc,
                   x.aqpb069ndoc,
                   x.aqpb069razn,
                   x.aqpb069fpre,
                   x.aqpb069mpag,
                   x.aqpb069mpri,
                   x.aqpb069sdop,
                   x.aqpb069ffin,
                   x.aqpb069ncro,
                   x.aqpb069ncac,
                   x.aqpb069cval,
                   x.aqpb069cvto,
                   x.aqpb069lpla,
                   x.aqpb069lrep,
                   x.aqpb069nrep,
                   x.aqpb069frep,
                   x.aqpb069frepp,
                   x.aqpb069frepu,
                   x.aqpb069reg,
                   x.aqpb069nreg,
                   x.aqpb069zon,
                   x.aqpb069nzon,
                   x.aqpb069nsuc,
                   x.aqpb069ase,
                   pn_fcorte,
                   x.aqpb069fcr,
                   x.aqpb069hcr,
                   x.aqpb069stat,
                   x.aqpb069fe99,
                   x.aqpb069sdo,
                   x.aqpb069fproc,
                   x.aqpb069mhonr,
                   x.aqpb069fhonr,
                   x.aqpb069chonr ,
                   x.aqpb069sdocap ,
                   x.aqpb069sdohon ,
                   x.aqpb069crehon,
                   x.aqpb069tmor ,
                   x.aqpb069tcrepro,
                   x.aqpb069fcest
              from aqpb069 x
             where x.aqpb069usur = pn_usuario;
          commit;
        
        exception
          when others then
          
            lc_coderr := sqlcode;
            lc_msgerr := trim(sqlerrm);
          
        end;
      
      when pn_ind = 6 then
        -- FCRE - 2R
      
        delete from aqpb073h t
         where t.aqpb073husur = pn_usuario
           and t.aqpb073hfproc = pn_fcorte;
        commit;
      
        begin
        
          insert into aqpb073h
            (aqpb073husur,
             aqpb073hcorr,
             aqpb073hfec,
             aqpb073hhora,
             aqpb073hpais,
             aqpb073htdoc,
             aqpb073hndoc,
             aqpb073hipgcod,
             aqpb073hitsuc,
             aqpb073hitmod,
             aqpb073hittran,
             aqpb073hitnrel,
             aqpb073hitord,
             aqpb073hitsbor,
             aqpb073hfcarga,
             aqpb073hpgcod,
             aqpb073hmod,
             aqpb073hsuc,
             aqpb073hmda,
             aqpb073hpap,
             aqpb073hcta,
             aqpb073hope,
             aqpb073hsbop,
             aqpb073htope,
             aqpb073hesf,
             aqpb073hccob,
             aqpb073hfval,
             aqpb073hsdoi,
             aqpb073hmdad,
             aqpb073hfcla,
             aqpb073hcnom,
             aqpb073hccpp,
             aqpb073hcdef,
             aqpb073hcdud,
             aqpb073hcper,
             aqpb073hdcon,
             aqpb073hncon,
             aqpb073htasa,
             aqpb073hntra,
             aqpb073hnven,
             aqpb073hexpr,
             aqpb073hreg,
             aqpb073hnreg,
             aqpb073hzon,
             aqpb073hnzon,
             aqpb073hnsuc,
             aqpb073hase,
             aqpb073htcre,
             aqpb073hncre,
             aqpb073hciuu,
             aqpb073hactn,
             aqpb073hdmon,
             aqpb073hncuo,
             aqpb073hpcuo,
             aqpb073hfvenuc,
             aqpb073hfvenup,
             aqpb073hfpag,
             aqpb073hncuop,
             aqpb073hmcuop,
             aqpb073hdpag,
             aqpb073hgas,
             aqpb073hmor,
             aqpb073hint,
             aqpb073hcuo,
             aqpb073hicv,
             aqpb073hpen,
             aqpb073hdiat,
             aqpb073hvcuo,
             aqpb073htasm,
             aqpb073hpcob,
             aqpb073hmcob,
             aqpb073hfini,
             aqpb073hffin,
             aqpb073hlrep,
             aqpb073hnrep,
             aqpb073hfrep,
             aqpb073hlamr,
             aqpb073hfamr,
             aqpb073hprel,
             aqpb073hcamr,
             aqpb073hestd,
             aqpb073hfcan,
             aqpb073hscap,
             aqpb073hfcae,
             aqpb073hdest,
             aqpb073hinst,
             aqpb073heval,
             aqpb073hfcorte,
             aqpb073hfcr,
             aqpb073hhcr,
             aqpb073hstat,
             aqpb073hfe99,
             aqpb073hpaisb,
             aqpb073htdocb,
             aqpb073hndocb,
             aqpb073hdiaimp,
             aqpb073hsdoins,
             aqpb073hfproc,
             aqpb073hciiuori,
             aqpb073hactnomori,
             aqpb073hmhonr,
             aqpb073hfhonr,
             aqpb073hchonr,
             aqpb073hsdocap,
             aqpb073hsdohon,
             aqpb073hcrehon ,
             aqpb073hfclaa,
             aqpb073hcnoma,
             aqpb073hccppa,
             aqpb073hcdefa,
             aqpb073hcduda,
             aqpb073hcpera,
             aqpb073hrnom,
             aqpb073hcodcob,
             aqpb073hfcest,
             aqpb073hcuov,
             aqpb073hncer,
             aqpb073hchon,
             aqpb073hccob2,
             aqpb073hnrccor,
             aqpb073hnrccac,
             aqpb073hffinco,
             aqpb073hconhon)
          
            select x.aqpb073usur,
                   x.aqpb073corr,
                   x.aqpb073fec,
                   x.aqpb073hora,
                   x.aqpb073pais,
                   x.aqpb073tdoc,
                   x.aqpb073ndoc,
                   x.aqpb073ipgcod,
                   x.aqpb073itsuc,
                   x.aqpb073itmod,
                   x.aqpb073ittran,
                   x.aqpb073itnrel,
                   x.aqpb073itord,
                   x.aqpb073itsbor,
                   pn_fcarga,
                   x.aqpb073pgcod,
                   x.aqpb073mod,
                   x.aqpb073suc,
                   x.aqpb073mda,
                   x.aqpb073pap,
                   x.aqpb073cta,
                   x.aqpb073ope,
                   x.aqpb073sbop,
                   x.aqpb073tope,
                   x.aqpb073esf,
                   x.aqpb073ccob,
                   x.aqpb073fval,
                   x.aqpb073sdoi,
                   x.aqpb073mdad,
                   x.aqpb073fcla,
                   x.aqpb073cnom,
                   x.aqpb073ccpp,
                   x.aqpb073cdef,
                   x.aqpb073cdud,
                   x.aqpb073cper,
                   x.aqpb073dcon,
                   x.aqpb073ncon,
                   x.aqpb073tasa,
                   x.aqpb073ntra,
                   x.aqpb073nven,
                   x.aqpb073expr,
                   x.aqpb073reg,
                   x.aqpb073nreg,
                   x.aqpb073zon,
                   x.aqpb073nzon,
                   x.aqpb073nsuc,
                   x.aqpb073ase,
                   x.aqpb073tcre,
                   x.aqpb073ncre,
                   x.aqpb073ciuu,
                   x.aqpb073actn,
                   x.aqpb073dmon,
                   x.aqpb073ncuo,
                   x.aqpb073pcuo,
                   x.aqpb073fvenuc,
                   x.aqpb073fvenup,
                   x.aqpb073fpag,
                   x.aqpb073ncuop,
                   x.aqpb073mcuop,
                   x.aqpb073dpag,
                   x.aqpb073gas,
                   x.aqpb073mor,
                   x.aqpb073int,
                   x.aqpb073cuo,
                   x.aqpb073icv,
                   x.aqpb073pen,
                   x.aqpb073diat,
                   x.aqpb073vcuo,
                   x.aqpb073tasm,
                   x.aqpb073pcob,
                   x.aqpb073mcob,
                   x.aqpb073fini,
                   x.aqpb073ffin,
                   x.aqpb073lrep,
                   x.aqpb073nrep,
                   x.aqpb073frep,
                   x.aqpb073lamr,
                   x.aqpb073famr,
                   x.aqpb073prel,
                   x.aqpb073camr,
                   x.aqpb073estd,
                   x.aqpb073fcan,
                   x.aqpb073scap,
                   x.aqpb073fcae,
                   x.aqpb073dest,
                   x.aqpb073inst,
                   x.aqpb073eval,
                   pn_fcorte,
                   x.aqpb073fcr,
                   x.aqpb073hcr,
                   x.aqpb073stat,
                   x.aqpb073fe99,
                   x.aqpb073paisb,
                   x.aqpb073tdocb,
                   x.aqpb073ndocb,
                   x.aqpb073diaimp,
                   x.aqpb073sdoins,
                   x.aqpb073fproc,
                   x.aqpb073ciiuori,
                   x.aqpb073actnomori,
                   x.aqpb073mhonr,
                   x.aqpb073fhonr,
                   x.aqpb073chonr,
                   x.aqpb073sdocap,
                   x.aqpb073sdohon,
                   x.aqpb073crehon ,
                   x.aqpb073fclaa,
                   x.aqpb073cnoma,
                   x.aqpb073ccppa,
                   x.aqpb073cdefa,
                   x.aqpb073cduda,
                   x.aqpb073cpera,
                   x.aqpb073rnom,
                   x.aqpb073codcob,
                   x.aqpb073fcest,
                   x.aqpb073cuov,
                   x.aqpb073ncer,
                   x.aqpb073chon,
                   x.aqpb073ccob2,
                   x.aqpb073nrccor,
                   x.aqpb073nrccac,
                   x.aqpb073ffinco,
                   x.aqpb073conhon
              from aqpb073 x
             where x.aqpb073usur = pn_usuario;
          commit;
        
        exception
          when others then
          
            lc_coderr := sqlcode;
            lc_msgerr := trim(sqlerrm);
          
        end;
      
    end case;
  
  end sp_guardar_historico;

  procedure sp_insertar_cabecera(pn_pgcod   in number,
                                 pn_usuario in varchar2,
                                 pn_fecha   in date,
                                 pn_tiporep in number,
                                 pn_corr    out number,
                                 pn_flag    out varchar2) is
  
    --lc_corr number;
  
  begin
  
    pn_flag := 'N';
    case
    
      when pn_tiporep = 1 then
        -- REACTIVA
      
        pn_flag := 'S';
      
        --- Obtener el correlativo
        select nvl(max(t.aqpb065acor), 0) + 1 into pn_corr from aqpb065a t;
      
        --- Reporte FAE
        insert into aqpb065a
          (aqpb065acod,
           aqpb065afec,
           aqpb065acor,
           aqpb065aest,
           aqpb065ausr,
           aqpb065afcr,
           aqpb065ahcr)
        values
          (pn_pgcod,
           pn_fecha,
           pn_corr,
           'I', --INSERTAR
           pn_usuario,
           to_char(sysdate, 'DD/MM/YYYY'),
           to_char(sysdate, 'HH24:MI:SS'));
        commit;
      
      when pn_tiporep = 2 then
        -- FAE
      
        pn_flag := 'S';
      
        --- Obtener el correlativo
        select nvl(max(t.aqpb067acor), 0) + 1 into pn_corr from aqpb067a t;
      
        --- Reporte FAE
        insert into aqpb067a
          (aqpb067acod,
           aqpb067afec,
           aqpb067acor,
           aqpb067aest,
           aqpb067ausr,
           aqpb067afcr,
           aqpb067ahcr)
        values
          (pn_pgcod,
           pn_fecha,
           pn_corr,
           'I', --INSERTAR
           pn_usuario,
           to_char(sysdate, 'DD/MM/YYYY'),
           to_char(sysdate, 'HH24:MI:SS'));
        commit;
      
      when pn_tiporep = 3 then
        -- CRECER
      
        pn_flag := 'S';
      
        --- Obtener el correlativo
        select nvl(max(t.aqpb073acor), 0) + 1 into pn_corr from aqpb073a t;
      
        --- Reporte CRECER
        insert into aqpb073a
          (aqpb073acod,
           aqpb073afec,
           aqpb073acor,
           aqpb073aest,
           aqpb073ausr,
           aqpb073afcr,
           aqpb073ahcr)
        values
          (pn_pgcod,
           pn_fecha,
           pn_corr,
           'I', --INSERTAR
           pn_usuario,
           to_char(sysdate, 'DD/MM/YYYY'),
           to_char(sysdate, 'HH24:MI:SS'));
        commit;
      
    end case;
  
  end sp_insertar_cabecera;

  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

  procedure sp_actualizar_cabecera(pn_pgcod   in number,
                                   pn_fecha   in date,
                                   pn_corr    in number,
                                   pn_usuario in varchar2,
                                   pn_tiporep in number,
                                   pn_estado  in varchar2,
                                   pn_flag    out varchar2) is
  
    pn_est char(1);
  
  begin
  
    pn_flag := 'N';
    case
      when pn_tiporep = 1 then
        ---REACTIVA
      
        pn_flag := 'S';
      
        select x.aqpb065aest
          into pn_est
          from aqpb065a x
         where x.aqpb065acod = pn_pgcod
           and x.aqpb065afec = pn_fecha
           and x.aqpb065acor = pn_corr;
      
        if pn_estado = 'D' and pn_est <> 'G' then
        
          --Actualización del detalle de la plantilla
          update aqpb065b t
             set t.aqpb065best = pn_estado,
                 t.aqpb065busd = pn_usuario,
                 t.aqpb065bfed = to_char(sysdate, 'DD/MM/YYYY'),
                 t.aqpb065bhed = to_char(sysdate, 'HH24:MI:SS')
          
           where t.aqpb065bcod = pn_pgcod
             and t.aqpb065bfec = pn_fecha
             and t.aqpb065bcor = pn_corr
             and t.aqpb065best <> 'D';
          commit;
        
          --- Inicio: 11.01.2021 jrodriguej
          /*
          elsif pn_estado = 'D' and pn_est = 'G' then
          
            -- Actualización de Certificados Reactiva
            update aqpb017d x
               set x.aqpb017dest = pn_estado,
                   x.aqpb017dusu = pn_usuario,
                   x.aqpb017dfee = to_char(sysdate, 'DD/MM/YYYY'),
                   x.aqpb017dhoe = to_char(sysdate, 'HH24:MI:SS')
             where x.aqpb017dcod = pn_pgcod
               and x.aqpb017dfec = pn_fecha
               and x.aqpb017dcor = pn_corr;
            commit;
          
            update aqpb017 x
               set x.aqpb017est = pn_estado,
                   x.aqpb017usd = pn_usuario,
                   x.aqpb017fed = to_char(sysdate, 'DD/MM/YYYY'),
                   x.aqpb017hed = to_char(sysdate, 'HH24:MI:SS')
             where x.aqpb017cod = pn_pgcod
               and x.aqpb017fec = pn_fecha
               and x.aqpb017cor = pn_corr;
            commit;
          
            -- Actualización de Resumen Subastas
            update aqpb018d x
               set x.aqpb018dest = pn_estado,
                   x.aqpb018dusu = pn_usuario,
                   x.aqpb018dfee = to_char(sysdate, 'DD/MM/YYYY'),
                   x.aqpb018dhoe = to_char(sysdate, 'HH24:MI:SS')
             where x.aqpb018dcod = pn_pgcod
               and x.aqpb018dfec = pn_fecha
               and x.aqpb018dcor = pn_corr;
            commit;
          
            update aqpb018 x
               set x.aqpb018est = pn_estado,
                   x.aqpb018usd = pn_usuario,
                   x.aqpb018fed = to_char(sysdate, 'DD/MM/YYYY'),
                   x.aqpb018hed = to_char(sysdate, 'HH24:MI:SS')
             where x.aqpb018cod = pn_pgcod
               and x.aqpb018fec = pn_fecha
               and x.aqpb018cor = pn_corr;
            commit;
          
            --Actualización del detalle de la plantilla
            update aqpb065b t
               set t.aqpb065best = pn_estado,
                   t.aqpb065busd = pn_usuario,
                   t.aqpb065bfed = to_char(sysdate, 'DD/MM/YYYY'),
                   t.aqpb065bhed = to_char(sysdate, 'HH24:MI:SS')
            
             where t.aqpb065bcod = pn_pgcod
               and t.aqpb065bfec = pn_fecha
               and t.aqpb065bcor = pn_corr
               and t.aqpb065best <> 'D';
            commit;
            */
          --- Fin: 11.01.2021 jrodriguej
        
        end if;
      
        update aqpb065a t
           set t.aqpb065aest = pn_estado,
               t.aqpb065ausd = pn_usuario,
               t.aqpb065afed = to_char(sysdate, 'DD/MM/YYYY'),
               t.aqpb065ahed = to_char(sysdate, 'HH24:MI:SS')
        
         where t.aqpb065acod = pn_pgcod
           and t.aqpb065afec = pn_fecha
           and t.aqpb065acor = pn_corr;
        commit;
      
      when pn_tiporep = 2 then
        ---FAE
      
        pn_flag := 'S';
      
        select x.aqpb067aest
          into pn_est
          from aqpb067a x
         where x.aqpb067acod = pn_pgcod
           and x.aqpb067afec = pn_fecha
           and x.aqpb067acor = pn_corr;
      
        if pn_estado = 'D' and pn_est <> 'G' then
        
          --Actualización del detalle de la plantilla
          update aqpb067b t
             set t.aqpb067best = pn_estado,
                 t.aqpb067busd = pn_usuario,
                 t.aqpb067bfed = to_char(sysdate, 'DD/MM/YYYY'),
                 t.aqpb067bhed = to_char(sysdate, 'HH24:MI:SS')
          
           where t.aqpb067bcod = pn_pgcod
             and t.aqpb067bfec = pn_fecha
             and t.aqpb067bcor = pn_corr
             and t.aqpb067best <> 'D';
          commit;
        
          --- Inicio: 11.01.2021 jrodriguej
          /*
          elsif pn_estado = 'D' and pn_est = 'G' then
          
            -- Actualización de Lista de Créditos
            update aqpb080d x
               set x.aqpb080dest = pn_estado,
                   x.aqpb080dusu = pn_usuario,
                   x.aqpb080dfee = to_char(sysdate, 'DD/MM/YYYY'),
                   x.aqpb080dhoe = to_char(sysdate, 'HH24:MI:SS')
             where x.aqpb080dcod = pn_pgcod
               and x.aqpb080dfec = pn_fecha
               and x.aqpb080dcor = pn_corr;
            commit;
          
            update aqpb080 x
               set x.aqpb080est = pn_estado,
                   x.aqpb080usd = pn_usuario,
                   x.aqpb080fed = to_char(sysdate, 'DD/MM/YYYY'),
                   x.aqpb080hed = to_char(sysdate, 'HH24:MI:SS')
             where x.aqpb080cod = pn_pgcod
               and x.aqpb080fec = pn_fecha
               and x.aqpb080cor = pn_corr;
            commit;
          
            --Actualización del detalle de la plantilla
            update aqpb067b t
               set t.aqpb067best = pn_estado,
                   t.aqpb067busd = pn_usuario,
                   t.aqpb067bfed = to_char(sysdate, 'DD/MM/YYYY'),
                   t.aqpb067bhed = to_char(sysdate, 'HH24:MI:SS')
            
             where t.aqpb067bcod = pn_pgcod
               and t.aqpb067bfec = pn_fecha
               and t.aqpb067bcor = pn_corr
               and t.aqpb067best <> 'D';
            commit;
            */
          --- Fin: 11.01.2021 jrodriguej          
        
        end if;
      
        update aqpb067a t
           set t.aqpb067aest = pn_estado,
               t.aqpb067ausd = pn_usuario,
               t.aqpb067afed = to_char(sysdate, 'DD/MM/YYYY'),
               t.aqpb067ahed = to_char(sysdate, 'HH24:MI:SS')
        
         where t.aqpb067acod = pn_pgcod
           and t.aqpb067afec = pn_fecha
           and t.aqpb067acor = pn_corr;
        commit;
      
      when pn_tiporep = 3 then
        ---CRECER
      
        pn_flag := 'S';
      
        select x.aqpb073aest
          into pn_est
          from aqpb073a x
         where x.aqpb073acod = pn_pgcod
           and x.aqpb073afec = pn_fecha
           and x.aqpb073acor = pn_corr;
      
        if pn_estado = 'D' and pn_est <> 'G' then
        
          --Actualización del detalle de la plantilla
          update aqpb073b t
             set t.aqpb073best = pn_estado,
                 t.aqpb073busd = pn_usuario,
                 t.aqpb073bfed = to_char(sysdate, 'DD/MM/YYYY'),
                 t.aqpb073bhed = to_char(sysdate, 'HH24:MI:SS')
          
           where t.aqpb073bcod = pn_pgcod
             and t.aqpb073bfec = pn_fecha
             and t.aqpb073bcor = pn_corr
             and t.aqpb073best <> 'D';
          commit;
        
          --- Inicio: 11.01.2021 jrodriguej
          /*
          elsif pn_estado = 'D' and pn_est = 'G' then
          
            -- Plantilla de Actualización de Saldos
            update aqpb076d x
               set x.aqpb076dest = pn_estado,
                   x.aqpb076dusu = pn_usuario,
                   x.aqpb076dfee = to_char(sysdate, 'DD/MM/YYYY'),
                   x.aqpb076dhoe = to_char(sysdate, 'HH24:MI:SS')
             where x.aqpb076dcod = pn_pgcod
               and x.aqpb076dfec = pn_fecha
               and x.aqpb076dcor = pn_corr;
            commit;
          
            update aqpb076 x
               set x.aqpb076est = pn_estado,
                   x.aqpb076usd = pn_usuario,
                   x.aqpb076fed = to_char(sysdate, 'DD/MM/YYYY'),
                   x.aqpb076hed = to_char(sysdate, 'HH24:MI:SS')
             where x.aqpb076cod = pn_pgcod
               and x.aqpb076fec = pn_fecha
               and x.aqpb076cor = pn_corr;
            commit;
          
            -- Plantilla de Lista de Coberturas
            update aqpb077d x
               set x.aqpb077dest = pn_estado,
                   x.aqpb077dusu = pn_usuario,
                   x.aqpb077dfee = to_char(sysdate, 'DD/MM/YYYY'),
                   x.aqpb077dhoe = to_char(sysdate, 'HH24:MI:SS')
             where x.aqpb077dcod = pn_pgcod
               and x.aqpb077dfec = pn_fecha
               and x.aqpb077dcor = pn_corr;
            commit;
          
            update aqpb077 x
               set x.aqpb077est = pn_estado,
                   x.aqpb077usd = pn_usuario,
                   x.aqpb077fed = to_char(sysdate, 'DD/MM/YYYY'),
                   x.aqpb077hed = to_char(sysdate, 'HH24:MI:SS')
             where x.aqpb077cod = pn_pgcod
               and x.aqpb077fec = pn_fecha
               and x.aqpb077cor = pn_corr;
            commit;
          
            --Actualización del detalle de la plantilla
            update aqpb073b t
               set t.aqpb073best = pn_estado,
                   t.aqpb073busd = pn_usuario,
                   t.aqpb073bfed = to_char(sysdate, 'DD/MM/YYYY'),
                   t.aqpb073bhed = to_char(sysdate, 'HH24:MI:SS')
            
             where t.aqpb073bcod = pn_pgcod
               and t.aqpb073bfec = pn_fecha
               and t.aqpb073bcor = pn_corr
               and t.aqpb073best <> 'D';
            commit;
            */
          --- Fin: 11.01.2021 jrodriguej
        
        end if;
      
        update aqpb073a t
           set t.aqpb073aest = pn_estado,
               t.aqpb073ausd = pn_usuario,
               t.aqpb073afed = to_char(sysdate, 'DD/MM/YYYY'),
               t.aqpb073ahed = to_char(sysdate, 'HH24:MI:SS')
        
         where t.aqpb073acod = pn_pgcod
           and t.aqpb073afec = pn_fecha
           and t.aqpb073acor = pn_corr;
        commit;
      
    end case;
  
  end sp_actualizar_cabecera;

  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                 

  Function fn_cr_verifica_tarea(P_C_NOMJOB IN VARCHAR2,
                                P_C_HOSTNA IN VARCHAR2) return number is
    --2019.07.22 DCASTRO se implementaron schedulers para optimizar la carga, creacion guia de proceso para hostname
    ln_numjob number(9) := 0;
    lc_nomusr varchar2(50);
  
  begin
  
    begin
      select TRIM(TP1DESC)
        INTO lc_nomusr
        from fst198
       where tp1cod = 1
         and tp1cod1 = 10847
         and tp1corr1 = 999; ---2019.07.22 guia de proceso para hostname
    end;
  
    begin
      SELECT COUNT(1)
        INTO ln_numjob
        FROM dba_scheduler_jobs job
       WHERE owner = lc_nomusr
         AND job.job_name LIKE P_C_NOMJOB || '%';
    end;
  
    return ln_numjob;
  end fn_cr_verifica_tarea;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                 

  Function fn_cr_verifica_tarea2(P_C_NOMJOB IN VARCHAR2,
                                 P_C_HOSTNA IN VARCHAR2,
                                 pn_paquete in varchar2,
                                 pn_proceso in varchar2,
                                 pn_usuario in varchar2) return number is
    --2019.07.22 DCASTRO se implementaron schedulers para optimizar la carga, creacion guia de proceso para hostname
    ln_numjob     number(9) := 0;
    lc_nomusr     varchar2(50);
    lc_pac_nombre varchar2(100);
  
  begin
  
    begin
      select TRIM(TP1DESC)
        INTO lc_nomusr
        from fst198
       where tp1cod = 1
         and tp1cod1 = 10847
         and tp1corr1 = 999; ---2019.07.22 guia de proceso para hostname
    end;
  
    begin
      /*
      SELECT COUNT(1)
        INTO ln_numjob
        FROM dba_scheduler_jobs job
       WHERE owner = lc_nomusr
         AND job.job_name LIKE P_C_NOMJOB || '%';
       */
    
      lc_pac_nombre := trim(pn_paquete) || '.' || trim(pn_proceso);
    
      SELECT count(*)
        INTO ln_numjob
        FROM dba_jobs x
       WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
         AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
         AND x.what LIKE '%' || trim(pn_usuario) || '%';
    
    end;
  
    return ln_numjob;
  end fn_cr_verifica_tarea2;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  procedure sp_cr_sch_reactiva(pd_fecpro  in date,
                               pn_usuario in varchar2
                               --,pn_flag out varchar2
                               ) is
  
    ln_ini      number;
    lc_variable varchar2(4000);
    ln_job      number := 0;
    lc_fecpro   char(10);
    --ld_finmes   date;
    lc_hostname varchar2(64);
  
    pi_vc2_nomjob varchar2(65);
    lc_prefjob    varchar2(64);
    ln_numjob     number(9) := 0;
    lc_user       varchar(5);
    lc_prefijo    varchar(10);
    --lc_flag       varchar2(1);
    x             number;
    --lc_fecha      date;
    lb_njobs      number(3);
  
    lc_paquete    varchar2(50);
    lc_proceso    varchar2(50);
    job_id        number;
    lc_nomusr     varchar2(50);
    lc_pac_nombre varchar2(100);
  
    cursor sucursal is
      select *
        from fst001
       where pgcod = 1
         and sucurs < 800
      --or sucurs >= 900
      ;
  
  begin
  
    begin
      select TRIM(TP1DESC)
        INTO lc_nomusr
        from fst198
       where tp1cod = 1
         and tp1cod1 = 10847
         and tp1corr1 = 999; ---2019.07.22 guia de proceso para hostname
    end;
  
    select x.tp1nro1
      into lb_njobs
      from fst198 x
     where x.TP1COD = 1
       and x.TP1COD1 = 11144
       and x.TP1CORR1 = 10
       and x.tp1corr2 = 2
       and x.tp1corr3 = 3;
  
    begin
      select host_name into lc_hostname from v$instance;
    end;
  
    -- Eliminación del registro por usuario
    delete from aqpb065 t where trim(t.aqpb065usur) = pn_usuario;
    commit;
  
    -- 2. Carga de tabla
    begin
      -- Call the procedure
      pq_cr_reporte_fondos.sp_sch_aqpb070a_carga(pd_fecpro  => pd_fecpro,
                                                 pn_usuario => pn_usuario,
                                                 pn_indi    => 1); --- REACTIVA
    end;
  
    lc_user       := substr(pn_usuario, 1, 5);
    lc_prefijo    := 'REAC1' || lc_user;
    lc_paquete    := 'pq_cr_reporte_fondos';
    lc_proceso    := 'sp_reporte_reactiva_r1';
    lc_pac_nombre := trim(lc_paquete) || '.' || trim(lc_proceso);
  
    lc_fecpro := to_char(pd_fecpro, 'RRRR.MM.DD');
  
    ---carga diaria
    for i in sucursal loop
      ln_ini := i.sucurs;
      ln_job := ln_job + 1;
      --lc_prefjob    := 'REA_REP_1';
      lc_prefjob    := lc_prefijo;
      pi_vc2_nomjob := lc_prefjob || to_char(pd_fecpro, 'ddmmrrrr') ||
                       lpad(ln_ini, 3, '0'); ---ln_job
      lc_variable   := 'begin ' ||
                       '  pq_cr_reporte_fondos.sp_reporte_reactiva_r1( TO_DATE(''' ||
                       lc_fecpro || ''',''RRRR.MM.DD''),' || ln_ini ||
                       ',''' || pn_usuario || ''' );' || ' End;';
    
      IF SYS.FN_BD_ISRAC = 'TRUE' THEN
        /*
        dbms_scheduler.create_job(job_name   => pi_vc2_nomjob,
                                  job_type   => 'PLSQL_BLOCK',
                                  job_action => lc_variable,
                                  start_date => sysdate, -- + 1 / (24 * 180),
                                  enabled    => true,
                                  auto_drop  => TRUE,
                                  comments   => 'Reporte_Rea_1 ' ||
                                                pn_usuario);
        begin
          dbms_scheduler.set_attribute(pi_vc2_nomjob, 'instance_id', 2);
        end;
        */
      
        dbms_job.submit(job_id,
                        what      => lc_variable,
                        next_date => sysdate,
                        interval  => null,
                        no_parse  => false,
                      --  instance  => 2, --24/10/2023
                        instance  => 1,
                        force     => false);
      
      Else
        /*
        dbms_scheduler.create_job(job_name   => pi_vc2_nomjob,
                                  job_type   => 'PLSQL_BLOCK',
                                  job_action => lc_variable,
                                  start_date => sysdate, -- + 1 / (24 * 180),
                                  enabled    => true,
                                  auto_drop  => TRUE,
                                  comments   => 'Reporte_Rea_1 ' ||
                                                pn_usuario);
        begin
          dbms_scheduler.set_attribute(pi_vc2_nomjob, 'instance_id', 1);
        end;
        */
        dbms_job.submit(job_id,
                        what      => lc_variable,
                        next_date => sysdate,
                        interval  => null,
                        no_parse  => false,
                        force     => false);
      
      End If;
      commit;
    
      /*
      select count(*)
        into x
        from dba_scheduler_jobs
       where owner = 'BANTPROD'
         AND JOB_NAME LIKE '%REAC1%';
      while x = lb_njobs loop
        --- Parametrizar              BANTPROD
        select count(*)
          into x
          from dba_scheduler_jobs
         where owner = 'BANTPROD'
           AND JOB_NAME LIKE '%REAC1%';
      end loop;
      */
    
      SELECT count(*)
        INTO x
        FROM dba_jobs x
       WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
         AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
         AND x.what LIKE '%' || trim(pn_usuario) || '%';
    
      while x = lb_njobs loop
        --- Parametrizar              BANTPROD
        SELECT count(*)
          INTO x
          FROM dba_jobs x
         WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
           AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
           AND x.what LIKE '%' || trim(pn_usuario) || '%';
      
      end loop;
    
      INSERT INTO Tab_jobs
        (c_codage, n_Numer1, c_detjob) --VARCHAR(10),NUMBER,VARCHAR(500)
      VALUES
      --('REA_REP_1', ln_ini, lc_variable);
        (lc_prefijo, ln_ini, lc_variable);
      COMMIT;
    
    end loop;
  
    ln_numjob := pq_cr_reporte_fondos.fn_cr_verifica_tarea2(lc_prefjob,
                                                            lc_hostname,
                                                            lc_paquete,
                                                            lc_proceso,
                                                            pn_usuario);
  
    While ln_numjob > 0 loop
      ln_numjob := pq_cr_reporte_fondos.fn_cr_verifica_tarea2(lc_prefjob,
                                                              lc_hostname,
                                                              lc_paquete,
                                                              lc_proceso,
                                                              pn_usuario);
    End loop;
  
    -- Registro de histórico   
    pq_cr_reporte_fondos.sp_guardar_historico(pn_usuario, 1, pd_fecpro);
  
    --pn_flag := 'S';    
  
  end sp_cr_sch_reactiva;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  procedure sp_cr_sch_faemype_r1(pd_fecpro in date, pn_usuario in char) is
  
    ln_ini      number;
    lc_variable varchar2(4000);
    ln_job      number := 0;
    lc_fecpro   char(10);
    --ld_finmes   date;
    lc_hostname varchar2(64);
  
    pi_vc2_nomjob varchar2(65);
    lc_prefjob    varchar2(64);
    ln_numjob     number(9) := 0;
    lc_user       varchar(5);
    lc_prefijo    varchar(10);
    --lc_flag       varchar2(1);
    x             number;
    --lc_fecha      date;
    lb_njobs      number(3);
  
    lc_paquete    varchar2(50);
    lc_proceso    varchar2(50);
    job_id        number;
    lc_nomusr     varchar2(50);
    lc_pac_nombre varchar2(100);
  
    cursor sucursal is
      select *
        from fst001
       where pgcod = 1
         and sucurs < 800
      --or sucurs >= 900
      ;
  
  begin
  
    begin
      select TRIM(TP1DESC)
        INTO lc_nomusr
        from fst198
       where tp1cod = 1
         and tp1cod1 = 10847
         and tp1corr1 = 999; ---2019.07.22 guia de proceso para hostname
    end;
  
    select x.tp1nro1
      into lb_njobs
      from fst198 x
     where x.TP1COD = 1
       and x.TP1COD1 = 11144
       and x.TP1CORR1 = 10
       and x.tp1corr2 = 2
       and x.tp1corr3 = 3;
  
    begin
      select host_name into lc_hostname from v$instance;
    end;
  
    -- Eliminación del registro por usuario
    delete from aqpb067 t where trim(t.aqpb067usur) = pn_usuario;
    commit;
  
    -- 2. Carga de tabla
    begin
      -- Call the procedure
      pq_cr_reporte_fondos.sp_sch_aqpb070a_carga(pd_fecpro  => pd_fecpro,
                                                 pn_usuario => pn_usuario,
                                                 pn_indi    => 2); --- FAE
    end;
    
  
    lc_user       := substr(pn_usuario, 1, 5);
    lc_prefijo    := 'FAE_1' || lc_user;
    lc_paquete    := 'pq_cr_reporte_fondos';
    lc_proceso    := 'sp_reporte_faemype_r1';
    lc_pac_nombre := trim(lc_paquete) || '.' || trim(lc_proceso);
  
    lc_fecpro := to_char(pd_fecpro, 'RRRR.MM.DD');
  
    -- Obtener hora inicial
  
    ---carga diaria
    for i in sucursal loop
      ln_ini        := i.sucurs;
      ln_job        := ln_job + 1;
      lc_prefjob    := lc_prefijo;
      pi_vc2_nomjob := lc_prefjob || to_char(pd_fecpro, 'ddmmrrrr') ||
                       lpad(ln_ini, 3, '0'); ---ln_job
      lc_variable   := 'begin ' ||
                       '  pq_cr_reporte_fondos.sp_reporte_faemype_r1( TO_DATE(''' ||
                       lc_fecpro || ''',''RRRR.MM.DD''),' || ln_ini ||
                       ',''' || pn_usuario || ''' );' || ' End;';
    
      IF SYS.FN_BD_ISRAC = 'TRUE' THEN
      
        dbms_job.submit(job_id,
                        what      => lc_variable,
                        next_date => sysdate,
                        interval  => null,
                        no_parse  => false,
                     --   instance  => 2, --24/10/2023
                        instance  => 1,
                        force     => false);
      
      Else
      
        dbms_job.submit(job_id,
                        what      => lc_variable,
                        next_date => sysdate,
                        interval  => null,
                        no_parse  => false,
                        force     => false);
      End If;
      commit;
    
      /*
      select count(*)
        into x
        from dba_scheduler_jobs
       where owner = 'BANTPROD'
         AND JOB_NAME LIKE '%FAE_1%';
      while x = lb_njobs loop
        select count(*)
          into x
          from dba_scheduler_jobs
         where owner = 'BANTPROD'
           AND JOB_NAME LIKE '%FAE_1%';
      end loop;
      */
    
      SELECT count(*)
        INTO x
        FROM dba_jobs x
       WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
         AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
         AND x.what LIKE '%' || trim(pn_usuario) || '%';
    
      while x = lb_njobs loop
        --- Parametrizar              BANTPROD
        SELECT count(*)
          INTO x
          FROM dba_jobs x
         WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
           AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
           AND x.what LIKE '%' || trim(pn_usuario) || '%';
      
      end loop;
    
      INSERT INTO Tab_jobs
        (c_codage, n_Numer1, c_detjob)
      VALUES
        (lc_prefijo, ln_ini, lc_variable);
      COMMIT;
    
    end loop;
  
    ln_numjob := pq_cr_reporte_fondos.fn_cr_verifica_tarea2(lc_prefjob,
                                                            lc_hostname,
                                                            lc_paquete,
                                                            lc_proceso,
                                                            pn_usuario);
  
    While ln_numjob > 0 loop
      ln_numjob := pq_cr_reporte_fondos.fn_cr_verifica_tarea2(lc_prefjob,
                                                              lc_hostname,
                                                              lc_paquete,
                                                              lc_proceso,
                                                              pn_usuario);
    End loop;
  
    -- Registro históricos  
    pq_cr_reporte_fondos.sp_guardar_historico(pn_usuario, 2, pd_fecpro);
  
  end sp_cr_sch_faemype_r1;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  procedure sp_cr_sch_faemype_r2(pd_fecpro in date, pn_usuario in char) is
  
    ln_ini      number;
    lc_variable varchar2(4000);
    ln_job      number := 0;
    lc_fecpro   char(10);
    --ld_finmes   date;
    lc_hostname varchar2(64);
  
    pi_vc2_nomjob varchar2(65);
    lc_prefjob    varchar2(64);
    ln_numjob     number(9) := 0;
    lc_user       varchar(5);
    lc_prefijo    varchar(10);
    --lc_flag       varchar2(1);
    x             number;
    --lc_fecha      date;
    lb_njobs      number(3);
  
    lc_paquete    varchar2(50);
    lc_proceso    varchar2(50);
    job_id        number;
    lc_nomusr     varchar2(50);
    lc_pac_nombre varchar2(100);
  
    cursor sucursal is
      select *
        from fst001
       where pgcod = 1
         and sucurs < 800
      --or sucurs >= 900
      ;
  
  begin
  
    begin
      select TRIM(TP1DESC)
        INTO lc_nomusr
        from fst198
       where tp1cod = 1
         and tp1cod1 = 10847
         and tp1corr1 = 999; ---2019.07.22 guia de proceso para hostname
    end;
  
    select x.tp1nro1
      into lb_njobs
      from fst198 x
     where x.TP1COD = 1
       and x.TP1COD1 = 11144
       and x.TP1CORR1 = 10
       and x.tp1corr2 = 2
       and x.tp1corr3 = 3;
  
    begin
      select host_name into lc_hostname from v$instance;
    end;
  
    -- Eliminación del registro por usuario
    delete from aqpb068 t where trim(t.aqpb068usur) = pn_usuario;
    commit;
  
    -- 2. Carga de tabla
    begin
      -- Call the procedure
      pq_cr_reporte_fondos.sp_sch_aqpb070a_carga(pd_fecpro  => pd_fecpro,
                                                 pn_usuario => pn_usuario,
                                                 pn_indi    => 2); --- FAE
    end;
  
    lc_user       := substr(pn_usuario, 1, 5);
    lc_prefijo    := 'FAE_2' || lc_user;
    lc_paquete    := 'pq_cr_reporte_fondos';
    lc_proceso    := 'sp_reporte_faemype_r2';
    lc_pac_nombre := trim(lc_paquete) || '.' || trim(lc_proceso);
  
    lc_fecpro := to_char(pd_fecpro, 'RRRR.MM.DD');
  
    ---carga diaria
    for i in sucursal loop
      ln_ini        := i.sucurs;
      ln_job        := ln_job + 1;
      lc_prefjob    := lc_prefijo;
      pi_vc2_nomjob := lc_prefjob || to_char(pd_fecpro, 'ddmmrrrr') ||
                       lpad(ln_ini, 3, '0'); ---ln_job
      lc_variable   := 'begin ' ||
                       '  pq_cr_reporte_fondos.sp_reporte_faemype_r2( TO_DATE(''' ||
                       lc_fecpro || ''',''RRRR.MM.DD''),' || ln_ini ||
                       ',''' || pn_usuario || ''' );' || ' End;';
    
      IF SYS.FN_BD_ISRAC = 'TRUE' THEN
        /*
        dbms_scheduler.create_job(job_name   => pi_vc2_nomjob,
                                  job_type   => 'PLSQL_BLOCK',
                                  job_action => lc_variable,
                                  start_date => sysdate, -- + 1 / (24 * 180),
                                  enabled    => true,
                                  auto_drop  => TRUE,
                                  comments   => 'Reporte_Fae_2 ' ||
                                                pn_usuario);
        begin
          dbms_scheduler.set_attribute(pi_vc2_nomjob, 'instance_id', 2);
        end;
        */
      
        dbms_job.submit(job_id,
                        what      => lc_variable,
                        next_date => sysdate,
                        interval  => null,
                        no_parse  => false,
                      --  instance  => 2, -- 24/10/2023
                        instance  => 1,
                        force     => false);
      
      Else
        /*
        dbms_scheduler.create_job(job_name   => pi_vc2_nomjob,
                                  job_type   => 'PLSQL_BLOCK',
                                  job_action => lc_variable,
                                  start_date => sysdate, -- + 1 / (24 * 180),
                                  enabled    => true,
                                  auto_drop  => TRUE,
                                  comments   => 'Reporte_Fae_2' ||
                                                pn_usuario);
        begin
          dbms_scheduler.set_attribute(pi_vc2_nomjob, 'instance_id', 1);
        end;
        */
        dbms_job.submit(job_id,
                        what      => lc_variable,
                        next_date => sysdate,
                        interval  => null,
                        no_parse  => false,
                        force     => false);
      End If;
      commit;
    
      /*
      select count(*)
        into x
        from dba_scheduler_jobs
       where owner = 'BANTPROD'
         AND JOB_NAME LIKE '%FAE_2%';
      while x = lb_njobs loop
        select count(*)
          into x
          from dba_scheduler_jobs
         where owner = 'BANTPROD'
           AND JOB_NAME LIKE '%FAE_2%';
      end loop;
      */
      SELECT count(*)
        INTO x
        FROM dba_jobs x
       WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
         AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
         AND x.what LIKE '%' || trim(pn_usuario) || '%';
    
      while x = lb_njobs loop
        --- Parametrizar              BANTPROD
        SELECT count(*)
          INTO x
          FROM dba_jobs x
         WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
           AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
           AND x.what LIKE '%' || trim(pn_usuario) || '%';
      
      end loop;
    
      INSERT INTO Tab_jobs
        (c_codage, n_Numer1, c_detjob)
      VALUES
        (lc_prefijo, ln_ini, lc_variable);
      COMMIT;
    
    end loop;
  
    ln_numjob := pq_cr_reporte_fondos.fn_cr_verifica_tarea2(lc_prefjob,
                                                            lc_hostname,
                                                            lc_paquete,
                                                            lc_proceso,
                                                            pn_usuario);
  
    While ln_numjob > 0 loop
      ln_numjob := pq_cr_reporte_fondos.fn_cr_verifica_tarea2(lc_prefjob,
                                                              lc_hostname,
                                                              lc_paquete,
                                                              lc_proceso,
                                                              pn_usuario);
    End loop;
  
    -- Registro de histórico   
    pq_cr_reporte_fondos.sp_guardar_historico(pn_usuario, 3, pd_fecpro);
  
  end sp_cr_sch_faemype_r2;

  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  procedure sp_cr_sch_faemype_r3(pd_fecpro in date, pn_usuario in char) is
  
    ln_ini      number;
    lc_variable varchar2(4000);
    ln_job      number := 0;
    lc_fecpro   char(10);
    --ld_finmes   date;
    lc_hostname varchar2(64);
  
    pi_vc2_nomjob varchar2(65);
    lc_prefjob    varchar2(64);
    ln_numjob     number(9) := 0;
    lc_user       varchar(5);
    lc_prefijo    varchar(10);
    --lc_flag       varchar2(1);
    x             number;
    --lc_fecha      date;
    lb_njobs      number(3);
  
    lc_paquete    varchar2(50);
    lc_proceso    varchar2(50);
    job_id        number;
    lc_nomusr     varchar2(50);
    lc_pac_nombre varchar2(100);
  
    cursor sucursal is
      select *
        from fst001
       where pgcod = 1
         and sucurs < 800
      --or sucurs >= 900
      ;
  
  begin
  
    begin
      select TRIM(TP1DESC)
        INTO lc_nomusr
        from fst198
       where tp1cod = 1
         and tp1cod1 = 10847
         and tp1corr1 = 999; ---2019.07.22 guia de proceso para hostname
    end;
  
    select x.tp1nro1
      into lb_njobs
      from fst198 x
     where x.TP1COD = 1
       and x.TP1COD1 = 11144
       and x.TP1CORR1 = 10
       and x.tp1corr2 = 2
       and x.tp1corr3 = 3;
  
    begin
      select host_name into lc_hostname from v$instance;
    end;
  
    -- Eliminación del registro por usuario
    delete from aqpb069 t where trim(t.aqpb069usur) = pn_usuario;
    commit;
  
    -- 2. Carga de tabla
    begin
      -- Call the procedure
      pq_cr_reporte_fondos.sp_sch_aqpb070a_carga(pd_fecpro  => pd_fecpro,
                                                 pn_usuario => pn_usuario,
                                                 pn_indi    => 2); --- FAE
    end;
  
    lc_user       := substr(pn_usuario, 1, 5);
    lc_prefijo    := 'FAE_3' || lc_user;
    lc_paquete    := 'pq_cr_reporte_fondos';
    lc_proceso    := 'sp_reporte_faemype_r3';
    lc_pac_nombre := trim(lc_paquete) || '.' || trim(lc_proceso);
  
    lc_fecpro := to_char(pd_fecpro, 'RRRR.MM.DD');
  
    ---carga diaria
    for i in sucursal loop
      ln_ini        := i.sucurs;
      ln_job        := ln_job + 1;
      lc_prefjob    := lc_prefijo;
      pi_vc2_nomjob := lc_prefjob || to_char(pd_fecpro, 'ddmmrrrr') ||
                       lpad(ln_ini, 3, '0'); ---ln_job
      lc_variable   := 'begin ' ||
                       '  pq_cr_reporte_fondos.sp_reporte_faemype_r3( TO_DATE(''' ||
                       lc_fecpro || ''',''RRRR.MM.DD''),' || ln_ini ||
                       ',''' || pn_usuario || ''' );' || ' End;';
    
      IF SYS.FN_BD_ISRAC = 'TRUE' THEN
        /*
        dbms_scheduler.create_job(job_name   => pi_vc2_nomjob,
                                  job_type   => 'PLSQL_BLOCK',
                                  job_action => lc_variable,
                                  start_date => sysdate, -- + 1 / (24 * 180),
                                  enabled    => true,
                                  auto_drop  => TRUE,
                                  comments   => 'Reporte_Fae_3 ' ||
                                                pn_usuario);
        begin
          dbms_scheduler.set_attribute(pi_vc2_nomjob, 'instance_id', 2);
        end;
        */
        dbms_job.submit(job_id,
                        what      => lc_variable,
                        next_date => sysdate,
                        interval  => null,
                        no_parse  => false,
                      --  instance  => 2, --24/10/2023
                        instance  => 1,
                        force     => false);
      
      Else
        /*
        dbms_scheduler.create_job(job_name   => pi_vc2_nomjob,
                                  job_type   => 'PLSQL_BLOCK',
                                  job_action => lc_variable,
                                  start_date => sysdate, -- + 1 / (24 * 180),
                                  enabled    => true,
                                  auto_drop  => TRUE,
                                  comments   => 'Reporte_Fae_3' ||
                                                pn_usuario);
        begin
          dbms_scheduler.set_attribute(pi_vc2_nomjob, 'instance_id', 1);
        end;
        */
        dbms_job.submit(job_id,
                        what      => lc_variable,
                        next_date => sysdate,
                        interval  => null,
                        no_parse  => false,
                        force     => false);
      End If;
      commit;
    
      /*
      select count(*)
        into x
        from dba_scheduler_jobs
       where owner = 'BANTPROD'
         AND JOB_NAME LIKE '%FAE_3%';
      while x = lb_njobs loop
        select count(*)
          into x
          from dba_scheduler_jobs
         where owner = 'BANTPROD'
           AND JOB_NAME LIKE '%FAE_3%';
      end loop;
      */
    
      SELECT count(*)
        INTO x
        FROM dba_jobs x
       WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
         AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
         AND x.what LIKE '%' || trim(pn_usuario) || '%';
    
      while x = lb_njobs loop
        --- Parametrizar              BANTPROD
        SELECT count(*)
          INTO x
          FROM dba_jobs x
         WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
           AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
           AND x.what LIKE '%' || trim(pn_usuario) || '%';
      
      end loop;
    
      INSERT INTO Tab_jobs
        (c_codage, n_Numer1, c_detjob)
      VALUES
        (lc_prefijo, ln_ini, lc_variable);
      COMMIT;
    
    end loop;
  
    ln_numjob := pq_cr_reporte_fondos.fn_cr_verifica_tarea2(lc_prefjob,
                                                            lc_hostname,
                                                            lc_paquete,
                                                            lc_proceso,
                                                            pn_usuario);
  
    While ln_numjob > 0 loop
      ln_numjob := pq_cr_reporte_fondos.fn_cr_verifica_tarea2(lc_prefjob,
                                                              lc_hostname,
                                                              lc_paquete,
                                                              lc_proceso,
                                                              pn_usuario);
    End loop;
  
    -- Registro de histórico   
    pq_cr_reporte_fondos.sp_guardar_historico(pn_usuario, 4, pd_fecpro);
  
  end sp_cr_sch_faemype_r3;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  

  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      
  procedure sp_cr_sch_fcrecer(pd_fecpro in date, pn_usuario in char) is
  
    ln_ini      number;
    lc_variable varchar2(4000);
    ln_job      number := 0;
    lc_fecpro   char(10);
    --ld_finmes   date;
    lc_hostname varchar2(64);
  
    pi_vc2_nomjob varchar2(65);
    lc_prefjob    varchar2(64);
    ln_numjob     number(9) := 0;
    lc_user       varchar(5);
    lc_prefijo    varchar(10);
    --lc_flag       varchar2(1);
    x             number;
    --lc_fecha      date;
    lb_njobs      number(3);
  
    lc_paquete    varchar2(50);
    lc_proceso    varchar2(50);
    job_id        number;
    lc_nomusr     varchar2(50);
    lc_pac_nombre varchar2(100);
  
    cursor sucursal is
      select *
        from fst001
       where pgcod = 1
         and sucurs < 800
      --or sucurs >= 900
      ;
  
  begin
  
    begin
      select TRIM(TP1DESC)
        INTO lc_nomusr
        from fst198
       where tp1cod = 1
         and tp1cod1 = 10847
         and tp1corr1 = 999; ---2019.07.22 guia de proceso para hostname
    end;
  
    begin
      select host_name into lc_hostname from v$instance;
    end;
  
    select x.tp1nro1
      into lb_njobs
      from fst198 x
     where x.TP1COD = 1
       and x.TP1COD1 = 11144
       and x.TP1CORR1 = 10
       and x.tp1corr2 = 2
       and x.tp1corr3 = 3;
  
    -- 1. Eliminación del registro por usuario
    delete from aqpb073 t where trim(t.aqpb073usur) = pn_usuario;
    commit;
  
    -- 2. Carga de tabla
    begin
      -- Call the procedure
      pq_cr_reporte_fondos.sp_sch_aqpb070a_carga(pd_fecpro  => pd_fecpro,
                                                 pn_usuario => pn_usuario,
                                                 pn_indi    => 3); -- CRECER
    end;
  
    -- 4. Carga de data
    lc_user       := substr(pn_usuario, 1, 5);
    lc_prefijo    := 'CREC1' || lc_user;
    lc_paquete    := 'pq_cr_reporte_fondos';
    lc_proceso    := 'sp_reporte_fcrecer_r3';
    lc_pac_nombre := trim(lc_paquete) || '.' || trim(lc_proceso);
  
    lc_fecpro := to_char(pd_fecpro, 'RRRR.MM.DD');
  
    ---carga diaria
    for i in sucursal loop
      ln_ini        := i.sucurs;
      ln_job        := ln_job + 1;
      lc_prefjob    := lc_prefijo;
      pi_vc2_nomjob := lc_prefjob || to_char(pd_fecpro, 'ddmmrrrr') ||
                       lpad(ln_ini, 3, '0'); ---ln_job
      lc_variable   := 'begin ' ||
                       '  pq_cr_reporte_fondos.sp_reporte_fcrecer_r3( TO_DATE(''' ||
                       lc_fecpro || ''',''RRRR.MM.DD''),' || ln_ini ||
                       ',''' || pn_usuario || ''' );' || ' End;';
    
      IF SYS.FN_BD_ISRAC = 'TRUE' THEN
        /*
        dbms_scheduler.create_job(job_name   => pi_vc2_nomjob,
                                  job_type   => 'PLSQL_BLOCK',
                                  job_action => lc_variable,
                                  start_date => sysdate, -- + 1 / (24 * 180),
                                  enabled    => true,
                                  auto_drop  => TRUE,
                                  comments   => 'Reporte_Crecer_3 ' ||
                                                pn_usuario);
        begin
          dbms_scheduler.set_attribute(pi_vc2_nomjob, 'instance_id', 2);
        end;
        */
      
        dbms_job.submit(job_id,
                        what      => lc_variable,
                        next_date => sysdate,
                        interval  => null,
                        no_parse  => false,
                      --  instance  => 2, -- 24/10/2023
                        instance  => 1,
                        force     => false);
      
      Else
        /*
        dbms_scheduler.create_job(job_name   => pi_vc2_nomjob,
                                  job_type   => 'PLSQL_BLOCK',
                                  job_action => lc_variable,
                                  start_date => sysdate, -- + 1 / (24 * 180),
                                  enabled    => true,
                                  auto_drop  => TRUE,
                                  comments   => 'Reporte_Crecer_3' ||
                                                pn_usuario);
        begin
          dbms_scheduler.set_attribute(pi_vc2_nomjob, 'instance_id', 1);
        end;
        */
        dbms_job.submit(job_id,
                        what      => lc_variable,
                        next_date => sysdate,
                        interval  => null,
                        no_parse  => false,
                        force     => false);
      End If;
      commit;
    
      /*
      select count(*)
        into x
        from dba_scheduler_jobs
       where owner = 'BANTPROD'
         AND JOB_NAME LIKE '%CREC1%';
      while x = lb_njobs loop
        select count(*)
          into x
          from dba_scheduler_jobs
         where owner = 'BANTPROD'
           AND JOB_NAME LIKE '%CREC1%';
      end loop;
      */
    
      SELECT count(*)
        INTO x
        FROM dba_jobs x
       WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
         AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
         AND x.what LIKE '%' || trim(pn_usuario) || '%';
    
      while x = lb_njobs loop
        --- Parametrizar              BANTPROD
        SELECT count(*)
          INTO x
          FROM dba_jobs x
         WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
           AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
           AND x.what LIKE '%' || trim(pn_usuario) || '%';
      
      end loop;
    
      INSERT INTO Tab_jobs
        (c_codage, n_Numer1, c_detjob)
      VALUES
        (lc_prefijo, ln_ini, lc_variable);
      COMMIT;
    
    end loop;
  
    ln_numjob := pq_cr_reporte_fondos.fn_cr_verifica_tarea2(lc_prefjob,
                                                            lc_hostname,
                                                            lc_paquete,
                                                            lc_proceso,
                                                            pn_usuario);
  
    While ln_numjob > 0 loop
      ln_numjob := pq_cr_reporte_fondos.fn_cr_verifica_tarea2(lc_prefjob,
                                                              lc_hostname,
                                                              lc_paquete,
                                                              lc_proceso,
                                                              pn_usuario);
    End loop;
  
    -- Registro de histórico   
    pq_cr_reporte_fondos.sp_guardar_historico(pn_usuario, 6, pd_fecpro);
  
  end sp_cr_sch_fcrecer;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   
  procedure sp_plantilla_reactiva(pn_cod   in number,
                                  pn_mod   in number,
                                  pn_suc   in number,
                                  pn_mda   in number,
                                  pn_pap   in number,
                                  pn_cta   in number,
                                  pn_ope   in number,
                                  pn_sbo   in number,
                                  pn_top   in number,
                                  pn_fecha in date,
                                  
                                  pn_fsub  out aqpb065b.aqpb065bfsub%type,
                                  pn_nsub  out aqpb065b.aqpb065bnsub%type,
                                  pn_ncer  out aqpb065b.aqpb065bncer%type,
                                  pn_ccob  out aqpb065b.aqpb065bccob%type,
                                  pn_nact  out aqpb065b.aqpb065bnact%type,
                                  pn_tdoc  out aqpb065b.aqpb065btdoc%type,
                                  pn_ndoc  out aqpb065b.aqpb065bndoc%type,
                                  pn_pcob  out aqpb065b.aqpb065bpcob%type,
                                  pn_vpro  out aqpb065b.aqpb065bvpro%type,
                                  pn_code  out aqpb065b.aqpb065bcode%type,
                                  pn_nop   out aqpb065b.aqpb065bnop%type,
                                  pn_tneg  out aqpb065b.aqpb065btneg%type,
                                  pn_ntra  out aqpb065b.aqpb065bntra%type,
                                  pn_nsec  out aqpb065b.aqpb065bnsec%type,
                                  pn_ttit  out aqpb065b.aqpb065bttit%type,
                                  pn_temp  out aqpb065b.aqpb065btemp%type,
                                  pn_gesp  out aqpb065b.aqpb065bgesp%type,
                                  pn_ggen  out aqpb065b.aqpb065bggen%type,
                                  pn_ldoc  out aqpb065b.aqpb065bldoc%type,
                                  pn_sapr  out aqpb065b.aqpb065bsapr%type,
                                  pn_fbcr  out aqpb065b.aqpb065bfbcr%type,
                                  pn_ppzo  out aqpb065b.aqpb065bppzo%type,
                                  pn_pgrac out aqpb065b.aqpb065bpgra%type,
                                  pn_ciuu  out aqpb065b.aqpb065bciiuori%type,
                                  pn_dciu  out aqpb065b.aqpb065bactnomori%type,
                                  pn_cren  out aqpb065b.aqpb065bcren%type,
                                  pn_cobr  out aqpb065b.aqpb065bcobr%type,
                                  pn_chon  out aqpb065b.aqpb065bchon%type) is
  
  begin
  
    begin
    
      select
      
       g.aqpb065bfsub,
       g.aqpb065bnsub,
       g.aqpb065bncer,
       g.aqpb065bccob,
       g.aqpb065bnact,
       g.aqpb065btdoc,
       g.aqpb065bndoc,
       g.aqpb065bpcob,
       g.aqpb065bvpro,
       g.aqpb065bcode,
       g.aqpb065bnop,
       g.aqpb065btneg,
       g.aqpb065bntra,
       g.aqpb065bnsec,
       g.aqpb065bttit,
       g.aqpb065btemp,
       g.aqpb065bgesp,
       g.aqpb065bggen,
       g.aqpb065bldoc,
       g.aqpb065bsapr,
       g.aqpb065bfbcr,
       g.aqpb065bppzo,
       g.aqpb065bpgra,
       g.aqpb065bciiuori,
       g.aqpb065bactnomori,
       g.aqpb065bcren,
       g.aqpb065bcobr,
       g.aqpb065bchon
        into pn_fsub,
             pn_nsub,
             pn_ncer,
             pn_ccob,
             pn_nact,
             pn_tdoc,
             pn_ndoc,
             pn_pcob,
             pn_vpro,
             pn_code,
             pn_nop,
             pn_tneg,
             pn_ntra,
             pn_nsec,
             pn_ttit,
             pn_temp,
             pn_gesp,
             pn_ggen,
             pn_ldoc,
             pn_sapr,
             pn_fbcr,
             pn_ppzo,
             pn_pgrac,
             pn_ciuu,
             pn_dciu,
             pn_cren,
             pn_cobr,
             pn_chon
      
        from (select t.aqpb065bfsub,
                     t.aqpb065bnsub,
                     t.aqpb065bncer,
                     t.aqpb065bccob,
                     t.aqpb065bnact,
                     t.aqpb065btdoc,
                     t.aqpb065bndoc,
                     t.aqpb065bpcob,
                     t.aqpb065bvpro,
                     t.aqpb065bcode,
                     t.aqpb065bnop,
                     t.aqpb065btneg,
                     t.aqpb065bntra,
                     t.aqpb065bnsec,
                     t.aqpb065bttit,
                     t.aqpb065btemp,
                     t.aqpb065bgesp,
                     t.aqpb065bggen,
                     t.aqpb065bldoc,
                     t.aqpb065bsapr,
                     t.aqpb065bfbcr,
                     t.aqpb065bppzo,
                     t.aqpb065bpgra,
                     t.aqpb065bciiuori,
                     t.aqpb065bactnomori,
                     t.aqpb065bcren,
                     t.aqpb065bcobr,
                     t.aqpb065bchon
                from aqpb065b t
               where t.aqpb065bcod = pn_cod
                 and t.aqpb065bmod = pn_mod
                    --and t.aqpb065bsuc = pn_suc  -- jrodriguej 28.06.2021
                          and t.aqpb065bmod in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
                 and t.aqpb065bmda = pn_mda
                 and t.aqpb065bpap = pn_pap
                 and t.aqpb065bcta = pn_cta
                 and t.aqpb065bope = pn_ope
                    --and t.aqpb065bsbo = pn_sbo
                    --and t.aqpb065btop = pn_top
                 and t.aqpb065bfec <= pn_fecha
                 and t.aqpb065best <> 'D'
               order by t.aqpb065bfec desc, t.aqpb065bcor desc) g
       where rownum = 1;
    
    exception
      when others then
        pn_fsub  := null;
        pn_nsub  := null;
        pn_ncer  := null;
        pn_ccob  := null;
        pn_nact  := null;
        pn_tdoc  := null;
        pn_ndoc  := null;
        pn_pcob  := null;
        pn_vpro  := null;
        pn_code  := null;
        pn_nop   := null;
        pn_tneg  := null;
        pn_ntra  := null;
        pn_nsec  := null;
        pn_ttit  := null;
        pn_temp  := null;
        pn_gesp  := null;
        pn_ggen  := null;
        pn_ldoc  := null;
        pn_sapr  := null;
        pn_fbcr  := null;
        pn_ppzo  := null;
        pn_pgrac := null;
        pn_ciuu  := null;
        pn_dciu  := null;
        pn_cren := null;
        pn_cobr := null;
        pn_chon := null;
    end;
  
  end sp_plantilla_reactiva;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    
  procedure sp_plantilla_faemype_r1(pn_cod   in number,
                                    pn_mod   in number,
                                    pn_suc   in number,
                                    pn_mda   in number,
                                    pn_pap   in number,
                                    pn_cta   in number,
                                    pn_ope   in number,
                                    pn_sbo   in number,
                                    pn_top   in number,
                                    pn_fecha in date,
                                    pn_csap  out aqpb067b.aqpb067bcsap%type,
                                    pn_fdes  out aqpb067b.aqpb067bfdes%type,
                                    pn_mon   out aqpb067b.aqpb067bmon%type,
                                    pn_ncuo  out aqpb067b.aqpb067bncuo%type,
                                    pn_peri  out aqpb067b.aqpb067bperi%type,
                                    pn_pcob  out aqpb067b.aqpb067bpcob%type,
                                    pn_fini  out aqpb067b.aqpb067bfini%type,
                                    pn_ffin  out aqpb067b.aqpb067bffin%type,
                                    pn_ciuu  out aqpb067b.aqpb067bciiuori%type,
                                    pn_dciu  out aqpb067b.aqpb067bactnomori%type) is
  
  begin
  
    begin
    
      select g.aqpb067bcsap,
             g.aqpb067bfdes,
             g.aqpb067bmon,
             g.aqpb067bncuo,
             g.aqpb067bperi,
             g.aqpb067bpcob,
             g.aqpb067bfini,
             g.aqpb067bffin,
             g.aqpb067bciiuori,
             g.aqpb067bactnomori
        into pn_csap,
             pn_fdes,
             pn_mon,
             pn_ncuo,
             pn_peri,
             pn_pcob,
             pn_fini,
             pn_ffin,
             pn_ciuu,
             pn_dciu
        from (select t.aqpb067bcsap,
                     t.aqpb067bfdes,
                     t.aqpb067bmon,
                     t.aqpb067bncuo,
                     t.aqpb067bperi,
                     t.aqpb067bpcob,
                     t.aqpb067bfini,
                     t.aqpb067bffin,
                     t.aqpb067bciiuori,
                     t.aqpb067bactnomori
                from aqpb067b t
               where t.aqpb067bcod = pn_cod
                 and t.aqpb067bmod = pn_mod
                    --and t.aqpb067bsuc = pn_suc -- jrodriguej 28.06.2021
                       and t.aqpb067bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
                 and t.aqpb067bmda = pn_mda
                 and t.aqpb067bpap = pn_pap
                 and t.aqpb067bcta = pn_cta
                 and t.aqpb067bope = pn_ope
                    --and t.aqpb067bsbo = pn_sbo
                    --and t.aqpb067btop = pn_top
                 and t.aqpb067bfec <= pn_fecha
                 and t.aqpb067best <> 'D'
               order by t.aqpb067bfec desc, t.aqpb067bcor desc) g
       where rownum = 1;
    
    exception
      when others then
        pn_csap := null;
        pn_fdes := null;
        pn_mon  := null;
        pn_ncuo := null;
        pn_peri := null;
        pn_pcob := null;
        pn_fini := null;
        pn_ffin := null;
        pn_ciuu := null;
        pn_dciu := null;
      
    end;
  
  end sp_plantilla_faemype_r1;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    
  procedure sp_plantilla_faemype_v2(pn_cod   in number,
                                    pn_mod   in number,
                                    pn_suc   in number,
                                    pn_mda   in number,
                                    pn_pap   in number,
                                    pn_cta   in number,
                                    pn_ope   in number,
                                    pn_sbo   in number,
                                    pn_top   in number,
                                    pn_fecha in date,
                                    pn_csap  out aqpb067b.aqpb067bcsap%type,
                                    pn_fdes  out aqpb067b.aqpb067bfdes%type,
                                    pn_mon   out aqpb067b.aqpb067bmon%type,
                                    pn_ncuo  out aqpb067b.aqpb067bncuo%type,
                                    pn_peri  out aqpb067b.aqpb067bperi%type,
                                    pn_pcob  out aqpb067b.aqpb067bpcob%type,
                                    pn_fini  out aqpb067b.aqpb067bfini%type,
                                    pn_ffin  out aqpb067b.aqpb067bffin%type,
                                    pn_ciuu  out aqpb067b.aqpb067bciiuori%type,
                                    pn_dciu  out aqpb067b.aqpb067bactnomori%type,
                                    pn_ncer  out aqpb067b.aqpb067bncer%type, --Numero de certificado
                                    pn_ccob  out aqpb067b.aqpb067bccob%type, --Codigo de Cobertura
                                    pn_cren  out aqpb067b.aqpb067bcren%type, --Certificado de renovacion
                                    pn_cobr  out aqpb067b.aqpb067bcobr%type, --Cobertura de renovacion
                                    pn_chon  out aqpb067b.aqpb067bchon%type, --Certificado de honra
                                    pn_codi  out aqpb067b.aqpb067bcodi%type, --Codigo de solicitud COFIDE
                                    pn_crec  out aqpb067b.aqpb067bcrec%type) is
  
  begin
  
    begin
    
      select g.aqpb067bcsap,
             g.aqpb067bfdes,
             g.aqpb067bmon,
             g.aqpb067bncuo,
             g.aqpb067bperi,
             g.aqpb067bpcob,
             g.aqpb067bfini,
             g.aqpb067bffin,
             g.aqpb067bciiuori,
             g.aqpb067bactnomori,
             g.Aqpb067bncer,
             g.Aqpb067bccob,
             g.Aqpb067bcren,
             g.Aqpb067bcobr,
             g.Aqpb067bchon,
             g.Aqpb067bcodi,
             g.Aqpb067bcrec
        into pn_csap,
             pn_fdes,
             pn_mon,
             pn_ncuo,
             pn_peri,
             pn_pcob,
             pn_fini,
             pn_ffin,
             pn_ciuu,
             pn_dciu,
             pn_ncer,
             pn_ccob,
             pn_cren,
             pn_cobr,
             pn_chon,
             pn_codi,
             pn_crec
        from (select t.aqpb067bcsap,
                     t.aqpb067bfdes,
                     t.aqpb067bmon,
                     t.aqpb067bncuo,
                     t.aqpb067bperi,
                     t.aqpb067bpcob,
                     t.aqpb067bfini,
                     t.aqpb067bffin,
                     t.aqpb067bciiuori,
                     t.aqpb067bactnomori,
                     t.Aqpb067bncer,
                     t.Aqpb067bccob,
                     t.Aqpb067bcren,
                     t.Aqpb067bcobr,
                     t.Aqpb067bchon,
                     t.Aqpb067bcodi,
                     t.Aqpb067bcrec
                from aqpb067b t
               where t.aqpb067bcod = pn_cod
                 --and t.aqpb067bmod = pn_mod
                    --and t.aqpb067bsuc = pn_suc -- jrodriguej 28.06.2021
                         and t.aqpb067bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
                 and t.aqpb067bmda = pn_mda
                 and t.aqpb067bpap = pn_pap
                 and t.aqpb067bcta = pn_cta
                 and t.aqpb067bope = pn_ope
                    --and t.aqpb067bsbo = pn_sbo
                    --and t.aqpb067btop = pn_top
                 and t.aqpb067bfec <= pn_fecha
                 and t.aqpb067best <> 'D'
               order by t.aqpb067bfec desc, t.aqpb067bcor desc) g
       where rownum = 1;
    
    exception
      when others then
        pn_csap := null;
        pn_fdes := null;
        pn_mon  := null;
        pn_ncuo := null;
        pn_peri := null;
        pn_pcob := null;
        pn_fini := null;
        pn_ffin := null;
        pn_ciuu := null;
        pn_dciu := null;
        pn_ncer := null;
        pn_ccob := null;
        pn_cren := null;
        pn_cobr := null;
        pn_chon := null;
        pn_codi := null;
        pn_crec := null;
    end;
  
  end sp_plantilla_faemype_v2;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  procedure sp_plantilla_fcrecer(pn_cod   in number,
                                 pn_mod   in number,
                                 pn_suc   in number,
                                 pn_mda   in number,
                                 pn_pap   in number,
                                 pn_cta   in number,
                                 pn_ope   in number,
                                 pn_sbo   in number,
                                 pn_top   in number,
                                 pn_fecha in date,
                                 pn_tdoc  out aqpb073b.aqpb073btdoc%type,
                                 pn_ndoc  out aqpb073b.aqpb073bndoc%type,
                                 pn_esf   out aqpb073b.aqpb073besf%type,
                                 pn_ccob  out aqpb073b.aqpb073bccob%type,
                                 pn_tnro  out aqpb073b.aqpb073btnro%type,
                                 pn_mtoe  out aqpb073b.aqpb073bmtoe%type,
                                 pn_pcob  out aqpb073b.aqpb073bpcob%type,
                                 pn_ciuu  out aqpb073b.aqpb073bciiuori%type,
                                 pn_dciu  out aqpb073b.aqpb073bactnomori%type,
                                 pn_nven  out aqpb073b.aqpb073bnven%type) is
  
  begin
  
    begin
    
      select g.aqpb073btdoc,
             g.aqpb073bndoc,
             g.aqpb073besf,
             g.aqpb073bccob,
             g.aqpb073btnro,
             g.aqpb073bmtoe,
             g.aqpb073bpcob,
             g.aqpb073bciiuori,
             g.aqpb073bactnomori,
             g.aqpb073bnven
        into pn_tdoc,
             pn_ndoc,
             pn_esf,
             pn_ccob,
             pn_tnro,
             pn_mtoe,
             pn_pcob,
             pn_ciuu,
             pn_dciu,
             pn_nven
        from (select t.aqpb073btdoc,
                     t.aqpb073bndoc,
                     t.aqpb073besf,
                     t.aqpb073bccob,
                     t.aqpb073btnro,
                     t.aqpb073bmtoe,
                     t.aqpb073bpcob,
                     t.aqpb073bciiuori,
                     t.aqpb073bactnomori,
                     t.aqpb073bnven
                from aqpb073b t
               where t.aqpb073bcod = pn_cod
                 and t.aqpb073bmod = pn_mod
                    --and t.aqpb073bsuc = pn_suc -- jrodriguej 28.06.2021
                         and t.aqpb073bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
                 and t.aqpb073bmda = pn_mda
                 and t.aqpb073bpap = pn_pap
                 and t.aqpb073bcta = pn_cta
                 and t.aqpb073bope = pn_ope
                    --and t.aqpb073bsbo = pn_sbo
                    --and t.aqpb073btop = pn_top
                 and t.aqpb073bfec <= pn_fecha
                 and t.aqpb073best <> 'D'
               order by t.aqpb073bfec desc, t.aqpb073bcor desc) g
       where rownum = 1;
    
    exception
      when others then
        pn_tdoc := null;
        pn_ndoc := null;
        pn_esf  := null;
        pn_ccob := null;
        pn_tnro := null;
        pn_mtoe := null;
        pn_pcob := null;
        pn_ciuu := null;
        pn_dciu := null;
        pn_nven := null;
    end;
  
  end sp_plantilla_fcrecer;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  procedure sp_plantilla_fcrecer_v2(pn_cod   in number,
                                 pn_mod   in number,
                                 pn_suc   in number,
                                 pn_mda   in number,
                                 pn_pap   in number,
                                 pn_cta   in number,
                                 pn_ope   in number,
                                 pn_sbo   in number,
                                 pn_top   in number,
                                 pn_fecha in date,
                                 pn_tdoc  out aqpb073b.aqpb073btdoc%type,
                                 pn_ndoc  out aqpb073b.aqpb073bndoc%type,
                                 pn_esf   out aqpb073b.aqpb073besf%type,
                                 pn_ccob  out aqpb073b.aqpb073bccob%type,
                                 pn_tnro  out aqpb073b.aqpb073btnro%type,
                                 pn_mtoe  out aqpb073b.aqpb073bmtoe%type,
                                 pn_pcob  out aqpb073b.aqpb073bpcob%type,
                                 pn_ciuu  out aqpb073b.aqpb073bciiuori%type,
                                 pn_dciu  out aqpb073b.aqpb073bactnomori%type,
                                 pn_nven  out aqpb073b.aqpb073bnven%type,
                                 pn_ncer  out aqpb073b.aqpb073bncer%type,
                                 pn_chon  out aqpb073b.aqpb073bchon%type,
                                 pn_ccob2 out aqpb073b.aqpb073bccob2%type,
                                 pn_conhon out aqpb073b.aqpb073bconhon%type) is
  
  begin
  
    begin
    
      select g.aqpb073btdoc,
             g.aqpb073bndoc,
             g.aqpb073besf,
             g.aqpb073bccob,
             g.aqpb073btnro,
             g.aqpb073bmtoe,
             g.aqpb073bpcob,
             g.aqpb073bciiuori,
             g.aqpb073bactnomori,
             g.aqpb073bnven,
             g.aqpb073bncer, 
             g.aqpb073bchon,
             g.aqpb073bccob2,
             g.aqpb073bconhon
        into pn_tdoc,
             pn_ndoc,
             pn_esf,
             pn_ccob,
             pn_tnro,
             pn_mtoe,
             pn_pcob,
             pn_ciuu,
             pn_dciu,
             pn_nven,
             pn_ncer,
             pn_chon,
             pn_ccob2,             
             pn_conhon
        from (select t.aqpb073btdoc,
                     t.aqpb073bndoc,
                     t.aqpb073besf,
                     t.aqpb073bccob,
                     t.aqpb073btnro,
                     t.aqpb073bmtoe,
                     t.aqpb073bpcob,
                     t.aqpb073bciiuori,
                     t.aqpb073bactnomori,
                     t.aqpb073bnven,
                     t.aqpb073bncer, 
                     t.aqpb073bchon,
                     t.aqpb073bccob2,
                     t.aqpb073bconhon
                from aqpb073b t
               where t.aqpb073bcod = pn_cod
                 --and t.aqpb073bmod = pn_mod
                    --and t.aqpb073bsuc = pn_suc -- jrodriguej 28.06.2021
                          and t.aqpb073bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales   
                 and t.aqpb073bmda = pn_mda
                 and t.aqpb073bpap = pn_pap
                 and t.aqpb073bcta = pn_cta
                 and t.aqpb073bope = pn_ope
                    --and t.aqpb073bsbo = pn_sbo
                    --and t.aqpb073btop = pn_top
                 and t.aqpb073bfec <= pn_fecha
                 and t.aqpb073best <> 'D'
               order by t.aqpb073bfec desc, t.aqpb073bcor desc) g
       where rownum = 1;
    
    exception
      when others then
        pn_tdoc := null;
        pn_ndoc := null;
        pn_esf  := null;
        pn_ccob := null;
        pn_tnro := null;
        pn_mtoe := null;
        pn_pcob := null;
        pn_ciuu := null;
        pn_dciu := null;
        pn_nven := null;
        pn_ncer := null;
        pn_chon := null;
        pn_ccob2 := null;
        pn_conhon := null;
    end;
  
  end sp_plantilla_fcrecer_v2;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   
  procedure sp_obtener_calf_caja(pn_cod   in number,
                                 pn_mod   in number,
                                 pn_suc   in number,
                                 pn_mda   in number,
                                 pn_pap   in number,
                                 pn_cta   in number,
                                 pn_ope   in number,
                                 pn_sbo   in number,
                                 pn_top   in number,
                                 pn_est   in number,
                                 pn_fecha in date,
                                 
                                 pn_calif0a out aqpb067.aqpb067cnoma%type,
                                 pn_calif1a out aqpb067.aqpb067ccppa%type,
                                 pn_calif2a out aqpb067.aqpb067cdefa%type,
                                 pn_calif3a out aqpb067.aqpb067cduda%type,
                                 pn_calif4a out aqpb067.aqpb067cpera%type,
                                 pn_deccaj  out date) is
  
    lc_dcla number(14, 2);
    lc_tcla number(4);
    lc_ncla varchar2(10);
  
    lc_distrib   char(15);
    lc_fecha_fin date;
    lc_fecha_pro date;
  
  begin
  
    begin
    
      -- 0: NORMAL
      -- 1: CPP
      -- 2: DEFICIENTE
      -- 3: DUDOSO
      -- 4: PÉRDIDA
    
      lc_fecha_pro := last_day(add_months(trunc(pn_fecha), -1));
    
      select f.catcateg
        into lc_distrib
        from fsd212 f
       where f.catcta = pn_cta
         and f.catfchdes = lc_fecha_pro
         and f.catcod = 4;
    
      lc_tcla := to_number(substr(lc_distrib, 1, 1));
    
      case
        when lc_tcla = 0 then
          -- 0: Normal
          --lc_ncla := 'NORMAL';
          pn_calif0a := 100;
          pn_calif1a := 0;
          pn_calif2a := 0;
          pn_calif3a := 0;
          pn_calif4a := 0;
        
        when lc_tcla = 1 then
          -- 1: CPP
          --lc_ncla := 'CPP';
          pn_calif0a := 0;
          pn_calif1a := 100;
          pn_calif2a := 0;
          pn_calif3a := 0;
          pn_calif4a := 0;
        when lc_tcla = 2 then
          -- 2: Deficiente
          --lc_ncla := 'Deficiente';
          pn_calif0a := 0;
          pn_calif1a := 0;
          pn_calif2a := 100;
          pn_calif3a := 0;
          pn_calif4a := 0;
        when lc_tcla = 3 then
          -- 3: Dudoso
          --lc_ncla := 'Dudoso';
          pn_calif0a := 0;
          pn_calif1a := 0;
          pn_calif2a := 0;
          pn_calif3a := 100;
          pn_calif4a := 0;
        when lc_tcla = 4 then
          -- 4: Pérdida   
          --lc_ncla := 'PÉRDIDA';
          pn_calif0a := 0;
          pn_calif1a := 0;
          pn_calif2a := 0;
          pn_calif3a := 0;
          pn_calif4a := 100;
      end case;
    
    exception
      when others then
      
        pn_calif0a := 100;
        pn_calif1a := 0;
        pn_calif2a := 0;
        pn_calif3a := 0;
        pn_calif4a := 0;
      
    end;
  
    pn_deccaj := lc_fecha_pro;
    --pn_dcla := lc_dcla;
    --pn_ncla := lc_ncla;
  
  end sp_obtener_calf_caja;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  procedure sp_sch_aqpb070a_carga(pd_fecpro  in date,
                                  pn_usuario in char,
                                  pn_indi    in number) is
    --2019.07.22 DCASTRO se implementaron schedulers para optimizar la carga, creacion guia de proceso para hostname
  
    ln_ini        number;
    lc_variable   varchar2(1000);
    ln_job        number := 0;
    lc_fecpro     char(10);
    ld_finmes     date;
    lc_hostname   varchar2(64);
    pi_vc2_nomjob varchar2(65);
    lc_prefjob    varchar2(64);
    ln_numjob     number(9) := 0;
    lc_fecha_sis  date;
    lc_prefijo    varchar(10);
    lc_user       varchar(5);
    job_id        number;
    lc_paquete    varchar2(50);
    lc_proceso    varchar2(50);
    lc_nomusr     varchar2(50);
    lb_njobs      number(9);
    lc_pac_nombre varchar2(100);
    x             number;
    
    cursor sucursal is
      select *
        from fst001
       where pgcod = 1
         and sucurs < 800
      --or sucurs >= 900
      ;
  
  begin
  
    begin
      select TRIM(TP1DESC)
        INTO lc_nomusr
        from fst198
       where tp1cod = 1
         and tp1cod1 = 10847
         and tp1corr1 = 999; ---2019.07.22 guia de proceso para hostname
    end;
    
    select x.tp1nro1
      into lb_njobs
      from fst198 x
     where x.TP1COD = 1
       and x.TP1COD1 = 11144
       and x.TP1CORR1 = 10
       and x.tp1corr2 = 2
       and x.tp1corr3 = 3;
  
    begin
      select host_name into lc_hostname from v$instance;
    end;
  
    begin
      select host_name into lc_hostname from v$instance;
    end;
    lc_fecpro := to_char(pd_fecpro, 'RRRR.MM.DD');
  
    --ld_finmes := last_Day(pd_fecpro);
  
    select x.pgfape into lc_fecha_sis from fst017 x where x.pgcod = 1;
  
    --antes de la carga eliminar DATA
    --delete from JAQL600 where JAQL600FPRO = pd_fecpro;
    --commit;
  
    if pd_fecpro <> lc_fecha_sis then
    
      delete from aqpb070a x
       where trim(x.aqpb070ausur) = trim(pn_usuario)
      --and x.AQPB070Atabla = 'REACTIVA'
      --and x.aqpb070aemp = 1
      ;
      --and x.aqpb070asuc = pc_sucurs;
      commit;
    
      ---carga diaria
      --- pn_indi
      case pn_indi
        when 1 then
          --- REACTIVA
          --null;
        
          -- Acondicionamiento nombre
          lc_user    := substr(pn_usuario, 1, 5);
          lc_prefijo := 'REACT' || lc_user;
          lc_paquete := 'pq_cr_reporte_fondos';
          lc_proceso := 'sp_cr_carga_temp_reac';
          lc_pac_nombre := trim(lc_paquete) || '.' || trim(lc_proceso);
          for i in sucursal loop
            ln_ini        := i.sucurs;
            ln_job        := ln_job + 1;
            lc_prefjob    := lc_prefijo;
            pi_vc2_nomjob := lc_prefjob || to_char(pd_fecpro, 'ddmmrrrr') ||
                             lpad(ln_ini, 3, '0'); ---ln_job
          
            lc_variable := 'begin ' ||
                           '  pq_cr_reporte_fondos.sp_cr_carga_temp_reac(''' ||
                           pn_usuario || ''',
                       ' || ln_ini ||
                           ',TO_DATE(''' || lc_fecpro ||
                           ''',''RRRR.MM.DD'') );' || ' End;';
          
            IF SYS.FN_BD_ISRAC = 'TRUE' THEN
            
              /*
              dbms_scheduler.create_job(job_name   => pi_vc2_nomjob,
                                        job_type   => 'PLSQL_BLOCK',
                                        job_action => lc_variable,
                                        start_date => sysdate, -- + 1 / (24 * 180),
                                        enabled    => true,
                                        auto_drop  => TRUE,
                                        comments   => 'Registro_Temp_065 ' ||
                                                      pn_usuario);
              begin
                dbms_scheduler.set_attribute(pi_vc2_nomjob,
                                             'instance_id',
                                             2);
              end;
              */
              dbms_job.submit(job_id,
                              what      => lc_variable,
                              next_date => sysdate,
                              interval  => null,
                              no_parse  => false,
                            --  instance  => 2, -- 16/01/2024
                              instance  => 1,
                              force     => false);
            
            Else
            
              dbms_job.submit(job_id,
                              what      => lc_variable,
                              next_date => sysdate,
                              interval  => null,
                              no_parse  => false,
                              force     => false);
            
              /*
              dbms_scheduler.create_job(job_name   => pi_vc2_nomjob,
                                        job_type   => 'PLSQL_BLOCK',
                                        job_action => lc_variable,
                                        start_date => sysdate, -- + 1 / (24 * 180),
                                        enabled    => true,
                                        auto_drop  => TRUE,
                                        comments   => 'Registro_Temp_065' ||
                                                      pn_usuario);
              begin
                dbms_scheduler.set_attribute(pi_vc2_nomjob,
                                             'instance_id',
                                             1);
              end;
              */
            
            End If;
            commit;
            SELECT count(*)
              INTO x
              FROM dba_jobs x
             WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
               AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
               AND x.what LIKE '%' || trim(pn_usuario) || '%';
          
            while x = lb_njobs loop
              --- Parametrizar              BANTPROD
              SELECT count(*)
                INTO x
                FROM dba_jobs x
               WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
                 AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
                 AND x.what LIKE '%' || trim(pn_usuario) || '%';
            
            end loop;
          
            INSERT INTO Tab_jobs
              (c_codage, n_Numer1, c_detjob)
            VALUES
              ('TEMP_065', ln_ini, lc_variable);
            COMMIT;
          
          end loop;
        
        when 2 then
          --- FAE
          --null;
        
          -- Acondicionamiento nombre
          lc_user    := substr(pn_usuario, 1, 5);
          lc_prefijo := 'FAE_T' || lc_user;
          lc_paquete := 'pq_cr_reporte_fondos';
          lc_proceso := 'sp_cr_carga_temp_fae';
          lc_pac_nombre := trim(lc_paquete) || '.' || trim(lc_proceso);
          
          for i in sucursal loop
            ln_ini        := i.sucurs;
            ln_job        := ln_job + 1;
            lc_prefjob    := lc_prefijo;
            pi_vc2_nomjob := lc_prefjob || to_char(pd_fecpro, 'ddmmrrrr') ||
                             lpad(ln_ini, 3, '0'); ---ln_job
          
            lc_variable := 'begin ' ||
                           '  pq_cr_reporte_fondos.sp_cr_carga_temp_fae(''' ||
                           pn_usuario || ''',
                       ' || ln_ini ||
                           ',TO_DATE(''' || lc_fecpro ||
                           ''',''RRRR.MM.DD'') );' || ' End;';
          
            IF SYS.FN_BD_ISRAC = 'TRUE' THEN
              /*
              dbms_scheduler.create_job(job_name   => pi_vc2_nomjob,
                                        job_type   => 'PLSQL_BLOCK',
                                        job_action => lc_variable,
                                        start_date => sysdate, -- + 1 / (24 * 180),
                                        enabled    => true,
                                        auto_drop  => TRUE,
                                        comments   => 'Registro_Temp_067 ' ||
                                                      pn_usuario);
              begin
                dbms_scheduler.set_attribute(pi_vc2_nomjob,
                                             'instance_id',
                                             2);
              end;
              */
              dbms_job.submit(job_id,
                              what      => lc_variable,
                              next_date => sysdate,
                              interval  => null,
                              no_parse  => false,
                              --instance  => 2, --16/01/2024
                              instance  => 1,
                              force     => false);
            
            Else
              /*
              dbms_scheduler.create_job(job_name   => pi_vc2_nomjob,
                                        job_type   => 'PLSQL_BLOCK',
                                        job_action => lc_variable,
                                        start_date => sysdate, -- + 1 / (24 * 180),
                                        enabled    => true,
                                        auto_drop  => TRUE,
                                        comments   => 'Registro_Temp_067' ||
                                                      pn_usuario);
              begin
                dbms_scheduler.set_attribute(pi_vc2_nomjob,
                                             'instance_id',
                                             1);
              end;
              */
              dbms_job.submit(job_id,
                              what      => lc_variable,
                              next_date => sysdate,
                              interval  => null,
                              no_parse  => false,
                              force     => false);
            End If;
            commit;
          
            SELECT count(*)
              INTO x
              FROM dba_jobs x
             WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
               AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
               AND x.what LIKE '%' || trim(pn_usuario) || '%';
          
            while x = lb_njobs loop
              --- Parametrizar              BANTPROD
              SELECT count(*)
                INTO x
                FROM dba_jobs x
               WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
                 AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
                 AND x.what LIKE '%' || trim(pn_usuario) || '%';
            
            end loop;
          
            INSERT INTO Tab_jobs
              (c_codage, n_Numer1, c_detjob)
            VALUES
              ('TEMP_067', ln_ini, lc_variable);
            COMMIT;
          
          end loop;
        
        when 3 then
          --- CRECER
        
          -- Acondicionamiento nombre
          lc_user    := substr(pn_usuario, 1, 5);
          lc_prefijo := 'CRECT' || lc_user;
          lc_paquete := 'pq_cr_reporte_fondos';
          lc_proceso := 'sp_cr_carga_temp_crec';
          lc_pac_nombre := trim(lc_paquete) || '.' || trim(lc_proceso);
          
          for i in sucursal loop
            ln_ini        := i.sucurs;
            ln_job        := ln_job + 1;
            lc_prefjob    := lc_prefijo;
            pi_vc2_nomjob := lc_prefjob || to_char(pd_fecpro, 'ddmmrrrr') ||
                             lpad(ln_ini, 3, '0'); ---ln_job
          
            lc_variable := 'begin ' ||
                           '  pq_cr_reporte_fondos.sp_cr_carga_temp_crec(''' ||
                           pn_usuario || ''',
                       ' || ln_ini ||
                           ',TO_DATE(''' || lc_fecpro ||
                           ''',''RRRR.MM.DD'') );' || ' End;';
          
            IF SYS.FN_BD_ISRAC = 'TRUE' THEN
              /*
              dbms_scheduler.create_job(job_name   => pi_vc2_nomjob,
                                        job_type   => 'PLSQL_BLOCK',
                                        job_action => lc_variable,
                                        start_date => sysdate, -- + 1 / (24 * 180),
                                        enabled    => true,
                                        auto_drop  => TRUE,
                                        comments   => 'Registro_Temp_073 ' ||
                                                      pn_usuario);
              begin
                dbms_scheduler.set_attribute(pi_vc2_nomjob,
                                             'instance_id',
                                             2);
              end;
              */
              dbms_job.submit(job_id,
                              what      => lc_variable,
                              next_date => sysdate,
                              interval  => null,
                              no_parse  => false,
                              --instance  => 2, 16/01/2024
                              instance  => 1,
                              force     => false);
            
            Else
              /*
              dbms_scheduler.create_job(job_name   => pi_vc2_nomjob,
                                        job_type   => 'PLSQL_BLOCK',
                                        job_action => lc_variable,
                                        start_date => sysdate, -- + 1 / (24 * 180),
                                        enabled    => true,
                                        auto_drop  => TRUE,
                                        comments   => 'Registro_Temp_073' ||
                                                      pn_usuario);
              begin
                dbms_scheduler.set_attribute(pi_vc2_nomjob,
                                             'instance_id',
                                             1);
              end;
              */
            
              dbms_job.submit(job_id,
                              what      => lc_variable,
                              next_date => sysdate,
                              interval  => null,
                              no_parse  => false,
                              force     => false);
            
            End If;
            commit;
          
            SELECT count(*)
              INTO x
              FROM dba_jobs x
             WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
               AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
               AND x.what LIKE '%' || trim(pn_usuario) || '%';
          
            while x = lb_njobs loop
              --- Parametrizar              BANTPROD
              SELECT count(*)
                INTO x
                FROM dba_jobs x
               WHERE x.schema_user = lc_nomusr -- 'BANTPROD'
                 AND x.what LIKE '%' || trim(lc_pac_nombre) || '%'
                 AND x.what LIKE '%' || trim(pn_usuario) || '%';
            
            end loop;
            
            INSERT INTO Tab_jobs
              (c_codage, n_Numer1, c_detjob)
            VALUES
              ('TEMP_073', ln_ini, lc_variable);
            COMMIT;
          
          end loop;
        
      end case;
    
      ln_numjob := fn_cr_verifica_tarea2(lc_prefjob,
                                         lc_hostname,
                                         lc_paquete,
                                         lc_proceso,
                                         pn_usuario);
    
      While ln_numjob > 0 loop
        ln_numjob := fn_cr_verifica_tarea2(lc_prefjob,
                                           lc_hostname,
                                           lc_paquete,
                                           lc_proceso,
                                           pn_usuario);
      End loop;
    
      -- 3. Aplicar estadisticas
      BEGIN
        DBMS_STATS.GATHER_TABLE_STATS(OWNNAME          => lc_nomusr, --'DESA021118',--'BANTPROD',
                                      TABNAME          => 'AQPB070A',
                                      DEGREE           => 8,
                                      GRANULARITY      => 'ALL',
                                      ESTIMATE_PERCENT => 100,
                                      CASCADE          => TRUE);
      END;
    
    end if;
  
  end sp_sch_aqpb070a_carga;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    
  procedure sp_cr_carga_temp_reac(pc_usuario in varchar2,
                                  pc_sucurs  in varchar2,
                                  pc_fecpro  in date) is
  
  begin
  
    --delete from aqpb070a x
    -- where trim(x.aqpb070ausur) = pc_usuario
    --     --and x.AQPB070Atabla = 'REACTIVA'
    --  and x.aqpb070aemp = 1
    --  and x.aqpb070asuc = pc_sucurs;
    --commit;
  
    insert into aqpb070a
      (aqpb070ausur,
       --aqpb070atabla,
       aqpb070aemp,
       aqpb070asuc,
       aqpb070arubr,
       aqpb070amda,
       aqpb070apap,
       aqpb070acta,
       aqpb070aoper,
       aqpb070asbop,
       aqpb070atop,
       aqpb070afech,
       aqpb070atit,
       aqpb070acap,
       aqpb070apzo,
       aqpb070asist,
       aqpb070amod,
       aqpb070afvto,
       aqpb070afval,
       aqpb070aplaz,
       aqpb070attasa,
       aqpb070atasa,
       aqpb070aclta,
       aqpb070atdia,
       aqpb070atano,
       aqpb070aresi,
       aqpb070acate,
       aqpb070aacti,
       aqpb070aprod,
       aqpb070aticu,
       aqpb070atipp,
       aqpb070afatr,
       aqpb070asdor,
       aqpb070asdmn,
       aqpb070asdus,
       aqpb070asdmo,
       aqpb070aint,
       aqpb070aprev,
       aqpb070agpo,
       AQPB070Afcr,
       AQPB070Ahcr)
      select --distinct 
       pc_usuario,
       --'REACTIVA',
       j.bcemp,
       j.bcsuc,
       j.bcrubr,
       j.bcmda,
       j.bcpap,
       j.bccta,
       j.bcoper,
       j.bcsbop,
       j.bctop,
       j.bcfech,
       j.bctit,
       j.bccap,
       j.bcpzo,
       j.bcsist,
       j.bcmod,
       j.bcfvto,
       j.bcfval,
       j.bcplaz,
       j.bcttasa,
       j.bctasa,
       j.bcclta,
       j.bctdia,
       j.bctano,
       j.bcresi,
       j.bccate,
       j.bcacti,
       j.bcprod,
       j.bcticu,
       j.bctipp,
       j.bcfatr,
       j.bcsdor,
       j.bcsdmn,
       j.bcsdus,
       j.bcsdmo,
       j.bcint,
       j.bcprev,
       j.bcgpo,
       to_char(sysdate, 'DD/MM/YYYY'),
       to_char(sysdate, 'HH24:MI:SS')
        from fsh012 j,
             (select distinct u.aqpb065bcod,
                              u.aqpb065bmod,
                              u.aqpb065bsuc,
                              u.aqpb065bmda,
                              u.aqpb065bpap,
                              u.aqpb065bcta,
                              u.aqpb065bope,
                              u.aqpb065bsbo,
                              u.aqpb065btop
                from aqpb065b u
               where u.aqpb065bcod = 1
                 and u.aqpb065bfec <= pc_fecpro
                 and u.aqpb065best <> 'D') x,
             fsd014 h
       where j.bcemp = 1
         and j.bcsuc = pc_sucurs
         and j.bcfech = pc_fecpro
         and j.bcemp = x.aqpb065bcod
         and j.bcrubr = h.rubro -- jrodriguej 28.06.2021
         --and j.bcmod = x.aqpb065bmod
            --and j.bcsuc = x.aqpb065bsuc  -- jrodriguej 28.06.2021
         --and j.bcmda = x.aqpb065bmda
         --and j.bcpap = x.aqpb065bpap
         and j.bccta = x.aqpb065bcta
         and j.bcoper = x.aqpb065bope
            --and j.bcsbop = x.aqpb073bsbo
            --and j.bctop = x.aqpb065btop
         and j.bcmod in (select h.modulo
                           from fst111 h
                          where h.dscod = 50
                            and h.modulo not in (29, 120, 144))
         and h.pcnivc in (select modulo
                            from fst111
                           where dscod = 50
                             and modulo not in (29, 120, 144)) -- jrodriguej 28.06.2021
         and h.pcimpu = 'S';
    commit;
  
  end sp_cr_carga_temp_reac;

  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    
  procedure sp_cr_carga_temp_fae(pc_usuario in varchar2,
                                 pc_sucurs  in varchar2,
                                 pc_fecpro  in date) is
  
  begin
  
    delete from aqpb070a x
     where trim(x.aqpb070ausur) = pc_usuario
          --and x.AQPB070Atabla = 'REACTIVA'
       and x.aqpb070aemp = 1
       and x.aqpb070asuc = pc_sucurs;
    commit;
  
    insert into aqpb070a
      (aqpb070ausur,
       --aqpb070atabla,
       aqpb070aemp,
       aqpb070asuc,
       aqpb070arubr,
       aqpb070amda,
       aqpb070apap,
       aqpb070acta,
       aqpb070aoper,
       aqpb070asbop,
       aqpb070atop,
       aqpb070afech,
       aqpb070atit,
       aqpb070acap,
       aqpb070apzo,
       aqpb070asist,
       aqpb070amod,
       aqpb070afvto,
       aqpb070afval,
       aqpb070aplaz,
       aqpb070attasa,
       aqpb070atasa,
       aqpb070aclta,
       aqpb070atdia,
       aqpb070atano,
       aqpb070aresi,
       aqpb070acate,
       aqpb070aacti,
       aqpb070aprod,
       aqpb070aticu,
       aqpb070atipp,
       aqpb070afatr,
       aqpb070asdor,
       aqpb070asdmn,
       aqpb070asdus,
       aqpb070asdmo,
       aqpb070aint,
       aqpb070aprev,
       aqpb070agpo,
       AQPB070Afcr,
       AQPB070Ahcr)
      select --distinct 
       pc_usuario,
       --'REACTIVA',
       j.bcemp,
       j.bcsuc,
       j.bcrubr,
       j.bcmda,
       j.bcpap,
       j.bccta,
       j.bcoper,
       j.bcsbop,
       j.bctop,
       j.bcfech,
       j.bctit,
       j.bccap,
       j.bcpzo,
       j.bcsist,
       j.bcmod,
       j.bcfvto,
       j.bcfval,
       j.bcplaz,
       j.bcttasa,
       j.bctasa,
       j.bcclta,
       j.bctdia,
       j.bctano,
       j.bcresi,
       j.bccate,
       j.bcacti,
       j.bcprod,
       j.bcticu,
       j.bctipp,
       j.bcfatr,
       j.bcsdor,
       j.bcsdmn,
       j.bcsdus,
       j.bcsdmo,
       j.bcint,
       j.bcprev,
       j.bcgpo,
       to_char(sysdate, 'DD/MM/YYYY'),
       to_char(sysdate, 'HH24:MI:SS')
        from fsh012 j,
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pc_fecpro
                 and u.aqpb067best <> 'D') x,
             fsd014 h
       where j.bcemp = 1
         and j.bcemp = x.aqpb067bcod
         and j.bcmod in (select h.modulo
                           from fst111 h
                          where h.dscod = 50
                            and h.modulo not in (29, 120, 144))
         and j.bcsuc = pc_sucurs
         and j.bcrubr = h.rubro -- jrodriguej 28.06.2021
         --and j.bcmod = x.aqpb067bmod 
            --and j.bcsuc = x.aqpb067bsuc -- jrodriguej 28.06.2021
            
         --and j.bcmda = x.aqpb067bmda
         --and j.bcpap = x.aqpb067bpap
         and j.bccta = x.aqpb067bcta
         and j.bcoper = x.aqpb067bope
            --and j.bcsbop = x.aqpb073bsbo
            --and j.bctop = x.aqpb067btop
         and j.bcfech = pc_fecpro
         and h.pcnivc in (select modulo
                            from fst111
                           where dscod = 50
                             and modulo not in (29, 120, 144)) -- jrodriguej 28.06.2021
         and h.pcimpu = 'S';
    commit;
    
    --- Módulo 200
    insert into aqpb070a
      (aqpb070ausur,
       --aqpb070atabla,
       aqpb070aemp,
       aqpb070asuc,
       aqpb070arubr,
       aqpb070amda,
       aqpb070apap,
       aqpb070acta,
       aqpb070aoper,
       aqpb070asbop,
       aqpb070atop,
       aqpb070afech,
       aqpb070atit,
       aqpb070acap,
       aqpb070apzo,
       aqpb070asist,
       aqpb070amod,
       aqpb070afvto,
       aqpb070afval,
       aqpb070aplaz,
       aqpb070attasa,
       aqpb070atasa,
       aqpb070aclta,
       aqpb070atdia,
       aqpb070atano,
       aqpb070aresi,
       aqpb070acate,
       aqpb070aacti,
       aqpb070aprod,
       aqpb070aticu,
       aqpb070atipp,
       aqpb070afatr,
       aqpb070asdor,
       aqpb070asdmn,
       aqpb070asdus,
       aqpb070asdmo,
       aqpb070aint,
       aqpb070aprev,
       aqpb070agpo,
       AQPB070Afcr,
       AQPB070Ahcr)
      select --distinct 
           pc_usuario,
           j.bcemp,
           j.bcsuc,
           j.bcrubr,
           j.bcmda,
           j.bcpap,
           j.bccta,
           j.bcoper,
           j.bcsbop,
           j.bctop,
           j.bcfech,
           j.bctit,
           j.bccap,
           j.bcpzo,
           j.bcsist,
           j.bcmod,
           j.bcfvto,
           j.bcfval,
           j.bcplaz,
           j.bcttasa,
           j.bctasa,
           j.bcclta,
           j.bctdia,
           j.bctano,
           j.bcresi,
           j.bccate,
           j.bcacti,
           j.bcprod,
           j.bcticu,
           j.bctipp,
           j.bcfatr,
           j.bcsdor,
           j.bcsdmn,
           j.bcsdus,
           j.bcsdmo,
           j.bcint,
           j.bcprev,
           j.bcgpo,
           to_char(sysdate, 'DD/MM/YYYY'),
           to_char(sysdate, 'HH24:MI:SS')
      from fsh012 j, fsd014 h
     where j.bcemp = 1
       and j.bcfech = pc_fecpro
       and j.bcsuc = pc_sucurs
       and j.bcrubr = h.rubro -- jrodriguej 28.06.2021
       and j.bcmod = 200
       
       and h.pcnivc in (select modulo
                          from fst111
                         where dscod = 50
                           and modulo not in (29, 120, 144)) -- jrodriguej 28.06.2021
       and h.pcimpu = 'S'
       and exists (select 'x'
              from aqpb067b u
             where 
               u.aqpb067bfec <= pc_fecpro
               and u.aqpb067bcod = j.bcemp
               -- suc
               and u.aqpb067bmda = j.bcmda
               and u.aqpb067bpap = j.bcpap
               and u.aqpb067bcta = j.bccta
               and u.aqpb067bope = j.bcoper
               -- sbop
               -- tipo
               and u.aqpb067best <> 'D');
       commit;

  end sp_cr_carga_temp_fae;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      
  procedure sp_cr_carga_temp_crec(pc_usuario in varchar2,
                                  pc_sucurs  in varchar2,
                                  pc_fecpro  in date) is
  
  begin
  
    delete from aqpb070a x
     where trim(x.aqpb070ausur) = pc_usuario
          --and x.AQPB070Atabla = 'REACTIVA'
       and x.aqpb070aemp = 1
       and x.aqpb070asuc = pc_sucurs;
    commit;
  
    insert into aqpb070a
      (aqpb070ausur,
       --aqpb070atabla,
       aqpb070aemp,
       aqpb070asuc,
       aqpb070arubr,
       aqpb070amda,
       aqpb070apap,
       aqpb070acta,
       aqpb070aoper,
       aqpb070asbop,
       aqpb070atop,
       aqpb070afech,
       aqpb070atit,
       aqpb070acap,
       aqpb070apzo,
       aqpb070asist,
       aqpb070amod,
       aqpb070afvto,
       aqpb070afval,
       aqpb070aplaz,
       aqpb070attasa,
       aqpb070atasa,
       aqpb070aclta,
       aqpb070atdia,
       aqpb070atano,
       aqpb070aresi,
       aqpb070acate,
       aqpb070aacti,
       aqpb070aprod,
       aqpb070aticu,
       aqpb070atipp,
       aqpb070afatr,
       aqpb070asdor,
       aqpb070asdmn,
       aqpb070asdus,
       aqpb070asdmo,
       aqpb070aint,
       aqpb070aprev,
       aqpb070agpo,
       AQPB070Afcr,
       AQPB070Ahcr)
      select ---distinct 
       pc_usuario,
       --'REACTIVA',
       j.bcemp,
       j.bcsuc,
       j.bcrubr,
       j.bcmda,
       j.bcpap,
       j.bccta,
       j.bcoper,
       j.bcsbop,
       j.bctop,
       j.bcfech,
       j.bctit,
       j.bccap,
       j.bcpzo,
       j.bcsist,
       j.bcmod,
       j.bcfvto,
       j.bcfval,
       j.bcplaz,
       j.bcttasa,
       j.bctasa,
       j.bcclta,
       j.bctdia,
       j.bctano,
       j.bcresi,
       j.bccate,
       j.bcacti,
       j.bcprod,
       j.bcticu,
       j.bctipp,
       j.bcfatr,
       j.bcsdor,
       j.bcsdmn,
       j.bcsdus,
       j.bcsdmo,
       j.bcint,
       j.bcprev,
       j.bcgpo,
       to_char(sysdate, 'DD/MM/YYYY'),
       to_char(sysdate, 'HH24:MI:SS')
        from fsh012 j,
             (select distinct u.aqpb073bcod,
                              u.aqpb073bmod,
                              u.aqpb073bsuc,
                              u.aqpb073bmda,
                              u.aqpb073bpap,
                              u.aqpb073bcta,
                              u.aqpb073bope,
                              u.aqpb073bsbo,
                              u.aqpb073btop
                from aqpb073b u
               where u.aqpb073bcod = 1
                 and u.aqpb073bfec <= pc_fecpro
                 and u.aqpb073best <> 'D') x,
             fsd014 h
       where j.bcemp = 1
         and j.bcsuc = pc_sucurs
         and j.bcfech = pc_fecpro
         and j.bcemp = x.aqpb073bcod
         and j.bcrubr = h.rubro -- jrodriguej 28.06.2021
         --and j.bcmod = x.aqpb073bmod
            --and j.bcsuc = x.aqpb073bsuc -- jrodriguej 28.06.2021
         --and j.bcmda = x.aqpb073bmda
         --and j.bcpap = x.aqpb073bpap
         and j.bccta = x.aqpb073bcta
         and j.bcoper = x.aqpb073bope
            --and j.bcsbop = x.aqpb073bsbo
            --and j.bctop = x.aqpb073btop
         and j.bcmod in (select h.modulo
                           from fst111 h
                          where h.dscod = 50
                            and h.modulo not in (29, 120, 144))
         and h.pcnivc in (select modulo
                            from fst111
                           where dscod = 50
                             and modulo not in (29, 120, 144)) -- jrodriguej 28.06.2021
         and h.pcimpu = 'S';
    commit;
  
  end sp_cr_carga_temp_crec;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  
  procedure sp_verificar_550(pc_mon  in number,
                             pc_suc  in number,
                             pn_cta  in number,
                             pn_oper in number,
                             pc_fech out date) is
  
    ld_firl date;
  
  begin
  
    --if ld_firl is null then
    ld_firl := null;
    BEGIN
      select max(g4.sng410fecg) -- 2015.07
        into ld_firl
        from sng410 g4
       where g4.sng410mda = pc_mon
         and g4.sng410pap = 0
         and g4.sng410cta = pn_cta
         and g4.sng410op = pn_oper
         and g4.sng400evto in (1101, 1100)
         and g4.sng410its <> 999;
    exception
      when others then
        NULL;
    end;
  
    if ld_firl is null then
      BEGIN
        select y514.jaqy514fec
          into ld_firl
          from jaqy514 Y514
         where y514.jaqy514pgc = 1
           and y514.jaqy514pap = 0
           and y514.jaqy514mda = pc_mon
           and y514.jaqy514suc = pc_suc
           and y514.jaqy514cta = pn_cta
           and y514.jaqy514ope = pn_oper
           and y514.jaqy514evt in (1101, 1100)
           and y514.jaqy514its <> 999;
      exception
        when others then
          NULL;
        
      end;
    end if;
  
    pc_fech := ld_firl;
  
  end sp_verificar_550;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

procedure sp_cr_FSH016_550(  pn_emp  in number,
                               pn_mod  in number,
                               pn_suc  in number,
                               pn_mda  in number,
                               pn_pap  in number,
                               pn_cta  in number,
                               pn_ope  in number,
                               pn_sbo  in number,
                               pn_top  in number,
                               pd_fpp  in date,  
                               pd_fec  in date,
                               pd_fei  in date, -- fecha inicio de calculo
                               pc_ind  in char, --indicador ultimo pago
                               pv_cap  out number,
                               pv_int  out number,
                               pv_icv  out number,
                               pv_mor  out number,
                               pv_seg  out number,
                               pv_rub  out number,
                               pv_gas  out number
                            ) is

cursor asientos is
select distinct x.tp1nro1 MODUL, x.tp1nro2 TRAN--, y.TP1NRO3 IMP , y.TP1IMP1 ORDINAL, y.TP1DESC--, x.*, y.*
                    from fst198 x, fst198 y
                   where x.TP1COD = 1
                     and x.TP1COD1 = 11144
                     and x.TP1CORR1 = 1
                     and x.tp1corr2 = 3
                     and x.tp1corr3 > 0
                     and y.TP1COD = 1
                     and y.TP1COD1 = 10876
                     and y.tp1corr1 = x.tp1nro1
                     and y.tp1corr2 = x.tp1nro2
/*                     and x.TP1NRO1 = 30
                     and x.TP1NRO2 = 100*/
                     ;

cursor creditos(pd_fecini date, pd_fecpro date, pn_cod number, 
                pn_mdx number, pn_tran number, pn_ctnro number, pn_oper number) is
select distinct 
f.pgcod, f.hcmod, f.hsucor, f.htran, f.hnrel, f.hfcon, f.hmodul, f.htoper,-- hsucur, hrubro, 
f.hmda, f.hpap, f.hcta, f.hoper
from fsh016 f,fsh015 g
where g.pgcod = f.pgcod
  and g.hcmod = f.hcmod
  and g.hsucor = f.hsucor
  and g.htran = f.htran
  and g.hnrel = f.hnrel
  and g.hfcon = f.hfcon
  and g.hccorr <>99
  and f.pgcod = pn_cod
  and f.hcmod = pn_mdx
  and f.htran = pn_tran
  and f.hfcon >= pd_fecini
  and f.hfcon <= pd_fecpro 
  and f.hcta  =  pn_ctnro
  and f.hoper =  pn_oper
  ;--and f.hmodul in (200,33)  ;

ld_fecpag date;
lv_cap number :=0;
lv_int number :=0;
lv_icv number :=0;
lv_mor number :=0;
lv_seg number :=0;
lv_rub number :=0;
lv_gas number :=0;

begin

  if pc_ind is null then --sino es ultimo pago entonces validar
         
      if pd_fei is null then --- es acumulativo       
          --obtiene max fecha de fsd602
          begin
            select max(f.d602fc)
              into ld_Fecpag
              from fsd602 f
             where f.pgcod = 1
              and f.ppcta = pn_cta
              and f.ppoper = pn_ope
              and f.d602co = 'S';
              
          end;                   
      else
         ld_Fecpag := pd_fei;
      end if;
      
  elsif pc_ind = 'U' then--para obtener fecha ultimo pago
        begin
          select max(f.hfcon)
            into ld_Fecpag
            from fsh016 f, fsh015 g
            where g.pgcod = f.pgcod
              and g.hcmod = f.hcmod
              and g.hsucor = f.hsucor
              and g.htran = f.htran
              and g.hnrel = f.hnrel
              and g.hfcon = f.hfcon
              and g.hccorr <>99
              and f.hcmod not in (98,99)
              and f.hcta  =  pn_cta
              and f.hoper =  pn_ope
              --and f.hmodul in (200,33)
              and (g.hcmod, g.htran) in (  select distinct x.tp1nro1 MODUL, x.tp1nro2 TRAN--, y.TP1NRO3 IMP , y.TP1IMP1 ORDINAL, y.TP1DESC--, x.*, y.*
                    from fst198 x, fst198 y
                   where x.TP1COD = 1
                     and x.TP1COD1 = 11144
                     and x.TP1CORR1 = 1
                     and x.tp1corr2 = 3
                     and x.tp1corr3 > 0
                     and y.TP1COD = 1
                     and y.TP1COD1 = 10876
                     and y.tp1corr1 = x.tp1nro1
                     and y.tp1corr2 = x.tp1nro2)
                       ;  
        exception when others then
            ld_Fecpag := null;
        end;
  end if;
      
  pv_cap := 0;
  pv_int := 0;
  pv_icv := 0;
  pv_mor := 0;
  pv_seg := 0;
  pv_gas := 0;

  for i in asientos loop
      for y in creditos(ld_Fecpag, pd_fpp, pn_emp, i.modul, i.tran, pn_cta, pn_ope  )  loop
  
          begin
            pq_cr_movcre_fsh016.sp_cr_asientos(p_pgcod => y.pgcod,
                                              p_itmod =>  y.hcmod,
                                              p_ittran => y.htran,
                                              p_itsuc =>  y.hsucor, 
                                              p_itnrel => y.hnrel,
                                              pn_cta =>   y.hcta,
                                              pn_ope =>   y.hoper,
                                              pd_fpp =>   pd_fpp,
                                              pd_fec =>   y.hfcon,--pd_fec,  08/08/2021
                                              pv_cap =>   lv_cap,
                                              pv_int =>   lv_int,
                                              pv_icv =>   lv_icv,
                                              pv_mor =>   lv_mor,
                                              pv_seg =>   lv_seg,
                                              pv_rub =>   lv_rub,
                                              pv_gas =>   lv_gas
                                              );
          end;
          
          
          pv_cap := pv_cap + nvl(lv_cap,0);
          pv_int := pv_int + nvl(lv_int,0);
          pv_icv := pv_icv + nvl(lv_icv,0);
          pv_mor := pv_mor + nvl(lv_mor,0);
          pv_seg := pv_seg + nvl(lv_seg,0);
          pv_gas := pv_gas + nvl(lv_gas,0);
          
          
    end loop;    

  end loop;
  
end sp_cr_FSH016_550;
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  /*procedure sp_cr_sch_faemype_r1_new(pd_fecpro in date, pn_usuario in char) is

  ld_fecha_rcc date;
  ln_nro_mes number;  
  ld_fecha date;                         
  begin
    
    select to_date(t.tpnro, 'DDMMYY')
      into ld_fecha_rcc
      from fst098 t
     where t.pgcod = 1
       and t.tpcod = 7647
       and t.tpcorr = 12;
  
    -- 1. Nro meses RCC
    begin
      select x.tp1nro1
        into ln_nro_mes
        from fst198 x
       where x.TP1COD = 1
         and x.TP1COD1 = 11144
         and x.TP1CORR1 = 10
         and x.tp1corr2 = 2
         and x.tp1corr3 = 4;
    exception
      when others then
        ln_nro_mes := 1;
    end;
    if pd_fecpro <= ld_fecha_rcc then
      ld_fecha_rcc := last_day(add_months(trunc(pd_fecpro), -1 * ln_nro_mes));
    end if;
    -- Fecha actual
    select t.pgfape into ld_fecha from fst017 t where t.pgcod = 1;
    
    -- Eliminación del registro por usuario
    begin
      delete from aqpb067 t where t.aqpb067usur = rpad(trim(pn_usuario), 10, ' ');
      commit;
    end;
    
  
    -- 2. Carga de tabla
    if lc_fecha = pn_ffin then
      begin
        insert into aqpb067
              (aqpb067usur, -- Usuario
               aqpb067pgcod,
               aqpb067aomod,
               aqpb067aosuc, -- 15. Agencia (Sucursal)
               aqpb067aomda,
               aqpb067aopap,
               aqpb067aocta, -- 17. Nro. de cuenta
               aqpb067aooper, -- 18. Nro. de operación
               aqpb067aosbop,
               aqpb067aotope,
               aqpb067esf, -- 3. ESF
               aqpb067csap, -- 4. Número contrato SAP
               aqpb067nrop, -- 5.  Número Préstamo
               aqpb067fval, -- 6.  Fecha de Desembolso 
               
               aqpb067mda, -- 7.  Moneda
               aqpb067sdo, -- 8.  Saldo capital 
               aqpb067mpre, -- 9.  Monto Prepago 
               --aqpb067dcla, -- 10. Distribución clasificación de riesgo (Reportado por Caja al cierre de mes)
               --aqpb067ncla, -- 10.1. Concepto
               aqpb067cnoma, -- 10.a Calificación Normal (en números de 100 a 0), reportado por caja al cierre de mes
               aqpb067ccppa, -- 10.b Calificación CPP (en números de 100 a 0), reportado por caja al cierre de mes
               aqpb067cdefa, -- 10.c Calificación Deficiente (en números de 100 a 0), reportado por caja al cierre de mes
               aqpb067cduda, -- 10.d Calificación Dudoso (en números de 100 a 0), reportado por caja al cierre de mes
               aqpb067cpera, -- 10.e Calificación Perdida (en números de 100 a 0), reportado por caja al cierre de mes
               
               aqpb067dcon, -- 11. Situación contable 
               aqpb067ncon, -- 11.1. Concepto
               aqpb067diatc, -- 12. Días de atraso pago cuota 
               
               aqpb067reg, -- 13. Región
               aqpb067nreg, -- 13.1 Región - Nombre
               aqpb067zon, -- 14. Zona
               aqpb067nzon, -- 14.1 Zona - Nombre
               aqpb067nsuc, -- 15.1 Agencia(Sucursal) - Nombre
               aqpb067ase, -- 16. Analista
               aqpb067tdoc, -- 19. Tipo documento
               aqpb067ndoc, -- 20. Nro. de documento
               aqpb067razn, -- 21. Razón social
               aqpb067rnom, -- 22. Apellidos y nombres del cliente
               aqpb067estn, -- 23. Estado del crédito (vigente, cancelado)
               aqpb067lest, -- 24. Estado contable
               aqpb067cest, -- Concepto
               aqpb067dest, -- 25. Fecha de cambio de estado contable
               aqpb067mdes, -- 26. Monto desembolsado
               aqpb067mcof, -- 27. Monto ingresado a COFIDE (BI)
               aqpb067pper, -- 28. Nro. de cuotas ingresado a COFIDE (BI)
               aqpb067pgra, -- 29. Periodo de gracia ingresado a COFIDE (BI)
               aqpb067pcob, -- 30. % cobertura
               aqpb067mcob, -- 31. Monto de cobertura
               aqpb067fini, -- 32. Fecha inicio de crédito original
               aqpb067ffin, -- 33. Fecha fin de crédito original
               
               aqpb067fvenuc, -- 34. Fecha de vencimiento de la próxima cuota impaga
               aqpb067fvenup, -- 35. Fecha de vencimiento de última cuota pagada
               aqpb067ncuo, -- 36. Nro. cuotas pendientes de pago
               --aqpb067fcuo,    -- 37. Fecha de última cuota pagado
               aqpb067fupag, -- 38. Fecha de pago de última cuota pagada
               aqpb067ncupa, -- 39. NÚMERO DE CUOTAS PAGADAS
               aqpb067mcuop, -- 40. MONTO DE CUOTAS PAGADAS
               --aqpb067dpag,    -- 41. DISTRIBUCION PAGO REALIZADO
               
               aqpb067diat, -- 42. Días de atraso
               aqpb067fcla, -- 43. Fecha clasificación SBS
               aqpb067cnom, -- 44. Calificación Normal (en números de 100 a 0)
               aqpb067ccpp, -- 45. Calificación CPP (en números de 100 a 0)  
               aqpb067cdef, -- 46. Calificación Deficiente (en números de 100 a 0)
               aqpb067cdud, -- 47. Calificación Dudoso (en números de 100 a 0)
               aqpb067cper, -- 48. Calificación Perdida (en números de 100 a 0       
               aqpb067tasa, -- 49. Tasa de interés
               aqpb067ciuu, -- 50. CIUU
               aqpb067actn, -- 51. Actividad económica
               aqpb067tcre, -- 52. Tipo crédito SBS
               aqpb067ncre, -- 52.1 Tipo crédito SBS - Concepto
               aqpb067lrep, -- 53. Flag de re reprogramación
               aqpb067nrep, -- 54. Número de reprogramaciones
               aqpb067frep, -- 55. Fecha de re reprogramación
               aqpb067pfec, -- 56. Fecha de primera cuota de re reprogramación
               aqpb067ncuop, -- 57. Nro. de cuotas posterior a re reprogramación
               aqpb067pgrap, -- 58. Periodo de gracia posterior a re reprogramación
               aqpb067pfinp, -- 59. Fecha de fin de crédito posterior a re reprogramación
               
               aqpb067gas, -- 60. Seguros
               aqpb067mor, -- 61. Interés Moratorio
               aqpb067int, -- 62. Intereses
               aqpb067cuo, -- 63. Capital
               aqpb067icv, -- 64. Interés compensatorio
               aqpb067pen, -- 65. Penalidad
               
               aqpb067sdoins, -- 66. Saldo Insoluto 2
               aqpb067feccaj, -- Fecha de clasicifación caja
               
               aqpb067stat, --- FSD010 estado del crédito
               aqpb067fe99, ----FSD010 fecha de pago
               
               aqpb067ciiuori,
               aqpb067actnomori,
               
               aqpb067fcr,
               aqpb067hcr,
               aqpb067fproc,
               aqpb067mhonr,
               aqpb067fhonr,
               aqpb067chonr,
               aqpb067sdocap,
               aqpb067sdohon,
               aqpb067crehon,
               aqpb067tmor,
               aqpb067tcrepro,  
               aqpb067fcest)
               select t.pgcod,
             t.aomod,
             t.aosuc,
             t.aomda,
             t.aopap,
             t.aocta,
             t.aooper,
             t.aosbop,
             t.aotope,
             concat(lpad(to_char(t.aocta), 9, '0'),
                    concat(lpad(to_char(t.aomda), 3, '0'),
                           lpad(to_char(t.aooper), 9, '0'))) prestamo,
             substr(r.scrub, 1, 4) dcon,
             t.aofval,
             t.aofvto,
             t.aofe99,
             t.aostat,
             t.aoimp,
             t.aotasa,
             x.pepais,
             x.petdoc,
             x.pendoc,
             r.scsdo,
             0 estado
      
        from fsd010 t,
             FSD011 r, ---> a fsh012
             fsr008 x,
             --fsr011 f, ---> quita
             (select distinct u.aqpb067bcod,
                              u.aqpb067bmod,
                              u.aqpb067bsuc,
                              u.aqpb067bmda,
                              u.aqpb067bpap,
                              u.aqpb067bcta,
                              u.aqpb067bope,
                              u.aqpb067bsbo,
                              u.aqpb067btop
                from aqpb067b u
               where u.aqpb067bcod = 1
                 and u.aqpb067bfec <= pn_ffin
                 and u.aqpb067best <> 'D') g
       where
      -- FSD010 // FSD011
       r.pgcod = t.pgcod
       and r.scmod = t.aomod
      --and r.scsuc = t.aosuc -- jrodriguej 28.06.2021
       and r.scmda = t.aomda
       and r.scpap = t.aopap
       and r.sccta = t.aocta
       and r.scoper = t.aooper
      --and r.scsbop = t.aosbop
      --and r.sctope = t.aotope
      
      --and t.aomod <> 419
       and t.aomod in (select modulo
                     from fst111
                    where dscod = 50
                      and modulo not in (29, 120, 144))
       and t.aofval <= pn_ffin
       and t.aostat <> 99 
      -- FSD010 // FSR008
       and t.pgcod = x.pgcod
       and t.aocta = x.ctnro
       and x.ttcod = 1
       and x.cttfir = 'T'
      
      -- AQPB067B // FSD010 
       and g.aqpb067bcod = t.pgcod
       and g.aqpb067bmod = t.aomod
      --and g.aqpb067bsuc = t.aosuc -- jrodriguej 28.06.2021
       and g.aqpb067bmda = t.aomda
       and g.aqpb067bpap = t.aopap
       and g.aqpb067bcta = t.aocta
       and g.aqpb067bope = t.aooper
      --and g.aqpb067bsbo = t.aosbop
      -- and g.aqpb067btop = t.aotope
      
     
       and t.aosuc = pc_sucurs
      -- and (t.aomod <> 101 or t.aotope <> 354) -- jrodriguej 29.06.2021
       and (t.aomod, t.aotope) not in (select 101, 354 from dual);
        exception when others then null;
      end;
    else
    end if;
  
    -- Registro históricos  
    pq_cr_reporte_fondos.sp_guardar_historico(pn_usuario, 2, pd_fecpro);
  
  end sp_cr_sch_faemype_r1;*/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  procedure sp_obtener_sald_insol2_h(pn_cod   in number,
                                   pn_mod   in number,
                                   pn_suc   in number,
                                   pn_mda   in number,
                                   pn_pap   in number,
                                   pn_cta   in number,
                                   pn_ope   in number,
                                   pn_sbo   in number,
                                   pn_top   in number,
                                   pn_fecha in date,
                                   pn_indi  in number,
                                   pn_stat  in number,
                                   pn_sald  out number) -- saldo insoluto
   is
    -- Saldo insoluto = monto_cofide - sumatorio de pagos
    -- pn_indi = 1 -----> REACTIVA
    -- pn_indi = 2 -----> FAE
    -- pn_indi = 3 -----> CRECER
  
    lx_mcof number(10, 2);
    lx_scap number(17, 2);
    lx_shon number(17, 2);
    lx_shon_ext number(17, 2);
    lx_fdes date;
    lx_mext number(17, 2);
    lx_fdia date;
    lc_canc char(1);
    lx_stat number(2);
  
  begin
  
    select x.pgfape into lx_fdia from fst017 x where x.pgcod = 1;
  
    --validar estado de credito y trx para determinar si es 30/360
    lc_canc := 'N';
  
    begin
    
      select 'S'
        into lc_canc
        from fsd602 t
       where t.pgcod = pn_cod
         --and t.ppmod = pn_mod
            --and t.ppsuc = pn_suc --  jrodriguej 28.06.2021
         and t.ppsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800)
         and t.ppmda = pn_mda
         and t.pppap = pn_pap
         and t.ppcta = pn_cta
         and t.ppoper = pn_ope
            -- and t.ppsbop = pn_sbo
            -- and t.pptope = pn_top
         and t.pp1stat in ('P', 'T')
         and t.pp1cap > 0
         and (t.d602mo, t.d602tr) in
             (select x.tp1nro1, x.tp1nro2
                from fst198 x
               where x.TP1COD = 1
                 and x.TP1COD1 = 11144
                 and x.TP1CORR1 = 1
                 and x.tp1corr2 = 4 --flag determina si trx se pertenece a cancelacion
                 and x.tp1corr3 > 0)
         and t.d602fc >= lx_fdes
         and t.d602fc <= pn_fecha
         and t.d602co = 'S';
    
    exception
      when others then
        lc_canc := 'N';
    end;
  
    if lc_canc = 'S' then
      pn_sald := 0;
    
    else
      -- a) monto COFIDE
      case
        when pn_indi = 1 then
          -- REACTIVA
        
          begin
          
            select x.aqpb065bmon, x.aqpb065bfdes
              into lx_mcof, lx_fdes
              from aqpb065b x
             where x.aqpb065bcod = pn_cod
               --and x.aqpb065bmod = pn_mod
                  -- and x.aqpb065bsuc = pn_suc --  jrodriguej 28.06.2021
                         and x.aqpb065bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
               and x.aqpb065bmda = pn_mda
               and x.aqpb065bpap = pn_pap
               and x.aqpb065bcta = pn_cta
               and x.aqpb065bope = pn_ope
                  -- and x.aqpb065bsbo = pn_sbo
                  -- and x.aqpb065btop = pn_top
               and x.aqpb065bfec <= pn_fecha
               and x.aqpb065best <> 'D';
          
          exception
            when too_many_rows then
            
              begin
              
                select f.aqpb065bmon, f.aqpb065bfdes
                  into lx_mcof, lx_fdes
                  from (select x.aqpb065bmon, x.aqpb065bfdes
                          from aqpb065b x
                         where x.aqpb065bcod = pn_cod
                           --and x.aqpb065bmod = pn_mod
                              -- and x.aqpb065bsuc = pn_suc --  jrodriguej 28.06.2021
                               and x.aqpb065bsuc in (select p.sucurs
                               from fst001 p
                              where p.pgcod = 1
                                and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
                           and x.aqpb065bmda = pn_mda
                           and x.aqpb065bpap = pn_pap
                           and x.aqpb065bcta = pn_cta
                           and x.aqpb065bope = pn_ope
                              -- and x.aqpb065bsbo = pn_sbo
                              -- and x.aqpb065btop = pn_top
                           and x.aqpb065bfec <= pn_fecha
                           and x.aqpb065best <> 'D'
                         order by x.aqpb065bfec desc) f
                 where rownum = 1;
              
              exception
                when others then
                
                  lx_mcof := 0;
                  lx_fdes := null;
                
              end;
            
            when others then
            
              lx_mcof := 0;
              lx_fdes := null;
            
          end;
        
        when pn_indi = 2 then
          -- FAE
        
          begin
          
            select x.aqpb067bmon, x.aqpb067bfdes
              into lx_mcof, lx_fdes
              from aqpb067b x
             where x.aqpb067bcod = pn_cod
               --and x.aqpb067bmod = pn_mod
                  -- and x.aqpb067bsuc = pn_suc --  jrodriguej 28.06.2021
                    and x.aqpb067bsuc in (select p.sucurs
                             from fst001 p
                            where p.pgcod = 1
                              and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
               and x.aqpb067bmda = pn_mda
               and x.aqpb067bpap = pn_pap
               and x.aqpb067bcta = pn_cta
               and x.aqpb067bope = pn_ope
                  -- and x.aqpb067bsbo = pn_sbo
                  -- and x.aqpb067btop = pn_top
               and x.aqpb067bfec <= pn_fecha
               and x.aqpb067best <> 'D';
          
          exception
            when too_many_rows then
            
              begin
              
                select f.aqpb067bmon, f.aqpb067bfdes
                  into lx_mcof, lx_fdes
                  from (select x.aqpb067bmon, x.aqpb067bfdes
                          from aqpb067b x
                         where x.aqpb067bcod = pn_cod
                           --and x.aqpb067bmod = pn_mod
                              -- and x.aqpb067bsuc = pn_suc --  jrodriguej 28.06.2021
                            and x.aqpb067bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
                           and x.aqpb067bmda = pn_mda
                           and x.aqpb067bpap = pn_pap
                           and x.aqpb067bcta = pn_cta
                           and x.aqpb067bope = pn_ope
                              -- and x.aqpb067bsbo = pn_sbo
                              -- and x.aqpb067btop = pn_top
                           and x.aqpb067bfec <= pn_fecha
                           and x.aqpb067best <> 'D'
                         order by x.aqpb067bfec desc) f
                 where rownum = 1;
              
              exception
                when others then
                
                  lx_mcof := 0;
                  lx_fdes := null;
                
              end;
            
            when others then
            
              lx_mcof := 0;
              lx_fdes := null;
            
          end;
        
        when pn_indi = 3 then
          -- CRECER
        
          begin
          
            select x.aqpb073bmon, x.aqpb073bfdes
              into lx_mcof, lx_fdes
              from aqpb073b x
             where x.aqpb073bcod = pn_cod
               --and x.aqpb073bmod = pn_mod
                  -- and x.aqpb073bsuc = pn_suc --  jrodriguej 28.06.2021
                         and x.aqpb073bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
               and x.aqpb073bmda = pn_mda
               and x.aqpb073bpap = pn_pap
               and x.aqpb073bcta = pn_cta
               and x.aqpb073bope = pn_ope
                  -- and x.aqpb073bsbo = pn_sbo
                  -- and x.aqpb073btop = pn_top
               and x.aqpb073bfec <= pn_fecha
               and x.aqpb073best <> 'D';
          
          exception
            when too_many_rows then
            
              begin
              
                select f.aqpb073bmon, f.aqpb073bfdes
                  into lx_mcof, lx_fdes
                  from (select x.aqpb073bmon, x.aqpb073bfdes
                          from aqpb073b x
                         where x.aqpb073bcod = pn_cod
                          -- and x.aqpb073bmod = pn_mod
                              -- and x.aqpb073bsuc = pn_suc --  jrodriguej 28.06.2021
                             and x.aqpb073bsuc in (select p.sucurs
                             from fst001 p
                            where p.pgcod = 1
                              and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
                           and x.aqpb073bmda = pn_mda
                           and x.aqpb073bpap = pn_pap
                           and x.aqpb073bcta = pn_cta
                           and x.aqpb073bope = pn_ope
                              -- and x.aqpb073bsbo = pn_sbo
                              -- and x.aqpb073btop = pn_top
                           and x.aqpb073bfec <= pn_fecha
                           and x.aqpb073best <> 'D'
                         order by x.aqpb073bfec desc) f
                 where rownum = 1;
              
              exception
                when others then
                
                  lx_mcof := 0;
                  lx_fdes := null;
                
              end;
            
            when others then
            
              lx_mcof := 0;
              lx_fdes := null;
            
          end;
        
      end case;
    
      --- b) Sumatoria de pagos
      --- Capital
      if lx_mcof <> 0 and pn_fecha >= lx_fdes then
        begin
        
          select nvl(sum(t.pp1cap), 0) --, nvl(sum(t.pp1int), 0)
            into lx_scap
          
            from fsd602 t
           where t.pgcod = pn_cod
             --and t.ppmod = pn_mod
                --and t.ppsuc = pn_suc --  jrodriguej 28.06.2021
             and t.ppsuc in (select p.sucurs
                               from fst001 p
                              where p.pgcod = 1
                                and p.sucurs < 800)
             and t.ppmda = pn_mda
             and t.pppap = pn_pap
             and t.ppcta = pn_cta
             and t.ppoper = pn_ope
                -- and t.ppsbop = pn_sbo
                -- and t.pptope = pn_top
             and t.pp1stat in ('P', 'T')
             and t.pp1cap > 0
             and (t.d602mo, t.d602tr) in
                 (select x.tp1nro1, x.tp1nro2
                    from fst198 x
                   where x.TP1COD = 1
                     and x.TP1COD1 = 11144
                     and x.TP1CORR1 = 1
                     and x.tp1corr2 = 3
                     and x.tp1corr3 > 0)
             and t.d602fc >= lx_fdes
             and t.d602fc <= pn_fecha
             and t.d602co = 'S';
        
        exception
          when others then
            lx_scap := 0;
        end;
      
        if lx_fdia <> pn_fecha then
        
          begin
            select nvl(x.HCIMP1, 0) --,  x.* 
              into lx_mext
              from fsh016 x, fsh015 t
             where x.PGCOD = t.pgcod
               and x.HCMOD = t.hcmod
               and x.HSUCOR = t.hsucor
               and x.HTRAN = t.htran
               and x.HNREL = t.hnrel
               and x.HFCON = t.hfcon
               and x.PGCOD = pn_cod
               and x.HMODUL = pn_mod
               and x.HSUCUR = pn_suc
               and x.HMDA = pn_mda
               and x.HPAP = pn_pap
               and x.HCTA = pn_cta
               and x.HOPER = pn_ope
               and x.HSUBOP = pn_sbo
               and x.HTOPER = pn_top
               and --- HRUBRO: 1411, 1421, 1414, 1424, 1415,1425,1416, 1426
                   substr(x.HRUBRO, 1, 4) in
                   (1411, 1421, 1414, 1424, 1415, 1425, 1416, 1426)
               and x.HFCON > pn_fecha
               and x.HFVAL <= pn_fecha
               and (x.HCMOD, x.HTRAN) in
                   (select f.tp1nro1 + 500, f.tp1nro2 --obtener trx extornos
                      from fst198 f
                     where f.TP1COD = 1
                       and f.TP1COD1 = 11144
                       and f.TP1CORR1 = 1
                       and f.tp1corr2 = 3
                       and f.tp1corr3 > 0);
          exception
            when others then
              lx_mext := 0;
          end;
        
        else
          lx_mext := 0;
        end if;
        --pagos honramiento
        begin
          select sum(x.HCIMP1) into lx_shon
          from   fsh016 x, fsh015 t
             where x.PGCOD = t.pgcod
               and x.HCMOD = t.hcmod
               and x.HSUCOR = t.hsucor
               and x.HTRAN = t.htran
               and x.HNREL = t.hnrel
               and x.HFCON = t.hfcon
               and x.PGCOD = pn_cod
               --and x.HMODUL = 103
               --and x.HSUCUR = 20
               and x.HMDA = pn_mda
               and x.HPAP = pn_pap               
               and x.HCTA = pn_cta
               and x.HOPER = pn_ope
               --and x.HSUBOP = 3
               --and x.HTOPER = 109
               --and x.HFCON > '01/01/2022'
               and x.HFCON <= pn_fecha
               and (x.HCMOD, x.HTRAN,x.hcord) in (
                   select tp1nro1,tp1nro2,tp1nro3 
                   from fst198 
                   where tp1cod = 1 
                   and tp1cod1 = 11164 
                   and tp1corr1 = 4 
                   and tp1corr2 = 1 
                   and tp1corr3 >0);
         exception
            when others then
              lx_shon := 0;
        end;
        --extornos honramiento
        begin
          select sum(x.HCIMP1) into lx_shon_ext
          from   fsh016 x, fsh015 t
             where x.PGCOD = t.pgcod
               and x.HCMOD = t.hcmod
               and x.HSUCOR = t.hsucor
               and x.HTRAN = t.htran
               and x.HNREL = t.hnrel
               and x.HFCON = t.hfcon
               and x.PGCOD = pn_cod
               --and x.HMODUL = 103
               --and x.HSUCUR = 20
               and x.HMDA = pn_mda
               and x.HPAP = pn_pap               
               and x.HCTA = pn_cta
               and x.HOPER = pn_ope
               --and x.HSUBOP = 3
               --and x.HTOPER = 109
               --and x.HFCON > '01/01/2022'
               and x.HFCON <= pn_fecha
               and (x.HCMOD, x.HTRAN,x.hcord) in (
                   select tp1nro1,tp1nro2,tp1nro3 
                   from fst198 
                   where tp1cod = 1 
                   and tp1cod1 = 11164 
                   and tp1corr1 = 4 
                   and tp1corr2 = 2 
                   and tp1corr3 >0);
         exception
            when others then
              lx_shon_ext := 0;
        end;
        
        lx_scap := lx_scap + lx_mext + nvl(lx_shon,0) - nvl(lx_shon_ext,0);
      
      else
        lx_scap := 0;
      end if;
    
      if lx_mcof is null then
        lx_mcof := 0;
      end if;
    
      --- c) Resultado
      pn_sald := lx_mcof - lx_scap;
    
      if pn_sald < 0 then
        pn_sald := 0;
      end if;
    end if; -- fin lc_canc       
  
    -- Verificación de estado del crédito
    if pn_stat = 99 then
      pn_sald := 0;
    end if;
  
  end sp_obtener_sald_insol2_h;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
  procedure sp_obtener_sald_insol200_h(pn_cod   in number,
                                   pn_mod   in number,
                                   pn_suc   in number,
                                   pn_mda   in number,
                                   pn_pap   in number,
                                   pn_cta   in number,
                                   pn_ope   in number,
                                   pn_sbo   in number,
                                   pn_top   in number,
                                   pn_fecha in date,
                                   pn_indi  in number,
                                   pn_stat  in number,
                                   pn_sald  out number) -- saldo insoluto
   is
    -- Saldo insoluto = monto_cofide - sumatorio de pagos
    -- pn_indi = 1 -----> REACTIVA
    -- pn_indi = 2 -----> FAE
    -- pn_indi = 3 -----> CRECER
  
    lx_mcof number(10, 2);
    lx_scap number(17, 2);
    lx_shon number(17, 2);
    lx_shon_ext number(17, 2);
    lx_fdes date;
    lx_mext number(17, 2);
    lx_fdia date;
    lc_canc char(1);
    lx_stat number(2);
    
   lc_fsis date;
    
    lv_cap number(16,2); --- capital
    lv_int number(16,2); --- interés
    lv_icv number(16,2); --- interés compensatorio
    lv_mor number(16,2); --- mora / pendalidad
    lv_seg number(16,2); --- segurs
    lv_rub number(16,2); --- rubr
    lv_gas number(16,2); --- otros gastos  
    
    lr_cod  NUMBER(3);
    lr_mod  NUMBER(3);
    lr_suc  NUMBER(3);
    lr_mda  NUMBER(4);
    lr_pap  NUMBER(4);
    lr_cta  NUMBER(9);
    lr_oper NUMBER(9);
    lr_sbop NUMBER(3);
    lr_tope NUMBER(3);   
    
    
  
  begin
  
    select x.pgfape into lc_fsis from fst017 x where x.pgcod = 1;
    
    -- clave anterior al mod 200
      begin
        select f.pgcod,
               f.aomod,
               f.aosuc,
               f.aomda,
               f.aopap,
               f.aocta,
               f.aooper,
               f.aosbop,
               f.aotope
          into lr_cod,
               lr_mod,
               lr_suc,
               lr_mda,
               lr_pap,
               lr_cta,
               lr_oper,
               lr_sbop,
               lr_tope
          from (select x.pgcod,
                       x.aomod,
                       x.aosuc,
                       x.aomda,
                       x.aopap,
                       x.aocta,
                       x.aooper,
                       x.aosbop,
                       x.aotope
                  from fsd010 x
                 where x.pgcod = pn_cod
                   and x.aomda = pn_mda
                   and x.aopap = pn_pap
                   and x.aocta = pn_cta
                   and x.aooper = pn_ope
                   and x.aomod in
                       (select modulo
                          from fst111
                         where dscod = 50
                           and modulo not in (29, 120, 144, 200))
                 order by x.aosbop desc) f
         where rownum = 1;
      exception
        when others then
          lr_cod  := null;
          lr_mod  := null;
          lr_suc  := null;
          lr_mda  := null;
          lr_pap  := null;
          lr_cta  := null;
          lr_oper := null;
          lr_sbop := null;
          lr_tope := null;
      end;      
  
    --validar estado de credito y trx para determinar si es 30/360
    lc_canc := 'N';
  
    begin
    
      select 'S'
        into lc_canc
        from fsd602 t
       where t.pgcod = lr_cod
         and t.ppmod = lr_mod
            --and t.ppsuc = pn_suc --  jrodriguej 28.06.2021
         and t.ppsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800)
         and t.ppmda = lr_mda
         and t.pppap = lr_pap
         and t.ppcta = lr_cta
         and t.ppoper = lr_oper
            -- and t.ppsbop = pn_sbo
            -- and t.pptope = pn_top
         and t.pp1stat in ('P', 'T')
         and t.pp1cap > 0
         and (t.d602mo, t.d602tr) in
             (select x.tp1nro1, x.tp1nro2
                from fst198 x
               where x.TP1COD = 1
                 and x.TP1COD1 = 11144
                 and x.TP1CORR1 = 1
                 and x.tp1corr2 = 4 --flag determina si trx se pertenece a cancelacion
                 and x.tp1corr3 > 0)
         --and t.d602fc >= lx_fdes
         and t.d602fc <= pn_fecha
         and t.d602co = 'S';
    
    exception
      when others then
        lc_canc := 'N';
    end;
  
    if lc_canc = 'S' then
      pn_sald := 0;
    
    else
      -- a) monto COFIDE
      case
        when pn_indi = 1 then
          -- REACTIVA
        
          begin
          
            select x.aqpb065bmon, x.aqpb065bfdes
              into lx_mcof, lx_fdes
              from aqpb065b x
             where x.aqpb065bcod = pn_cod
               --and x.aqpb065bmod = pn_mod
                  -- and x.aqpb065bsuc = pn_suc --  jrodriguej 28.06.2021
                             and x.aqpb065bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
               and x.aqpb065bmda = pn_mda
               and x.aqpb065bpap = pn_pap
               and x.aqpb065bcta = pn_cta
               and x.aqpb065bope = pn_ope
                  -- and x.aqpb065bsbo = pn_sbo
                  -- and x.aqpb065btop = pn_top
               and x.aqpb065bfec <= pn_fecha
               and x.aqpb065best <> 'D';
          
          exception
            when too_many_rows then
            
              begin
              
                select f.aqpb065bmon, f.aqpb065bfdes
                  into lx_mcof, lx_fdes
                  from (select x.aqpb065bmon, x.aqpb065bfdes
                          from aqpb065b x
                         where x.aqpb065bcod = pn_cod
                           --and x.aqpb065bmod = pn_mod
                              -- and x.aqpb065bsuc = pn_suc --  jrodriguej 28.06.2021
                            and x.aqpb065bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
                           and x.aqpb065bmda = pn_mda
                           and x.aqpb065bpap = pn_pap
                           and x.aqpb065bcta = pn_cta
                           and x.aqpb065bope = pn_ope
                              -- and x.aqpb065bsbo = pn_sbo
                              -- and x.aqpb065btop = pn_top
                           and x.aqpb065bfec <= pn_fecha
                           and x.aqpb065best <> 'D'
                         order by x.aqpb065bfec desc) f
                 where rownum = 1;
              
              exception
                when others then
                
                  lx_mcof := 0;
                  lx_fdes := null;
                
              end;
            
            when others then
            
              lx_mcof := 0;
              lx_fdes := null;
            
          end;
        
        when pn_indi = 2 then
          -- FAE
        
          begin
          
            select x.aqpb067bmon, x.aqpb067bfdes
              into lx_mcof, lx_fdes
              from aqpb067b x
             where x.aqpb067bcod = pn_cod
               --and x.aqpb067bmod = pn_mod
                  -- and x.aqpb067bsuc = pn_suc --  jrodriguej 28.06.2021
                             and x.aqpb067bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
               and x.aqpb067bmda = pn_mda
               and x.aqpb067bpap = pn_pap
               and x.aqpb067bcta = pn_cta
               and x.aqpb067bope = pn_ope
                  -- and x.aqpb067bsbo = pn_sbo
                  -- and x.aqpb067btop = pn_top
               and x.aqpb067bfec <= pn_fecha
               and x.aqpb067best <> 'D';
          
          exception
            when too_many_rows then
            
              begin
              
                select f.aqpb067bmon, f.aqpb067bfdes
                  into lx_mcof, lx_fdes
                  from (select x.aqpb067bmon, x.aqpb067bfdes
                          from aqpb067b x
                         where x.aqpb067bcod = pn_cod
                           --and x.aqpb067bmod = pn_mod
                              -- and x.aqpb067bsuc = pn_suc --  jrodriguej 28.06.2021
                            and x.aqpb067bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
                           and x.aqpb067bmda = pn_mda
                           and x.aqpb067bpap = pn_pap
                           and x.aqpb067bcta = pn_cta
                           and x.aqpb067bope = pn_ope
                              -- and x.aqpb067bsbo = pn_sbo
                              -- and x.aqpb067btop = pn_top
                           and x.aqpb067bfec <= pn_fecha
                           and x.aqpb067best <> 'D'
                         order by x.aqpb067bfec desc) f
                 where rownum = 1;
              
              exception
                when others then
                
                  lx_mcof := 0;
                  lx_fdes := null;
                
              end;
            
            when others then
            
              lx_mcof := 0;
              lx_fdes := null;
            
          end;
        
        when pn_indi = 3 then
          -- CRECER
        
          begin
          
            select x.aqpb073bmon, x.aqpb073bfdes
              into lx_mcof, lx_fdes
              from aqpb073b x
             where x.aqpb073bcod = pn_cod
               --and x.aqpb073bmod = pn_mod
                  -- and x.aqpb073bsuc = pn_suc --  jrodriguej 28.06.2021
                             and x.aqpb073bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
               and x.aqpb073bmda = pn_mda
               and x.aqpb073bpap = pn_pap
               and x.aqpb073bcta = pn_cta
               and x.aqpb073bope = pn_ope
                  -- and x.aqpb073bsbo = pn_sbo
                  -- and x.aqpb073btop = pn_top
               and x.aqpb073bfec <= pn_fecha
               and x.aqpb073best <> 'D';
          
          exception
            when too_many_rows then
            
              begin
              
                select f.aqpb073bmon, f.aqpb073bfdes
                  into lx_mcof, lx_fdes
                  from (select x.aqpb073bmon, x.aqpb073bfdes
                          from aqpb073b x
                         where x.aqpb073bcod = pn_cod
                           --and x.aqpb073bmod = pn_mod
                              -- and x.aqpb073bsuc = pn_suc --  jrodriguej 28.06.2021
                             and x.aqpb073bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
                           and x.aqpb073bmda = pn_mda
                           and x.aqpb073bpap = pn_pap
                           and x.aqpb073bcta = pn_cta
                           and x.aqpb073bope = pn_ope
                              -- and x.aqpb073bsbo = pn_sbo
                              -- and x.aqpb073btop = pn_top
                           and x.aqpb073bfec <= pn_fecha
                           and x.aqpb073best <> 'D'
                         order by x.aqpb073bfec desc) f
                 where rownum = 1;
              
              exception
                when others then
                
                  lx_mcof := 0;
                  lx_fdes := null;
                
              end;
            
            when others then
            
              lx_mcof := 0;
              lx_fdes := null;
            
          end;
        
      end case;
    
      --- b) Sumatoria de pagos
      --- Capital
      if lx_mcof <> 0 and pn_fecha >= lx_fdes then
        begin
        
          select nvl(sum(t.pp1cap), 0) --, nvl(sum(t.pp1int), 0)
            into lx_scap
          
            from fsd602 t
           where t.pgcod = lr_cod
             --and t.ppmod = lr_mod
                --and t.ppsuc = pn_suc --  jrodriguej 28.06.2021
             and t.ppsuc in (select p.sucurs
                               from fst001 p
                              where p.pgcod = 1
                                and p.sucurs < 800)
             and t.ppmda = lr_mda
             and t.pppap = lr_pap
             and t.ppcta = lr_cta
             and t.ppoper = lr_oper
                -- and t.ppsbop = pn_sbo
                -- and t.pptope = pn_top
             and t.pp1stat in ('P', 'T')
             and t.pp1cap > 0
             and (t.d602mo, t.d602tr) in
                 (select x.tp1nro1, x.tp1nro2
                    from fst198 x
                   where x.TP1COD = 1
                     and x.TP1COD1 = 11144
                     and x.TP1CORR1 = 1
                     and x.tp1corr2 = 3
                     and x.tp1corr3 > 0)
             and t.d602fc >= lx_fdes
             and t.d602fc <= pn_fecha
             and t.d602co = 'S';
        
        exception
          when others then
            lx_scap := 0;
        end;

        -- Montos que han sido cancelados después de la fecha de corte
        if lx_fdia <> pn_fecha then
        
          begin
            select nvl(x.HCIMP1, 0) --,  x.* 
              into lx_mext
              from fsh016 x, fsh015 t
             where x.PGCOD = t.pgcod
               and x.HCMOD = t.hcmod
               and x.HSUCOR = t.hsucor
               and x.HTRAN = t.htran
               and x.HNREL = t.hnrel
               and x.HFCON = t.hfcon
               and x.PGCOD = pn_cod
               and x.HMODUL = pn_mod
               and x.HSUCUR = pn_suc
               and x.HMDA = pn_mda
               and x.HPAP = pn_pap
               and x.HCTA = pn_cta
               and x.HOPER = pn_ope
               and x.HSUBOP = pn_sbo
               and x.HTOPER = pn_top
               and --- HRUBRO: 1411, 1421, 1414, 1424, 1415,1425,1416, 1426
                   substr(x.HRUBRO, 1, 4) in
                   (1411, 1421, 1414, 1424, 1415, 1425, 1416, 1426)
               and x.HFCON > pn_fecha
               and x.HFVAL <= pn_fecha
               and (x.HCMOD, x.HTRAN) in
                   (select f.tp1nro1 + 500, f.tp1nro2 --obtener trx extornos
                      from fst198 f
                     where f.TP1COD = 1
                       and f.TP1COD1 = 11144
                       and f.TP1CORR1 = 1
                       and f.tp1corr2 = 3
                       and f.tp1corr3 > 0);
          exception
            when others then
              lx_mext := 0;
          end;
        
        else
          lx_mext := 0;
        end if;
        --pagos honramiento
        begin
          select sum(x.HCIMP1) into lx_shon
          from   fsh016 x, fsh015 t
             where x.PGCOD = t.pgcod
               and x.HCMOD = t.hcmod
               and x.HSUCOR = t.hsucor
               and x.HTRAN = t.htran
               and x.HNREL = t.hnrel
               and x.HFCON = t.hfcon
               and x.PGCOD = pn_cod
               --and x.HMODUL = 103
               --and x.HSUCUR = 20
               and x.HMDA = pn_mda
               and x.HPAP = pn_pap               
               and x.HCTA = pn_cta
               and x.HOPER = pn_ope
               --and x.HSUBOP = 3
               --and x.HTOPER = 109
               --and x.HFCON > '01/01/2022'
               and x.HFCON <= pn_fecha
               and (x.HCMOD, x.HTRAN,x.hcord) in (
                   select tp1nro1,tp1nro2,tp1nro3 
                   from fst198 
                   where tp1cod = 1 
                   and tp1cod1 = 11164 
                   and tp1corr1 = 4 
                   and tp1corr2 = 1 
                   and tp1corr3 >0);
         exception
            when others then
              lx_shon := 0;
        end;
        --extornos honramiento
        begin
          select sum(x.HCIMP1) into lx_shon_ext
          from   fsh016 x, fsh015 t
             where x.PGCOD = t.pgcod
               and x.HCMOD = t.hcmod
               and x.HSUCOR = t.hsucor
               and x.HTRAN = t.htran
               and x.HNREL = t.hnrel
               and x.HFCON = t.hfcon
               and x.PGCOD = pn_cod
               --and x.HMODUL = 103
               --and x.HSUCUR = 20
               and x.HMDA = pn_mda
               and x.HPAP = pn_pap               
               and x.HCTA = pn_cta
               and x.HOPER = pn_ope
               --and x.HSUBOP = 3
               --and x.HTOPER = 109
               --and x.HFCON > '01/01/2022'
               and x.HFCON <= pn_fecha
               and (x.HCMOD, x.HTRAN,x.hcord) in (
                   select tp1nro1,tp1nro2,tp1nro3 
                   from fst198 
                   where tp1cod = 1 
                   and tp1cod1 = 11164 
                   and tp1corr1 = 4 
                   and tp1corr2 = 2 
                   and tp1corr3 >0);
         exception
            when others then
              lx_shon_ext := 0;
        end;
        
        --- Distribución de pago, mód 200
        lv_cap := 0;
        lv_int := 0;
        lv_icv := 0;
        lv_mor := 0;
        lv_seg := 0;
        lv_rub := 0;
        lv_gas  := 0; 
              
        begin
          -- Call the procedure
          pq_cr_movcre_fsh016.sp_cr_mov_fsh016(pn_emp => pn_cod,
                                               pn_mod => pn_mod,
                                               pn_suc => pn_suc,
                                               pn_mda => pn_mda,
                                               pn_pap => pn_pap,
                                               pn_cta => pn_cta,
                                               pn_ope => pn_ope,
                                               pn_sbo => pn_sbo,
                                               pn_top => pn_top,
                                               pd_fpp => pn_fecha, --- Fecha proceso
                                               pd_fec => lc_fsis, --- Fecha sistema
                                               pd_fei => null,    --- Fecha de inicio de cálculo
                                               pc_ind => null,       --- Indicador último pago
                                               pv_cap => lv_cap, --- capital
                                               pv_int => lv_int, --- interés
                                               pv_icv => lv_icv, --- interés compensatorio
                                               pv_mor => lv_mor, --- mora / pendalidad
                                               pv_seg => lv_seg, --- segurs
                                               pv_rub => lv_rub, --- rubr
                                               pv_gas => lv_gas); --- otros gastos
        
        lv_gas := lv_gas + lv_seg;
        
        exception
          when others then
            
          lv_cap := 0;
          lv_int := 0;
          lv_icv := 0;
          lv_mor := 0;
          lv_seg := 0;
          lv_rub := 0;
          lv_gas  := 0;     
                     
        end;

        --- Resultados totales
        lx_scap := lx_scap + lx_mext + lv_cap + nvl(lx_shon,0) - nvl(lx_shon_ext,0);
      
      else
        lx_scap := 0;
      end if;
    
      if lx_mcof is null then
        lx_mcof := 0;
      end if;
    
      --- c) Resultado
      pn_sald := lx_mcof - lx_scap;
    
      if pn_sald < 0 then
        pn_sald := 0;
      end if;
    end if; -- fin lc_canc       
  
    -- Verificación de estado del crédito
    if pn_stat = 99 then
      pn_sald := 0;
    end if;
  
  end sp_obtener_sald_insol200_h;
  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  procedure sp_obtener_sald_insol2_h99(pn_cod   in number,
                                   pn_mod   in number,
                                   pn_suc   in number,
                                   pn_mda   in number,
                                   pn_pap   in number,
                                   pn_cta   in number,
                                   pn_ope   in number,
                                   pn_sbo   in number,
                                   pn_top   in number,
                                   pn_fecha in date,
                                   pn_indi  in number,
                                   pn_stat  in number,
                                   pn_sald  out number) -- saldo insoluto
   is
    -- Saldo insoluto = monto_cofide - sumatorio de pagos
    -- pn_indi = 1 -----> REACTIVA
    -- pn_indi = 2 -----> FAE
    -- pn_indi = 3 -----> CRECER
  
    lx_mcof number(10, 2);
    lx_scap number(17, 2);
    lx_shon number(17, 2);
    lx_shon_ext number(17, 2);
    lx_fdes date;
    lx_mext number(17, 2);
    lx_fdia date;
    lc_canc char(1);
    lx_stat number(2);
  
  begin
  
    select x.pgfape into lx_fdia from fst017 x where x.pgcod = 1;
  
    --validar estado de credito y trx para determinar si es 30/360
    lc_canc := 'N';
  
    begin
    
      select 'S'
        into lc_canc
        from fsd602 t
       where t.pgcod = pn_cod
         --and t.ppmod = pn_mod
            --and t.ppsuc = pn_suc --  jrodriguej 28.06.2021
         and t.ppsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800)
         and t.ppmda = pn_mda
         and t.pppap = pn_pap
         and t.ppcta = pn_cta
         and t.ppoper = pn_ope
            -- and t.ppsbop = pn_sbo
            -- and t.pptope = pn_top
         and t.pp1stat in ('P', 'T')
         and t.pp1cap > 0
         and (t.d602mo, t.d602tr) in
             (select x.tp1nro1, x.tp1nro2
                from fst198 x
               where x.TP1COD = 1
                 and x.TP1COD1 = 11144
                 and x.TP1CORR1 = 1
                 and x.tp1corr2 = 4 --flag determina si trx se pertenece a cancelacion
                 and x.tp1corr3 > 0)
         and t.d602fc >= lx_fdes
         and t.d602fc <= pn_fecha
         and t.d602co = 'S';
    
    exception
      when others then
        lc_canc := 'N';
    end;
  
    if lc_canc = 'S' then
      pn_sald := 0;
    
    else
      -- a) monto COFIDE
      case
        when pn_indi = 1 then
          -- REACTIVA
        
          begin
          
            select x.aqpb065bmon, x.aqpb065bfdes
              into lx_mcof, lx_fdes
              from aqpb065b x
             where x.aqpb065bcod = pn_cod
               --and x.aqpb065bmod = pn_mod
                  -- and x.aqpb065bsuc = pn_suc --  jrodriguej 28.06.2021
                             and x.aqpb065bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
               and x.aqpb065bmda = pn_mda
               and x.aqpb065bpap = pn_pap
               and x.aqpb065bcta = pn_cta
               and x.aqpb065bope = pn_ope
                  -- and x.aqpb065bsbo = pn_sbo
                  -- and x.aqpb065btop = pn_top
               and x.aqpb065bfec <= pn_fecha
               and x.aqpb065best <> 'D';
          
          exception
            when too_many_rows then
            
              begin
              
                select f.aqpb065bmon, f.aqpb065bfdes
                  into lx_mcof, lx_fdes
                  from (select x.aqpb065bmon, x.aqpb065bfdes
                          from aqpb065b x
                         where x.aqpb065bcod = pn_cod
                           --and x.aqpb065bmod = pn_mod
                              -- and x.aqpb065bsuc = pn_suc --  jrodriguej 28.06.2021
                               and x.aqpb065bsuc in (select p.sucurs
                               from fst001 p
                              where p.pgcod = 1
                                and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
                           and x.aqpb065bmda = pn_mda
                           and x.aqpb065bpap = pn_pap
                           and x.aqpb065bcta = pn_cta
                           and x.aqpb065bope = pn_ope
                              -- and x.aqpb065bsbo = pn_sbo
                              -- and x.aqpb065btop = pn_top
                           and x.aqpb065bfec <= pn_fecha
                           and x.aqpb065best <> 'D'
                         order by x.aqpb065bfec desc) f
                 where rownum = 1;
              
              exception
                when others then
                
                  lx_mcof := 0;
                  lx_fdes := null;
                
              end;
            
            when others then
            
              lx_mcof := 0;
              lx_fdes := null;
            
          end;
        
        when pn_indi = 2 then
          -- FAE
        
          begin
          
            select x.aqpb067bmon, x.aqpb067bfdes
              into lx_mcof, lx_fdes
              from aqpb067b x
             where x.aqpb067bcod = pn_cod
               --and x.aqpb067bmod = pn_mod
                  -- and x.aqpb067bsuc = pn_suc --  jrodriguej 28.06.2021
                             and x.aqpb067bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
               and x.aqpb067bmda = pn_mda
               and x.aqpb067bpap = pn_pap
               and x.aqpb067bcta = pn_cta
               and x.aqpb067bope = pn_ope
                  -- and x.aqpb067bsbo = pn_sbo
                  -- and x.aqpb067btop = pn_top
               and x.aqpb067bfec <= pn_fecha
               and x.aqpb067best <> 'D';
          
          exception
            when too_many_rows then
            
              begin
              
                select f.aqpb067bmon, f.aqpb067bfdes
                  into lx_mcof, lx_fdes
                  from (select x.aqpb067bmon, x.aqpb067bfdes
                          from aqpb067b x
                         where x.aqpb067bcod = pn_cod
                           --and x.aqpb067bmod = pn_mod
                              -- and x.aqpb067bsuc = pn_suc --  jrodriguej 28.06.2021
                            and x.aqpb067bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
                           and x.aqpb067bmda = pn_mda
                           and x.aqpb067bpap = pn_pap
                           and x.aqpb067bcta = pn_cta
                           and x.aqpb067bope = pn_ope
                              -- and x.aqpb067bsbo = pn_sbo
                              -- and x.aqpb067btop = pn_top
                           and x.aqpb067bfec <= pn_fecha
                           and x.aqpb067best <> 'D'
                         order by x.aqpb067bfec desc) f
                 where rownum = 1;
              
              exception
                when others then
                
                  lx_mcof := 0;
                  lx_fdes := null;
                
              end;
            
            when others then
            
              lx_mcof := 0;
              lx_fdes := null;
            
          end;
        
        when pn_indi = 3 then
          -- CRECER
        
          begin
          
            select x.aqpb073bmon, x.aqpb073bfdes
              into lx_mcof, lx_fdes
              from aqpb073b x
             where x.aqpb073bcod = pn_cod
               --and x.aqpb073bmod = pn_mod
                  -- and x.aqpb073bsuc = pn_suc --  jrodriguej 28.06.2021
                             and x.aqpb073bsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
               and x.aqpb073bmda = pn_mda
               and x.aqpb073bpap = pn_pap
               and x.aqpb073bcta = pn_cta
               and x.aqpb073bope = pn_ope
                  -- and x.aqpb073bsbo = pn_sbo
                  -- and x.aqpb073btop = pn_top
               and x.aqpb073bfec <= pn_fecha
               and x.aqpb073best <> 'D';
          
          exception
            when too_many_rows then
            
              begin
              
                select f.aqpb073bmon, f.aqpb073bfdes
                  into lx_mcof, lx_fdes
                  from (select x.aqpb073bmon, x.aqpb073bfdes
                          from aqpb073b x
                         where x.aqpb073bcod = pn_cod
                          -- and x.aqpb073bmod = pn_mod
                              -- and x.aqpb073bsuc = pn_suc --  jrodriguej 28.06.2021
                               and x.aqpb073bsuc in (select p.sucurs
                               from fst001 p
                              where p.pgcod = 1
                                and p.sucurs < 800) ---2024.04.04 dcastro se agrego sucursales
                           and x.aqpb073bmda = pn_mda
                           and x.aqpb073bpap = pn_pap
                           and x.aqpb073bcta = pn_cta
                           and x.aqpb073bope = pn_ope
                              -- and x.aqpb073bsbo = pn_sbo
                              -- and x.aqpb073btop = pn_top
                           and x.aqpb073bfec <= pn_fecha
                           and x.aqpb073best <> 'D'
                         order by x.aqpb073bfec desc) f
                 where rownum = 1;
              
              exception
                when others then
                
                  lx_mcof := 0;
                  lx_fdes := null;
                
              end;
            
            when others then
            
              lx_mcof := 0;
              lx_fdes := null;
            
          end;
        
      end case;
    
      --- b) Sumatoria de pagos
      --- Capital
      if lx_mcof <> 0 and pn_fecha >= lx_fdes then
        begin
        
          select nvl(sum(t.pp1cap), 0) --, nvl(sum(t.pp1int), 0)
            into lx_scap
          
            from fsd602 t
           where t.pgcod = pn_cod
             --and t.ppmod = pn_mod
                --and t.ppsuc = pn_suc --  jrodriguej 28.06.2021
             and t.ppsuc in (select p.sucurs
                               from fst001 p
                              where p.pgcod = 1
                                and p.sucurs < 800)
             and t.ppmda = pn_mda
             and t.pppap = pn_pap
             and t.ppcta = pn_cta
             and t.ppoper = pn_ope
                -- and t.ppsbop = pn_sbo
                -- and t.pptope = pn_top
             and t.pp1stat in ('P', 'T')
             and t.pp1cap > 0
             and (t.d602mo, t.d602tr) in
                 (select x.tp1nro1, x.tp1nro2
                    from fst198 x
                   where x.TP1COD = 1
                     and x.TP1COD1 = 11144
                     and x.TP1CORR1 = 1
                     and x.tp1corr2 = 3
                     and x.tp1corr3 > 0)
             and t.d602fc >= lx_fdes
             and t.d602fc <= pn_fecha
             and t.d602co = 'S';
        
        exception
          when others then
            lx_scap := 0;
        end;
      
        if lx_fdia <> pn_fecha then
        
          begin
            select nvl(x.HCIMP1, 0) --,  x.* 
              into lx_mext
              from fsh016 x, fsh015 t
             where x.PGCOD = t.pgcod
               and x.HCMOD = t.hcmod
               and x.HSUCOR = t.hsucor
               and x.HTRAN = t.htran
               and x.HNREL = t.hnrel
               and x.HFCON = t.hfcon
               and x.PGCOD = pn_cod
               and x.HMODUL = pn_mod
               and x.HSUCUR = pn_suc
               and x.HMDA = pn_mda
               and x.HPAP = pn_pap
               and x.HCTA = pn_cta
               and x.HOPER = pn_ope
               and x.HSUBOP = pn_sbo
               and x.HTOPER = pn_top
               and --- HRUBRO: 1411, 1421, 1414, 1424, 1415,1425,1416, 1426
                   substr(x.HRUBRO, 1, 4) in
                   (1411, 1421, 1414, 1424, 1415, 1425, 1416, 1426)
               and x.HFCON > pn_fecha
               and x.HFVAL <= pn_fecha
               and (x.HCMOD, x.HTRAN) in
                   (select f.tp1nro1 + 500, f.tp1nro2 --obtener trx extornos
                      from fst198 f
                     where f.TP1COD = 1
                       and f.TP1COD1 = 11144
                       and f.TP1CORR1 = 1
                       and f.tp1corr2 = 3
                       and f.tp1corr3 > 0);
          exception
            when others then
              lx_mext := 0;
          end;
        
        else
          lx_mext := 0;
        end if;
        --pagos honramiento
        begin
          select sum(x.HCIMP1) into lx_shon
          from   fsh016 x, fsh015 t
             where x.PGCOD = t.pgcod
               and x.HCMOD = t.hcmod
               and x.HSUCOR = t.hsucor
               and x.HTRAN = t.htran
               and x.HNREL = t.hnrel
               and x.HFCON = t.hfcon
               and x.PGCOD = pn_cod
               --and x.HMODUL = 103
               --and x.HSUCUR = 20
               and x.HMDA = pn_mda
               and x.HPAP = pn_pap               
               and x.HCTA = pn_cta
               and x.HOPER = pn_ope
               --and x.HSUBOP = 3
               --and x.HTOPER = 109
               --and x.HFCON > '01/01/2022'
               and x.HFCON <= pn_fecha
               and (x.HCMOD, x.HTRAN,x.hcord) in (
                   select tp1nro1,tp1nro2,tp1nro3 
                   from fst198 
                   where tp1cod = 1 
                   and tp1cod1 = 11164 
                   and tp1corr1 = 4 
                   and tp1corr2 = 1 
                   and tp1corr3 >0);
         exception
            when others then
              lx_shon := 0;
        end;
        --extornos honramiento
        begin
          select sum(x.HCIMP1) into lx_shon_ext
          from   fsh016 x, fsh015 t
             where x.PGCOD = t.pgcod
               and x.HCMOD = t.hcmod
               and x.HSUCOR = t.hsucor
               and x.HTRAN = t.htran
               and x.HNREL = t.hnrel
               and x.HFCON = t.hfcon
               and x.PGCOD = pn_cod
               --and x.HMODUL = 103
               --and x.HSUCUR = 20
               and x.HMDA = pn_mda
               and x.HPAP = pn_pap               
               and x.HCTA = pn_cta
               and x.HOPER = pn_ope
               --and x.HSUBOP = 3
               --and x.HTOPER = 109
               --and x.HFCON > '01/01/2022'
               and x.HFCON <= pn_fecha
               and (x.HCMOD, x.HTRAN,x.hcord) in (
                   select tp1nro1,tp1nro2,tp1nro3 
                   from fst198 
                   where tp1cod = 1 
                   and tp1cod1 = 11164 
                   and tp1corr1 = 4 
                   and tp1corr2 = 2 
                   and tp1corr3 >0);
         exception
            when others then
              lx_shon_ext := 0;
        end;
        
        lx_scap := lx_scap + lx_mext + nvl(lx_shon,0) - nvl(lx_shon_ext,0);
      
      else
        lx_scap := 0;
      end if;
    
      if lx_mcof is null then
        lx_mcof := 0;
      end if;
    
      --- c) Resultado
      pn_sald := lx_mcof - lx_scap;
    
      if pn_sald < 0 then
        pn_sald := 0;
      end if;
    end if; -- fin lc_canc      
  
  end sp_obtener_sald_insol2_h99;
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
  procedure sp_obtener_sald_insol200_h99(pn_cod   in number,
                                   pn_mod   in number,
                                   pn_suc   in number,
                                   pn_mda   in number,
                                   pn_pap   in number,
                                   pn_cta   in number,
                                   pn_ope   in number,
                                   pn_sbo   in number,
                                   pn_top   in number,
                                   pn_fecha in date,
                                   pn_indi  in number,
                                   pn_stat  in number,
                                   pn_sald  out number) -- saldo insoluto
   is
    -- Saldo insoluto = monto_cofide - sumatorio de pagos
    -- pn_indi = 1 -----> REACTIVA
    -- pn_indi = 2 -----> FAE
    -- pn_indi = 3 -----> CRECER
  
    lx_mcof number(10, 2);
    lx_scap number(17, 2);
    lx_shon number(17, 2);
    lx_shon_ext number(17, 2);
    lx_fdes date;
    lx_mext number(17, 2);
    lx_fdia date;
    lc_canc char(1);
    lx_stat number(2);
    
   lc_fsis date;
    
    lv_cap number(16,2); --- capital
    lv_int number(16,2); --- interés
    lv_icv number(16,2); --- interés compensatorio
    lv_mor number(16,2); --- mora / pendalidad
    lv_seg number(16,2); --- segurs
    lv_rub number(16,2); --- rubr
    lv_gas number(16,2); --- otros gastos  
    
    lr_cod  NUMBER(3);
    lr_mod  NUMBER(3);
    lr_suc  NUMBER(3);
    lr_mda  NUMBER(4);
    lr_pap  NUMBER(4);
    lr_cta  NUMBER(9);
    lr_oper NUMBER(9);
    lr_sbop NUMBER(3);
    lr_tope NUMBER(3);   
    
    
  
  begin
  
    select x.pgfape into lc_fsis from fst017 x where x.pgcod = 1;
    
    -- clave anterior al mod 200
      begin
        select f.pgcod,
               f.aomod,
               f.aosuc,
               f.aomda,
               f.aopap,
               f.aocta,
               f.aooper,
               f.aosbop,
               f.aotope
          into lr_cod,
               lr_mod,
               lr_suc,
               lr_mda,
               lr_pap,
               lr_cta,
               lr_oper,
               lr_sbop,
               lr_tope
          from (select x.pgcod,
                       x.aomod,
                       x.aosuc,
                       x.aomda,
                       x.aopap,
                       x.aocta,
                       x.aooper,
                       x.aosbop,
                       x.aotope
                  from fsd010 x
                 where x.pgcod = pn_cod
                   and x.aomda = pn_mda
                   and x.aopap = pn_pap
                   and x.aocta = pn_cta
                   and x.aooper = pn_ope
                   and x.aomod in
                       (select modulo
                          from fst111
                         where dscod = 50
                           and modulo not in (29, 120, 144, 200))
                 order by x.aosbop desc) f
         where rownum = 1;
      exception
        when others then
          lr_cod  := null;
          lr_mod  := null;
          lr_suc  := null;
          lr_mda  := null;
          lr_pap  := null;
          lr_cta  := null;
          lr_oper := null;
          lr_sbop := null;
          lr_tope := null;
      end;      
  
    --validar estado de credito y trx para determinar si es 30/360
    lc_canc := 'N';
  
    begin
    
      select 'S'
        into lc_canc
        from fsd602 t
       where t.pgcod = lr_cod
         and t.ppmod = lr_mod
            --and t.ppsuc = pn_suc --  jrodriguej 28.06.2021
         and t.ppsuc in (select p.sucurs
                           from fst001 p
                          where p.pgcod = 1
                            and p.sucurs < 800)
         and t.ppmda = lr_mda
         and t.pppap = lr_pap
         and t.ppcta = lr_cta
         and t.ppoper = lr_oper
            -- and t.ppsbop = pn_sbo
            -- and t.pptope = pn_top
         and t.pp1stat in ('P', 'T')
         and t.pp1cap > 0
         and (t.d602mo, t.d602tr) in
             (select x.tp1nro1, x.tp1nro2
                from fst198 x
               where x.TP1COD = 1
                 and x.TP1COD1 = 11144
                 and x.TP1CORR1 = 1
                 and x.tp1corr2 = 4 --flag determina si trx se pertenece a cancelacion
                 and x.tp1corr3 > 0)
         --and t.d602fc >= lx_fdes
         and t.d602fc <= pn_fecha
         and t.d602co = 'S';
    
    exception
      when others then
        lc_canc := 'N';
    end;
  
    if lc_canc = 'S' then
      pn_sald := 0;
    
    else
      -- a) monto COFIDE
      case
        when pn_indi = 1 then
          -- REACTIVA
        
          begin
          
            select x.aqpb065bmon, x.aqpb065bfdes
              into lx_mcof, lx_fdes
              from aqpb065b x
             where x.aqpb065bcod = pn_cod
               --and x.aqpb065bmod = pn_mod
                  -- and x.aqpb065bsuc = pn_suc --  jrodriguej 28.06.2021
               and x.aqpb065bmda = pn_mda
               and x.aqpb065bpap = pn_pap
               and x.aqpb065bcta = pn_cta
               and x.aqpb065bope = pn_ope
                  -- and x.aqpb065bsbo = pn_sbo
                  -- and x.aqpb065btop = pn_top
               and x.aqpb065bfec <= pn_fecha
               and x.aqpb065best <> 'D';
          
          exception
            when too_many_rows then
            
              begin
              
                select f.aqpb065bmon, f.aqpb065bfdes
                  into lx_mcof, lx_fdes
                  from (select x.aqpb065bmon, x.aqpb065bfdes
                          from aqpb065b x
                         where x.aqpb065bcod = pn_cod
                           --and x.aqpb065bmod = pn_mod
                              -- and x.aqpb065bsuc = pn_suc --  jrodriguej 28.06.2021
                           and x.aqpb065bmda = pn_mda
                           and x.aqpb065bpap = pn_pap
                           and x.aqpb065bcta = pn_cta
                           and x.aqpb065bope = pn_ope
                              -- and x.aqpb065bsbo = pn_sbo
                              -- and x.aqpb065btop = pn_top
                           and x.aqpb065bfec <= pn_fecha
                           and x.aqpb065best <> 'D'
                         order by x.aqpb065bfec desc) f
                 where rownum = 1;
              
              exception
                when others then
                
                  lx_mcof := 0;
                  lx_fdes := null;
                
              end;
            
            when others then
            
              lx_mcof := 0;
              lx_fdes := null;
            
          end;
        
        when pn_indi = 2 then
          -- FAE
        
          begin
          
            select x.aqpb067bmon, x.aqpb067bfdes
              into lx_mcof, lx_fdes
              from aqpb067b x
             where x.aqpb067bcod = pn_cod
               --and x.aqpb067bmod = pn_mod
                  -- and x.aqpb067bsuc = pn_suc --  jrodriguej 28.06.2021
               and x.aqpb067bmda = pn_mda
               and x.aqpb067bpap = pn_pap
               and x.aqpb067bcta = pn_cta
               and x.aqpb067bope = pn_ope
                  -- and x.aqpb067bsbo = pn_sbo
                  -- and x.aqpb067btop = pn_top
               and x.aqpb067bfec <= pn_fecha
               and x.aqpb067best <> 'D';
          
          exception
            when too_many_rows then
            
              begin
              
                select f.aqpb067bmon, f.aqpb067bfdes
                  into lx_mcof, lx_fdes
                  from (select x.aqpb067bmon, x.aqpb067bfdes
                          from aqpb067b x
                         where x.aqpb067bcod = pn_cod
                           --and x.aqpb067bmod = pn_mod
                              -- and x.aqpb067bsuc = pn_suc --  jrodriguej 28.06.2021
                           and x.aqpb067bmda = pn_mda
                           and x.aqpb067bpap = pn_pap
                           and x.aqpb067bcta = pn_cta
                           and x.aqpb067bope = pn_ope
                              -- and x.aqpb067bsbo = pn_sbo
                              -- and x.aqpb067btop = pn_top
                           and x.aqpb067bfec <= pn_fecha
                           and x.aqpb067best <> 'D'
                         order by x.aqpb067bfec desc) f
                 where rownum = 1;
              
              exception
                when others then
                
                  lx_mcof := 0;
                  lx_fdes := null;
                
              end;
            
            when others then
            
              lx_mcof := 0;
              lx_fdes := null;
            
          end;
        
        when pn_indi = 3 then
          -- CRECER
        
          begin
          
            select x.aqpb073bmon, x.aqpb073bfdes
              into lx_mcof, lx_fdes
              from aqpb073b x
             where x.aqpb073bcod = pn_cod
               --and x.aqpb073bmod = pn_mod
                  -- and x.aqpb073bsuc = pn_suc --  jrodriguej 28.06.2021
               and x.aqpb073bmda = pn_mda
               and x.aqpb073bpap = pn_pap
               and x.aqpb073bcta = pn_cta
               and x.aqpb073bope = pn_ope
                  -- and x.aqpb073bsbo = pn_sbo
                  -- and x.aqpb073btop = pn_top
               and x.aqpb073bfec <= pn_fecha
               and x.aqpb073best <> 'D';
          
          exception
            when too_many_rows then
            
              begin
              
                select f.aqpb073bmon, f.aqpb073bfdes
                  into lx_mcof, lx_fdes
                  from (select x.aqpb073bmon, x.aqpb073bfdes
                          from aqpb073b x
                         where x.aqpb073bcod = pn_cod
                           --and x.aqpb073bmod = pn_mod
                              -- and x.aqpb073bsuc = pn_suc --  jrodriguej 28.06.2021
                           and x.aqpb073bmda = pn_mda
                           and x.aqpb073bpap = pn_pap
                           and x.aqpb073bcta = pn_cta
                           and x.aqpb073bope = pn_ope
                              -- and x.aqpb073bsbo = pn_sbo
                              -- and x.aqpb073btop = pn_top
                           and x.aqpb073bfec <= pn_fecha
                           and x.aqpb073best <> 'D'
                         order by x.aqpb073bfec desc) f
                 where rownum = 1;
              
              exception
                when others then
                
                  lx_mcof := 0;
                  lx_fdes := null;
                
              end;
            
            when others then
            
              lx_mcof := 0;
              lx_fdes := null;
            
          end;
        
      end case;
    
      --- b) Sumatoria de pagos
      --- Capital
      if lx_mcof <> 0 and pn_fecha >= lx_fdes then
        begin
        
          select nvl(sum(t.pp1cap), 0) --, nvl(sum(t.pp1int), 0)
            into lx_scap
          
            from fsd602 t
           where t.pgcod = lr_cod
             --and t.ppmod = lr_mod
                --and t.ppsuc = pn_suc --  jrodriguej 28.06.2021
             and t.ppsuc in (select p.sucurs
                               from fst001 p
                              where p.pgcod = 1
                                and p.sucurs < 800)
             and t.ppmda = lr_mda
             and t.pppap = lr_pap
             and t.ppcta = lr_cta
             and t.ppoper = lr_oper
                -- and t.ppsbop = pn_sbo
                -- and t.pptope = pn_top
             and t.pp1stat in ('P', 'T')
             and t.pp1cap > 0
             and (t.d602mo, t.d602tr) in
                 (select x.tp1nro1, x.tp1nro2
                    from fst198 x
                   where x.TP1COD = 1
                     and x.TP1COD1 = 11144
                     and x.TP1CORR1 = 1
                     and x.tp1corr2 = 3
                     and x.tp1corr3 > 0)
             and t.d602fc >= lx_fdes
             and t.d602fc <= pn_fecha
             and t.d602co = 'S';
        
        exception
          when others then
            lx_scap := 0;
        end;

        -- Montos que han sido cancelados después de la fecha de corte
        if lx_fdia <> pn_fecha then
        
          begin
            select nvl(x.HCIMP1, 0) --,  x.* 
              into lx_mext
              from fsh016 x, fsh015 t
             where x.PGCOD = t.pgcod
               and x.HCMOD = t.hcmod
               and x.HSUCOR = t.hsucor
               and x.HTRAN = t.htran
               and x.HNREL = t.hnrel
               and x.HFCON = t.hfcon
               and x.PGCOD = pn_cod
               and x.HMODUL = pn_mod
               and x.HSUCUR = pn_suc
               and x.HMDA = pn_mda
               and x.HPAP = pn_pap
               and x.HCTA = pn_cta
               and x.HOPER = pn_ope
               and x.HSUBOP = pn_sbo
               and x.HTOPER = pn_top
               and --- HRUBRO: 1411, 1421, 1414, 1424, 1415,1425,1416, 1426
                   substr(x.HRUBRO, 1, 4) in
                   (1411, 1421, 1414, 1424, 1415, 1425, 1416, 1426)
               and x.HFCON > pn_fecha
               and x.HFVAL <= pn_fecha
               and (x.HCMOD, x.HTRAN) in
                   (select f.tp1nro1 + 500, f.tp1nro2 --obtener trx extornos
                      from fst198 f
                     where f.TP1COD = 1
                       and f.TP1COD1 = 11144
                       and f.TP1CORR1 = 1
                       and f.tp1corr2 = 3
                       and f.tp1corr3 > 0);
          exception
            when others then
              lx_mext := 0;
          end;
        
        else
          lx_mext := 0;
        end if;
        --pagos honramiento
        begin
          select sum(x.HCIMP1) into lx_shon
          from   fsh016 x, fsh015 t
             where x.PGCOD = t.pgcod
               and x.HCMOD = t.hcmod
               and x.HSUCOR = t.hsucor
               and x.HTRAN = t.htran
               and x.HNREL = t.hnrel
               and x.HFCON = t.hfcon
               and x.PGCOD = pn_cod
               --and x.HMODUL = 103
               --and x.HSUCUR = 20
               and x.HMDA = pn_mda
               and x.HPAP = pn_pap               
               and x.HCTA = pn_cta
               and x.HOPER = pn_ope
               --and x.HSUBOP = 3
               --and x.HTOPER = 109
               --and x.HFCON > '01/01/2022'
               and x.HFCON <= pn_fecha
               and (x.HCMOD, x.HTRAN,x.hcord) in (
                   select tp1nro1,tp1nro2,tp1nro3 
                   from fst198 
                   where tp1cod = 1 
                   and tp1cod1 = 11164 
                   and tp1corr1 = 4 
                   and tp1corr2 = 1 
                   and tp1corr3 >0);
         exception
            when others then
              lx_shon := 0;
        end;
        --extornos honramiento
        begin
          select sum(x.HCIMP1) into lx_shon_ext
          from   fsh016 x, fsh015 t
             where x.PGCOD = t.pgcod
               and x.HCMOD = t.hcmod
               and x.HSUCOR = t.hsucor
               and x.HTRAN = t.htran
               and x.HNREL = t.hnrel
               and x.HFCON = t.hfcon
               and x.PGCOD = pn_cod
               --and x.HMODUL = 103
               --and x.HSUCUR = 20
               and x.HMDA = pn_mda
               and x.HPAP = pn_pap               
               and x.HCTA = pn_cta
               and x.HOPER = pn_ope
               --and x.HSUBOP = 3
               --and x.HTOPER = 109
               --and x.HFCON > '01/01/2022'
               and x.HFCON <= pn_fecha
               and (x.HCMOD, x.HTRAN,x.hcord) in (
                   select tp1nro1,tp1nro2,tp1nro3 
                   from fst198 
                   where tp1cod = 1 
                   and tp1cod1 = 11164 
                   and tp1corr1 = 4 
                   and tp1corr2 = 2 
                   and tp1corr3 >0);
         exception
            when others then
              lx_shon_ext := 0;
        end;
        
        --- Distribución de pago, mód 200
        lv_cap := 0;
        lv_int := 0;
        lv_icv := 0;
        lv_mor := 0;
        lv_seg := 0;
        lv_rub := 0;
        lv_gas  := 0; 
              
        begin
          -- Call the procedure
          pq_cr_movcre_fsh016.sp_cr_mov_fsh016(pn_emp => pn_cod,
                                               pn_mod => pn_mod,
                                               pn_suc => pn_suc,
                                               pn_mda => pn_mda,
                                               pn_pap => pn_pap,
                                               pn_cta => pn_cta,
                                               pn_ope => pn_ope,
                                               pn_sbo => pn_sbo,
                                               pn_top => pn_top,
                                               pd_fpp => pn_fecha, --- Fecha proceso
                                               pd_fec => lc_fsis, --- Fecha sistema
                                               pd_fei => null,    --- Fecha de inicio de cálculo
                                               pc_ind => null,       --- Indicador último pago
                                               pv_cap => lv_cap, --- capital
                                               pv_int => lv_int, --- interés
                                               pv_icv => lv_icv, --- interés compensatorio
                                               pv_mor => lv_mor, --- mora / pendalidad
                                               pv_seg => lv_seg, --- segurs
                                               pv_rub => lv_rub, --- rubr
                                               pv_gas => lv_gas); --- otros gastos
        
        lv_gas := lv_gas + lv_seg;
        
        exception
          when others then
            
          lv_cap := 0;
          lv_int := 0;
          lv_icv := 0;
          lv_mor := 0;
          lv_seg := 0;
          lv_rub := 0;
          lv_gas  := 0;     
                     
        end;

        --- Resultados totales
        lx_scap := lx_scap + lx_mext + lv_cap + nvl(lx_shon,0) - nvl(lx_shon_ext,0);
      
      else
        lx_scap := 0;
      end if;
    
      if lx_mcof is null then
        lx_mcof := 0;
      end if;
    
      --- c) Resultado
      pn_sald := lx_mcof - lx_scap;
    
      if pn_sald < 0 then
        pn_sald := 0;
      end if;
    end if; -- fin lc_canc       
    
  end sp_obtener_sald_insol200_h99;
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     
end pq_cr_reporte_fondos;
/

